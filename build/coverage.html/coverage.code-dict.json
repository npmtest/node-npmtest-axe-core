{"/home/travis/build/npmtest/node-npmtest-axe-core/test.js":"/* istanbul instrument in package npmtest_axe_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-axe-core/lib.npmtest_axe_core.js":"/* istanbul instrument in package npmtest_axe_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_axe_core = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_axe_core = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-axe-core/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-axe-core && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_axe_core */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_axe_core\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_axe_core.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_axe_core.rollup.js'] =\n            local.assetsDict['/assets.npmtest_axe_core.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_axe_core.__dirname + '/lib.npmtest_axe_core.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-axe-core/node_modules/axe-core/axe.js":"/*! aXe v2.1.7\n * Copyright (c) 2016 Deque Systems, Inc.\n *\n * Your use of this Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This entire copyright notice must appear in every copy of this file you\n * distribute or in any file that contains substantial portions of this source\n * code.\n */\n(function axeFunction(window) {\n  // A window reference is required to access the axe object in a \"global\".\n  var global = window;\n  var document = window.document;\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*exported axe, commons */\n  /*global axeFunction, module, define */\n  // exported namespace for aXe\n  var axe = axe || {};\n  axe.version = '2.1.7';\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      'use strict';\n      return axe;\n    });\n  }\n  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports && typeof axeFunction.toString === 'function') {\n    axe.source = '(' + axeFunction.toString() + ')(this, this.document);';\n    module.exports = axe;\n  }\n  if (typeof window.getComputedStyle === 'function') {\n    window.axe = axe;\n  }\n  // local namespace for common functions\n  var commons;\n  'use strict';\n  /*exported utils */\n  var utils = axe.utils = {};\n  'use strict';\n  /*exported helpers */\n  var helpers = {};\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*global Rule, Check, RuleResult, commons: true */\n  function getDefaultConfiguration(audit) {\n    'use strict';\n    var config;\n    if (audit) {\n      config = axe.utils.clone(audit);\n      // Commons are configured into axe like everything else,\n      // however because things go funky if we have multiple commons objects\n      // we're not using the copy of that.\n      config.commons = audit.commons;\n    } else {\n      config = {};\n    }\n    config.reporter = config.reporter || null;\n    config.rules = config.rules || [];\n    config.checks = config.checks || [];\n    config.data = Object.assign({\n      checks: {},\n      rules: {}\n    }, config.data);\n    return config;\n  }\n  function unpackToObject(collection, audit, method) {\n    'use strict';\n    var i, l;\n    for (i = 0, l = collection.length; i < l; i++) {\n      audit[method](collection[i]);\n    }\n  }\n  /**\n * Constructor which holds configured rules and information about the document under test\n */\n  function Audit(audit) {\n    // defaults\n    this.brand = 'axe';\n    this.application = 'axeAPI';\n    this.tagExclude = [ 'experimental' ];\n    this.defaultConfig = audit;\n    this._init();\n  }\n  /**\n * Initializes the rules and checks\n */\n  Audit.prototype._init = function() {\n    var audit = getDefaultConfiguration(this.defaultConfig);\n    axe.commons = commons = audit.commons;\n    this.reporter = audit.reporter;\n    this.commands = {};\n    this.rules = [];\n    this.checks = {};\n    unpackToObject(audit.rules, this, 'addRule');\n    unpackToObject(audit.checks, this, 'addCheck');\n    this.data = {};\n    this.data.checks = audit.data && audit.data.checks || {};\n    this.data.rules = audit.data && audit.data.rules || {};\n    this.data.failureSummaries = audit.data && audit.data.failureSummaries || {};\n    this._constructHelpUrls();\n  };\n  /**\n * Adds a new command to the audit\n */\n  Audit.prototype.registerCommand = function(command) {\n    'use strict';\n    this.commands[command.id] = command.callback;\n  };\n  /**\n * Adds a new rule to the Audit.  If a rule with specified ID already exists, it will be overridden\n * @param {Object} spec Rule specification object\n */\n  Audit.prototype.addRule = function(spec) {\n    'use strict';\n    if (spec.metadata) {\n      this.data.rules[spec.id] = spec.metadata;\n    }\n    var rule = this.getRule(spec.id);\n    if (rule) {\n      rule.configure(spec);\n    } else {\n      this.rules.push(new Rule(spec, this));\n    }\n  };\n  /**\n * Adds a new check to the Audit.  If a Check with specified ID already exists, it will be\n * reconfigured\n *\n * @param {Object} spec Check specification object\n */\n  Audit.prototype.addCheck = function(spec) {\n    /*jshint evil:true */\n    'use strict';\n    var metadata = spec.metadata;\n    if ((typeof metadata === 'undefined' ? 'undefined' : _typeof(metadata)) === 'object') {\n      this.data.checks[spec.id] = metadata;\n      // Transform messages into functions:\n      if (_typeof(metadata.messages) === 'object') {\n        Object.keys(metadata.messages).filter(function(prop) {\n          return metadata.messages.hasOwnProperty(prop) && typeof metadata.messages[prop] === 'string';\n        }).forEach(function(prop) {\n          if (metadata.messages[prop].indexOf('function') === 0) {\n            metadata.messages[prop] = new Function('return ' + metadata.messages[prop] + ';')();\n          }\n        });\n      }\n    }\n    if (this.checks[spec.id]) {\n      this.checks[spec.id].configure(spec);\n    } else {\n      this.checks[spec.id] = new Check(spec);\n    }\n  };\n  /**\n * Runs the Audit; which in turn should call `run` on each rule.\n * @async\n * @param  {Context}   context The scope definition/context for analysis (include/exclude)\n * @param  {Object}    options Options object to pass into rules and/or disable rules or checks\n * @param  {Function} fn       Callback function to fire when audit is complete\n */\n  Audit.prototype.run = function(context, options, resolve, reject) {\n    'use strict';\n    this.validateOptions(options);\n    var q = axe.utils.queue();\n    this.rules.forEach(function(rule) {\n      if (axe.utils.ruleShouldRun(rule, context, options)) {\n        q.defer(function(res, rej) {\n          rule.run(context, options, res, function(err) {\n            if (!options.debug) {\n              var errResult = Object.assign(new RuleResult(rule), {\n                result: axe.constants.CANTTELL,\n                description: 'An error occured while running this rule',\n                message: err.message,\n                help: err.stack || err.message,\n                error: err\n              });\n              res(errResult);\n            } else {\n              rej(err);\n            }\n          });\n        });\n      }\n    });\n    q.then(function(results) {\n      resolve(results.filter(function(result) {\n        return !!result;\n      }));\n    }).catch(reject);\n  };\n  /**\n * Runs Rule `after` post processing functions\n * @param  {Array} results  Array of RuleResults to postprocess\n * @param  {Mixed} options  Options object to pass into rules and/or disable rules or checks\n */\n  Audit.prototype.after = function(results, options) {\n    'use strict';\n    var rules = this.rules;\n    return results.map(function(ruleResult) {\n      var rule = axe.utils.findBy(rules, 'id', ruleResult.id);\n      return rule.after(ruleResult, options);\n    });\n  };\n  /**\n * Get the rule with a given ID\n * @param  {string}\n * @return {Rule}\n */\n  Audit.prototype.getRule = function(ruleId) {\n    return this.rules.find(function(rule) {\n      return rule.id === ruleId;\n    });\n  };\n  /**\n * Ensure all rules that are expected to run exist\n * @throws {Error} If any tag or rule specified in options is unknown\n * @param  {Object} options  Options object\n * @return {Object}          Validated options object\n */\n  Audit.prototype.validateOptions = function(options) {\n    'use strict';\n    var audit = this;\n    // Validate runOnly\n    if (_typeof(options.runOnly) === 'object') {\n      var only = options.runOnly;\n      // Check if every value in options.runOnly is a known rule ID\n      if (only.type === 'rule' && Array.isArray(only.value)) {\n        only.value.forEach(function(ruleId) {\n          if (!audit.getRule(ruleId)) {\n            throw new Error('unknown rule `' + ruleId + '` in options.runOnly');\n          }\n        });\n      } else {\n        if (Array.isArray(only.value) && only.value.length > 0) {\n          var tags = [].concat(only.value);\n          audit.rules.forEach(function(rule) {\n            var tagPos, i, l;\n            if (!tags) {\n              return;\n            }\n            // Remove any known tag\n            for (i = 0, l = rule.tags.length; i < l; i++) {\n              tagPos = tags.indexOf(rule.tags[i]);\n              if (tagPos !== -1) {\n                tags.splice(tagPos, 1);\n              }\n            }\n          });\n          if (tags.length !== 0) {\n            throw new Error('could not find tags `' + tags.join('`, `') + '`');\n          }\n        }\n      }\n    }\n    if (_typeof(options.rules) === 'object') {\n      Object.keys(options.rules).forEach(function(ruleId) {\n        if (!audit.getRule(ruleId)) {\n          throw new Error('unknown rule `' + ruleId + '` in options.rules');\n        }\n      });\n    }\n    return options;\n  };\n  /*\n * Updates the default options and then applies them\n * @param  {Mixed} options  Options object\n */\n  Audit.prototype.setBranding = function(branding) {\n    'use strict';\n    if (branding && branding.hasOwnProperty('brand') && branding.brand && typeof branding.brand === 'string') {\n      this.brand = branding.brand;\n    }\n    if (branding && branding.hasOwnProperty('application') && branding.application && typeof branding.application === 'string') {\n      this.application = branding.application;\n    }\n    this._constructHelpUrls();\n  };\n  /**\n * For all the rules, create the helpUrl and add it to the data for that rule\n */\n  Audit.prototype._constructHelpUrls = function() {\n    var _this = this;\n    var version = axe.version.substring(0, axe.version.lastIndexOf('.'));\n    this.rules.forEach(function(rule) {\n      _this.data.rules[rule.id] = _this.data.rules[rule.id] || {};\n      _this.data.rules[rule.id].helpUrl = 'https://dequeuniversity.com/rules/' + _this.brand + '/' + version + '/' + rule.id + '?' + 'application=' + _this.application;\n    });\n  };\n  /**\n * Reset the default rules, checks and meta data\n */\n  Audit.prototype.resetRulesAndChecks = function() {\n    'use strict';\n    this._init();\n  };\n  'use strict';\n  /*exported CheckResult */\n  /**\n * Constructor for the result of checks\n * @param {Check} check\n */\n  function CheckResult(check) {\n    'use strict';\n    /**\n  * ID of the check.  Unique in the context of a rule.\n  * @type {String}\n  */\n    this.id = check.id;\n    /**\n  * Any data passed by Check (by calling `this.data()`)\n  * @type {Mixed}\n  */\n    this.data = null;\n    /**\n  * Any node that is related to the Check, specified by calling `this.relatedNodes([HTMLElement...])` inside the Check\n  * @type {Array}\n  */\n    this.relatedNodes = [];\n    /**\n  * The return value of the Check's evaluate function\n  * @type {Mixed}\n  */\n    this.result = null;\n  }\n  'use strict';\n  /*global CheckResult */\n  function createExecutionContext(spec) {\n    /*jshint evil:true */\n    'use strict';\n    if (typeof spec === 'string') {\n      return new Function('return ' + spec + ';')();\n    }\n    return spec;\n  }\n  function Check(spec) {\n    if (spec) {\n      this.id = spec.id;\n      this.configure(spec);\n    }\n  }\n  /**\n * Unique ID for the check.  Checks may be re-used, so there may be additional instances of checks\n * with the same ID.\n * @type {String}\n */\n  // Check.prototype.id;\n  /**\n * Free-form options that are passed as the second parameter to the `evaluate`\n * @type {Mixed}\n */\n  // Check.prototype.options;\n  /**\n * The actual code, accepts 2 parameters: node (the node under test), options (see this.options).\n * This function is run in the context of a checkHelper, which has the following methods\n * - `async()` - if called, the check is considered to be asynchronous; returns a callback function\n * - `data()` - free-form data object, associated to the `CheckResult` which is specific to each node\n * @type {Function}\n */\n  // Check.prototype.evaluate;\n  /**\n * Optional. Filter and/or modify checks for all nodes\n * @type {Function}\n */\n  // Check.prototype.after;\n  /**\n * enabled by default, if false, this check will not be included in the rule's evaluation\n * @type {Boolean}\n */\n  Check.prototype.enabled = true;\n  /**\n * Run the check's evaluate function (call `this.evaluate(node, options)`)\n * @param  {HTMLElement} node  The node to test\n * @param  {Object} options    The options that override the defaults and provide additional\n *                             information for the check\n * @param  {Function} callback Function to fire when check is complete\n */\n  Check.prototype.run = function(node, options, resolve, reject) {\n    'use strict';\n    options = options || {};\n    var enabled = options.hasOwnProperty('enabled') ? options.enabled : this.enabled, checkOptions = options.options || this.options;\n    if (enabled) {\n      var checkResult = new CheckResult(this);\n      var checkHelper = axe.utils.checkHelper(checkResult, resolve, reject);\n      var result;\n      try {\n        result = this.evaluate.call(checkHelper, node, checkOptions);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n      if (!checkHelper.isAsync) {\n        checkResult.result = result;\n        setTimeout(function() {\n          resolve(checkResult);\n        }, 0);\n      }\n    } else {\n      resolve(null);\n    }\n  };\n  /**\n * Override a check's settings after construction to allow for changing options\n * without having to implement the entire check\n *\n * @param {Object} spec - the specification of the attributes to be changed\n */\n  Check.prototype.configure = function(spec) {\n    var _this = this;\n    [ 'options', 'enabled' ].filter(function(prop) {\n      return spec.hasOwnProperty(prop);\n    }).forEach(function(prop) {\n      return _this[prop] = spec[prop];\n    });\n    [ 'evaluate', 'after' ].filter(function(prop) {\n      return spec.hasOwnProperty(prop);\n    }).forEach(function(prop) {\n      return _this[prop] = createExecutionContext(spec[prop]);\n    });\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*exported Context */\n  /*global isNodeInContext */\n  /**\n * Pushes a unique frame onto `frames` array, filtering any hidden iframes\n * @private\n * @param  {Array} collection The array of unique frames that is being operated on\n * @param  {HTMLElement} frame   The frame to push onto Context\n */\n  function pushUniqueFrame(collection, frame) {\n    'use strict';\n    if (axe.utils.isHidden(frame)) {\n      return;\n    }\n    var fr = axe.utils.findBy(collection, 'node', frame);\n    if (!fr) {\n      collection.push({\n        node: frame,\n        include: [],\n        exclude: []\n      });\n    }\n  }\n  /**\n * Unshift selectors of matching iframes\n * @private\n * @param  {Context} context \t  The context object to operate on and assign to\n * @param  {String} type          The \"type\" of context, 'include' or 'exclude'\n * @param  {Array} selectorArray  Array of CSS selectors, each element represents a frame;\n * where the last element is the actual node\n */\n  function pushUniqueFrameSelector(context, type, selectorArray) {\n    'use strict';\n    context.frames = context.frames || [];\n    var result, frame;\n    var frames = document.querySelectorAll(selectorArray.shift());\n    frameloop: for (var i = 0, l = frames.length; i < l; i++) {\n      frame = frames[i];\n      for (var j = 0, l2 = context.frames.length; j < l2; j++) {\n        if (context.frames[j].node === frame) {\n          context.frames[j][type].push(selectorArray);\n          break frameloop;\n        }\n      }\n      result = {\n        node: frame,\n        include: [],\n        exclude: []\n      };\n      if (selectorArray) {\n        result[type].push(selectorArray);\n      }\n      context.frames.push(result);\n    }\n  }\n  /**\n * Normalize the input of \"context\" so that many different methods of input are accepted\n * @private\n * @param  {Mixed} context  The configuration object passed to `Context`\n * @return {Object}         Normalized context spec to include both `include` and `exclude` arrays\n */\n  function normalizeContext(context) {\n    'use strict';\n    // typeof NodeList.length in PhantomJS === function\n    if (context && (typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object' || context instanceof NodeList) {\n      if (context instanceof Node) {\n        return {\n          include: [ context ],\n          exclude: []\n        };\n      }\n      if (context.hasOwnProperty('include') || context.hasOwnProperty('exclude')) {\n        return {\n          include: context.include || [ document ],\n          exclude: context.exclude || []\n        };\n      }\n      if (context.length === +context.length) {\n        return {\n          include: context,\n          exclude: []\n        };\n      }\n    }\n    if (typeof context === 'string') {\n      return {\n        include: [ context ],\n        exclude: []\n      };\n    }\n    return {\n      include: [ document ],\n      exclude: []\n    };\n  }\n  /**\n * Finds frames in context, converts selectors to Element references and pushes unique frames\n * @private\n * @param  {Context} context The instance of Context to operate on\n * @param  {String} type     The \"type\" of thing to parse, \"include\" or \"exclude\"\n * @return {Array}           Parsed array of matching elements\n */\n  function parseSelectorArray(context, type) {\n    'use strict';\n    var item, result = [];\n    for (var i = 0, l = context[type].length; i < l; i++) {\n      item = context[type][i];\n      // selector\n      if (typeof item === 'string') {\n        result = result.concat(axe.utils.toArray(document.querySelectorAll(item)));\n        break;\n      } else {\n        if (item && item.length && !(item instanceof Node)) {\n          if (item.length > 1) {\n            pushUniqueFrameSelector(context, type, item);\n          } else {\n            result = result.concat(axe.utils.toArray(document.querySelectorAll(item[0])));\n          }\n        } else {\n          result.push(item);\n        }\n      }\n    }\n    // filter nulls\n    return result.filter(function(r) {\n      return r;\n    });\n  }\n  /**\n * Check that the context, as well as each frame includes at least 1 element\n * @private\n * @param  {context} context\n * @return {Error}\n */\n  function validateContext(context) {\n    'use strict';\n    if (context.include.length === 0) {\n      if (context.frames.length === 0) {\n        var env = axe.utils.respondable.isInFrame() ? 'frame' : 'page';\n        return new Error('No elements found for include in ' + env + ' Context');\n      }\n      context.frames.forEach(function(frame, i) {\n        if (frame.include.length === 0) {\n          return new Error('No elements found for include in Context of frame ' + i);\n        }\n      });\n    }\n  }\n  /**\n * Holds context of includes, excludes and frames for analysis.\n *\n * @todo  clarify and sync changes to design doc\n * Context : {IncludeStrings} || {\n *   // defaults to document/all\n *   include: {IncludeStrings},\n *   exclude : {ExcludeStrings}\n * }\n *\n * IncludeStrings : [{CSSSelectorArray}] || Node\n * ExcludeStrings : [{CSSSelectorArray}]\n * `CSSSelectorArray` an Array of selector strings that addresses a Node in a multi-frame document. All addresses\n * are in this form regardless of whether the document contains any frames.To evaluate the selectors to\n * find the node referenced by the array, evaluate the selectors in-order, starting in window.top. If N\n * is the length of the array, then the first N-1 selectors should result in an iframe and the last\n * selector should result in the specific node.\n *\n * @param {Object} spec Configuration or \"specification\" object\n */\n  function Context(spec) {\n    'use strict';\n    var self = this;\n    this.frames = [];\n    this.initiator = spec && typeof spec.initiator === 'boolean' ? spec.initiator : true;\n    this.page = false;\n    spec = normalizeContext(spec);\n    this.exclude = spec.exclude;\n    this.include = spec.include;\n    this.include = parseSelectorArray(this, 'include');\n    this.exclude = parseSelectorArray(this, 'exclude');\n    axe.utils.select('frame, iframe', this).forEach(function(frame) {\n      if (isNodeInContext(frame, self)) {\n        pushUniqueFrame(self.frames, frame);\n      }\n    });\n    if (this.include.length === 1 && this.include[0] === document) {\n      this.page = true;\n    }\n    // Validate outside of a frame\n    var err = validateContext(this);\n    if (err instanceof Error) {\n      throw err;\n    }\n  }\n  'use strict';\n  /*exported RuleResult */\n  /**\n * Constructor for the result of Rules\n * @param {Rule} rule\n */\n  function RuleResult(rule) {\n    'use strict';\n    /**\n  * The ID of the Rule whom this result belongs to\n  * @type {String}\n  */\n    this.id = rule.id;\n    /**\n  * The calculated result of the Rule, either PASS, FAIL or NA\n  * @type {String}\n  */\n    this.result = axe.constants.NA;\n    /**\n  * Whether the Rule is a \"pageLevel\" rule\n  * @type {Boolean}\n  */\n    this.pageLevel = rule.pageLevel;\n    /**\n  * Impact of the violation\n  * @type {String}  Plain-english impact or null if rule passes\n  */\n    this.impact = null;\n    /**\n  * Holds information regarding nodes and individual CheckResults\n  * @type {Array}\n  */\n    this.nodes = [];\n  }\n  'use strict';\n  /*global RuleResult, createExecutionContext */\n  function Rule(spec, parentAudit) {\n    /*jshint maxcomplexity:11 */\n    'use strict';\n    this._audit = parentAudit;\n    /**\n  * The code, or string ID of the rule\n  * @type {String}\n  */\n    this.id = spec.id;\n    /**\n  * Selector that this rule applies to\n  * @type {String}\n  */\n    this.selector = spec.selector || '*';\n    /**\n  * Whether to exclude hiddden elements form analysis.  Defaults to true.\n  * @type {Boolean}\n  */\n    this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n    /**\n  * Flag to enable or disable rule\n  * @type {Boolean}\n  */\n    this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n    /**\n  * Denotes if the rule should be run if Context is not an entire page AND whether\n  * the Rule should be satisified regardless of Node\n  * @type {Boolean}\n  */\n    this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n    /**\n  * Checks that any may return true to satisfy rule\n  * @type {Array}\n  */\n    this.any = spec.any || [];\n    /**\n  * Checks that must all return true to satisfy rule\n  * @type {Array}\n  */\n    this.all = spec.all || [];\n    /**\n  * Checks that none may return true to satisfy rule\n  * @type {Array}\n  */\n    this.none = spec.none || [];\n    /**\n  * Tags associated to this rule\n  * @type {Array}\n  */\n    this.tags = spec.tags || [];\n    if (spec.matches) {\n      /**\n   * Optional function to test if rule should be run against a node, overrides Rule#matches\n   * @type {Function}\n   */\n      this.matches = createExecutionContext(spec.matches);\n    }\n  }\n  /**\n * Optionally test each node against a `matches` function to determine if the rule should run against\n * a given node.  Defaults to `true`.\n * @return {Boolean}    Whether the rule should run\n */\n  Rule.prototype.matches = function() {\n    'use strict';\n    return true;\n  };\n  /**\n * Selects `HTMLElement`s based on configured selector\n * @param  {Context} context The resolved Context object\n * @return {Array}           All matching `HTMLElement`s\n */\n  Rule.prototype.gather = function(context) {\n    'use strict';\n    var elements = axe.utils.select(this.selector, context);\n    if (this.excludeHidden) {\n      return elements.filter(function(element) {\n        return !axe.utils.isHidden(element);\n      });\n    }\n    return elements;\n  };\n  Rule.prototype.runChecks = function(type, node, options, resolve, reject) {\n    'use strict';\n    var self = this;\n    var checkQueue = axe.utils.queue();\n    this[type].forEach(function(c) {\n      var check = self._audit.checks[c.id || c];\n      var option = axe.utils.getCheckOption(check, self.id, options);\n      checkQueue.defer(function(res, rej) {\n        check.run(node, option, res, rej);\n      });\n    });\n    checkQueue.then(function(results) {\n      results = results.filter(function(check) {\n        return check;\n      });\n      resolve({\n        type: type,\n        results: results\n      });\n    }).catch(reject);\n  };\n  /**\n * Runs the Rule's `evaluate` function\n * @param  {Context}   context  The resolved Context object\n * @param  {Mixed}   options  Options specific to this rule\n * @param  {Function} callback Function to call when evaluate is complete; receives a RuleResult instance\n */\n  Rule.prototype.run = function(context, options, resolve, reject) {\n    'use strict';\n    var nodes = this.gather(context);\n    var q = axe.utils.queue();\n    var self = this;\n    var ruleResult;\n    ruleResult = new RuleResult(this);\n    nodes.forEach(function(node) {\n      if (self.matches(node)) {\n        q.defer(function(resolveNode, rejectNode) {\n          var checkQueue = axe.utils.queue();\n          checkQueue.defer(function(res, rej) {\n            self.runChecks('any', node, options, res, rej);\n          });\n          checkQueue.defer(function(res, rej) {\n            self.runChecks('all', node, options, res, rej);\n          });\n          checkQueue.defer(function(res, rej) {\n            self.runChecks('none', node, options, res, rej);\n          });\n          checkQueue.then(function(results) {\n            if (results.length) {\n              var hasResults = false, result = {};\n              results.forEach(function(r) {\n                var res = r.results.filter(function(result) {\n                  return result;\n                });\n                result[r.type] = res;\n                if (res.length) {\n                  hasResults = true;\n                }\n              });\n              if (hasResults) {\n                result.node = new axe.utils.DqElement(node);\n                ruleResult.nodes.push(result);\n              }\n            }\n            resolveNode();\n          }).catch(rejectNode);\n        });\n      }\n    });\n    q.then(function() {\n      resolve(ruleResult);\n    }).catch(reject);\n  };\n  /**\n * Iterates the rule's Checks looking for ones that have an after function\n * @private\n * @param  {Rule} rule The rule to check for after checks\n * @return {Array}      Checks that have an after function\n */\n  function findAfterChecks(rule) {\n    'use strict';\n    return axe.utils.getAllChecks(rule).map(function(c) {\n      var check = rule._audit.checks[c.id || c];\n      return check && typeof check.after === 'function' ? check : null;\n    }).filter(Boolean);\n  }\n  /**\n * Finds and collates all results for a given Check on a specific Rule\n * @private\n * @param  {Array} nodes RuleResult#nodes; array of 'detail' objects\n * @param  {String} checkID The ID of the Check to find\n * @return {Array}         Matching CheckResults\n */\n  function findCheckResults(nodes, checkID) {\n    'use strict';\n    var checkResults = [];\n    nodes.forEach(function(nodeResult) {\n      var checks = axe.utils.getAllChecks(nodeResult);\n      checks.forEach(function(checkResult) {\n        if (checkResult.id === checkID) {\n          checkResults.push(checkResult);\n        }\n      });\n    });\n    return checkResults;\n  }\n  function filterChecks(checks) {\n    'use strict';\n    return checks.filter(function(check) {\n      return check.filtered !== true;\n    });\n  }\n  function sanitizeNodes(result) {\n    'use strict';\n    var checkTypes = [ 'any', 'all', 'none' ];\n    var nodes = result.nodes.filter(function(detail) {\n      var length = 0;\n      checkTypes.forEach(function(type) {\n        detail[type] = filterChecks(detail[type]);\n        length += detail[type].length;\n      });\n      return length > 0;\n    });\n    if (result.pageLevel && nodes.length) {\n      nodes = [ nodes.reduce(function(a, b) {\n        if (a) {\n          checkTypes.forEach(function(type) {\n            a[type].push.apply(a[type], b[type]);\n          });\n          return a;\n        }\n      }) ];\n    }\n    return nodes;\n  }\n  /**\n * Runs all of the Rule's Check#after methods\n * @param  {RuleResult} result  The \"pre-after\" RuleResult\n * @param  {Mixed} options Options specific to the rule\n * @return {RuleResult}         The RuleResult as filtered by after functions\n */\n  Rule.prototype.after = function(result, options) {\n    'use strict';\n    var afterChecks = findAfterChecks(this);\n    var ruleID = this.id;\n    afterChecks.forEach(function(check) {\n      var beforeResults = findCheckResults(result.nodes, check.id);\n      var option = axe.utils.getCheckOption(check, ruleID, options);\n      var afterResults = check.after(beforeResults, option);\n      beforeResults.forEach(function(item) {\n        if (afterResults.indexOf(item) === -1) {\n          item.filtered = true;\n        }\n      });\n    });\n    result.nodes = sanitizeNodes(result);\n    return result;\n  };\n  /**\n * Reconfigure a rule after it has been added\n * @param {Object} spec - the attributes to be reconfigured\n */\n  Rule.prototype.configure = function(spec) {\n    /*jshint maxcomplexity:14 */\n    /*jshint maxstatements:20 */\n    /*jshint evil:true */\n    'use strict';\n    if (spec.hasOwnProperty('selector')) {\n      this.selector = spec.selector;\n    }\n    if (spec.hasOwnProperty('excludeHidden')) {\n      this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n    }\n    if (spec.hasOwnProperty('enabled')) {\n      this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n    }\n    if (spec.hasOwnProperty('pageLevel')) {\n      this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n    }\n    if (spec.hasOwnProperty('any')) {\n      this.any = spec.any;\n    }\n    if (spec.hasOwnProperty('all')) {\n      this.all = spec.all;\n    }\n    if (spec.hasOwnProperty('none')) {\n      this.none = spec.none;\n    }\n    if (spec.hasOwnProperty('tags')) {\n      this.tags = spec.tags;\n    }\n    if (spec.hasOwnProperty('matches')) {\n      if (typeof spec.matches === 'string') {\n        this.matches = new Function('return ' + spec.matches + ';')();\n      } else {\n        this.matches = spec.matches;\n      }\n    }\n  };\n  'use strict';\n  (function(axe) {\n    var definitions = [ {\n      name: 'NA',\n      value: 'inapplicable',\n      priority: 0,\n      group: 'inapplicable'\n    }, {\n      name: 'PASS',\n      value: 'passed',\n      priority: 1,\n      group: 'passes'\n    }, {\n      name: 'CANTTELL',\n      value: 'cantTell',\n      priority: 2,\n      group: 'incomplete'\n    }, {\n      name: 'FAIL',\n      value: 'failed',\n      priority: 3,\n      group: 'violations'\n    } ];\n    var constants = {\n      results: [],\n      resultGroups: [],\n      resultGroupMap: {},\n      impact: Object.freeze([ 'minor', 'moderate', 'serious', 'critical' ])\n    };\n    definitions.forEach(function(definition) {\n      var name = definition.name;\n      var value = definition.value;\n      var priority = definition.priority;\n      var group = definition.group;\n      constants[name] = value;\n      constants[name + '_PRIO'] = priority;\n      constants[name + '_GROUP'] = group;\n      constants.results[priority] = value;\n      constants.resultGroups[priority] = group;\n      constants.resultGroupMap[value] = group;\n    });\n    // Freeze everything\n    Object.freeze(constants.results);\n    Object.freeze(constants.resultGroups);\n    Object.freeze(constants.resultGroupMap);\n    Object.freeze(constants);\n    // Ensure that constants can not be changed\n    Object.defineProperty(axe, 'constants', {\n      value: constants,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n  })(axe);\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*jshint devel: true */\n  /**\n * Logs a message to the developer console (if it exists and is active).\n */\n  axe.log = function() {\n    'use strict';\n    if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && console.log) {\n      // IE does not support console.log.apply\n      Function.prototype.apply.call(console.log, console, arguments);\n    }\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /**\n * Starts analysis on the current document and its subframes\n * \n * @param  {Object}   context  The `Context` specification object @see Context\n * @param  {Array}    options  Optional RuleOptions\n * @param  {Function} callback The function to invoke when analysis is complete; receives an array of `RuleResult`s\n */\n  axe.a11yCheck = function(context, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n      options = {};\n    }\n    var audit = axe._audit;\n    if (!audit) {\n      throw new Error('No audit configured');\n    }\n    options.reporter = options.reporter || audit.reporter || 'v2';\n    var reporter = axe.getReporter(options.reporter);\n    axe._runRules(context, options, function(results) {\n      var res = reporter(results, options, callback);\n      if (res !== undefined) {\n        callback(res);\n      }\n    }, axe.log);\n  };\n  'use strict';\n  function cleanupPlugins(resolve, reject) {\n    'use strict';\n    if (!axe._audit) {\n      throw new Error('No audit configured');\n    }\n    var q = axe.utils.queue();\n    // If a plugin fails it's cleanup, we still want the others to run\n    var cleanupErrors = [];\n    Object.keys(axe.plugins).forEach(function(key) {\n      q.defer(function(res) {\n        var rej = function rej(err) {\n          cleanupErrors.push(err);\n          res();\n        };\n        try {\n          axe.plugins[key].cleanup(res, rej);\n        } catch (err) {\n          rej(err);\n        }\n      });\n    });\n    axe.utils.toArray(document.querySelectorAll('frame, iframe')).forEach(function(frame) {\n      q.defer(function(res, rej) {\n        return axe.utils.sendCommandToFrame(frame, {\n          command: 'cleanup-plugin'\n        }, res, rej);\n      });\n    });\n    q.then(function(results) {\n      if (cleanupErrors.length === 0) {\n        resolve(results);\n      } else {\n        reject(cleanupErrors);\n      }\n    }).catch(reject);\n  }\n  axe.cleanup = cleanupPlugins;\n  'use strict';\n  /* global reporters */\n  function configureChecksRulesAndBranding(spec) {\n    'use strict';\n    var audit;\n    audit = axe._audit;\n    if (!audit) {\n      throw new Error('No audit configured');\n    }\n    if (spec.reporter && (typeof spec.reporter === 'function' || reporters[spec.reporter])) {\n      audit.reporter = spec.reporter;\n    }\n    if (spec.checks) {\n      spec.checks.forEach(function(check) {\n        audit.addCheck(check);\n      });\n    }\n    if (spec.rules) {\n      spec.rules.forEach(function(rule) {\n        audit.addRule(rule);\n      });\n    }\n    if (typeof spec.branding !== 'undefined') {\n      audit.setBranding(spec.branding);\n    } else {\n      audit._constructHelpUrls();\n    }\n    if (spec.tagExclude) {\n      audit.tagExclude = spec.tagExclude;\n    }\n  }\n  axe.configure = configureChecksRulesAndBranding;\n  'use strict';\n  /**\n * Searches and returns rules that contain a tag in the list of tags.\n * @param  {Array}   tags  Optional array of tags\n * @return {Array}  Array of rules\n */\n  axe.getRules = function(tags) {\n    'use strict';\n    tags = tags || [];\n    var matchingRules = !tags.length ? axe._audit.rules : axe._audit.rules.filter(function(item) {\n      return !!tags.filter(function(tag) {\n        return item.tags.indexOf(tag) !== -1;\n      }).length;\n    });\n    var ruleData = axe._audit.data.rules || {};\n    return matchingRules.map(function(matchingRule) {\n      var rd = ruleData[matchingRule.id] || {};\n      return {\n        ruleId: matchingRule.id,\n        description: rd.description,\n        help: rd.help,\n        helpUrl: rd.helpUrl,\n        tags: matchingRule.tags\n      };\n    });\n  };\n  'use strict';\n  /*global Audit, runRules, cleanupPlugins */\n  function runCommand(data, keepalive, callback) {\n    'use strict';\n    var resolve = callback;\n    var reject = function reject(err) {\n      if (err instanceof Error === false) {\n        err = new Error(err);\n      }\n      callback(err);\n    };\n    var context = data && data.context || {};\n    if (context.include && !context.include.length) {\n      context.include = [ document ];\n    }\n    var options = data && data.options || {};\n    switch (data.command) {\n     case 'rules':\n      return runRules(context, options, resolve, reject);\n\n     case 'cleanup-plugin':\n      return cleanupPlugins(resolve, reject);\n\n     default:\n      // go through the registered commands\n      if (axe._audit && axe._audit.commands && axe._audit.commands[data.command]) {\n        return axe._audit.commands[data.command](data, callback);\n      }\n    }\n  }\n  /**\n * Sets up Rules, Messages and default options for Checks, must be invoked before attempting analysis\n * @param  {Object} audit The \"audit specification\" object\n * @private\n */\n  axe._load = function(audit) {\n    'use strict';\n    axe.utils.respondable.subscribe('axe.ping', function(data, keepalive, respond) {\n      respond({\n        axe: true\n      });\n    });\n    axe.utils.respondable.subscribe('axe.start', runCommand);\n    axe._audit = new Audit(audit);\n  };\n  'use strict';\n  var axe = axe || {};\n  axe.plugins = {};\n  function Plugin(spec) {\n    'use strict';\n    this._run = spec.run;\n    this._collect = spec.collect;\n    this._registry = {};\n    spec.commands.forEach(function(command) {\n      axe._audit.registerCommand(command);\n    });\n  }\n  Plugin.prototype.run = function() {\n    'use strict';\n    return this._run.apply(this, arguments);\n  };\n  Plugin.prototype.collect = function() {\n    'use strict';\n    return this._collect.apply(this, arguments);\n  };\n  Plugin.prototype.cleanup = function(done) {\n    'use strict';\n    var q = axe.utils.queue();\n    var that = this;\n    Object.keys(this._registry).forEach(function(key) {\n      q.defer(function(done) {\n        that._registry[key].cleanup(done);\n      });\n    });\n    q.then(function() {\n      done();\n    });\n  };\n  Plugin.prototype.add = function(impl) {\n    'use strict';\n    this._registry[impl.id] = impl;\n  };\n  axe.registerPlugin = function(plugin) {\n    'use strict';\n    axe.plugins[plugin.id] = new Plugin(plugin);\n  };\n  'use strict';\n  var reporters = {};\n  var defaultReporter;\n  axe.getReporter = function(reporter) {\n    'use strict';\n    if (typeof reporter === 'string' && reporters[reporter]) {\n      return reporters[reporter];\n    }\n    if (typeof reporter === 'function') {\n      return reporter;\n    }\n    return defaultReporter;\n  };\n  axe.addReporter = function registerReporter(name, cb, isDefault) {\n    'use strict';\n    reporters[name] = cb;\n    if (isDefault) {\n      defaultReporter = cb;\n    }\n  };\n  'use strict';\n  /*global axe */\n  function resetConfiguration() {\n    'use strict';\n    var audit = axe._audit;\n    if (!audit) {\n      throw new Error('No audit configured');\n    }\n    audit.resetRulesAndChecks();\n  }\n  axe.reset = resetConfiguration;\n  'use strict';\n  /*global Context */\n  /*exported runRules */\n  /**\n * Starts analysis on the current document and its subframes\n * @private\n * @param  {Object}   context  The `Context` specification object @see Context\n * @param  {Array}    options  Optional RuleOptions\n * @param  {Function} callback The function to invoke when analysis is complete; receives an array of `RuleResult`s\n */\n  function runRules(context, options, resolve, reject) {\n    'use strict';\n    context = new Context(context);\n    var q = axe.utils.queue();\n    var audit = axe._audit;\n    if (context.frames.length) {\n      q.defer(function(res, rej) {\n        axe.utils.collectResultsFromFrames(context, options, 'rules', null, res, rej);\n      });\n    }\n    q.defer(function(res, rej) {\n      audit.run(context, options, res, rej);\n    });\n    q.then(function(data) {\n      try {\n        // Add wrapper object so that we may use the same \"merge\" function for results from inside and outside frames\n        var results = axe.utils.mergeResults(data.map(function(d) {\n          return {\n            results: d\n          };\n        }));\n        // after should only run once, so ensure we are in the top level window\n        if (context.initiator) {\n          results = audit.after(results, options);\n          results.forEach(axe.utils.publishMetaData);\n          results = results.map(axe.utils.finalizeRuleResult);\n        }\n        try {\n          resolve(results);\n        } catch (e) {\n          axe.log(e);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    }).catch(reject);\n  }\n  axe._runRules = runRules;\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /* global Promise */\n  function isContext(potential) {\n    'use strict';\n    switch (true) {\n     case typeof potential === 'string':\n     case Array.isArray(potential):\n     case Node && potential instanceof Node:\n     case NodeList && potential instanceof NodeList:\n      return true;\n\n     case (typeof potential === 'undefined' ? 'undefined' : _typeof(potential)) !== 'object':\n      return false;\n\n     case potential.include !== undefined:\n     case potential.exclude !== undefined:\n     case typeof potential.length === 'number':\n      return true;\n\n     default:\n      return false;\n    }\n  }\n  var noop = function noop() {};\n  /**\n * Normalize the optional params of axe.run()\n * @param  {object}   context\n * @param  {object}   options\n * @param  {Function} callback\n * @return {object}            With 3 keys: context, options, callback\n */\n  function normalizeRunParams(context, options, callback) {\n    'use strict';\n    var typeErr = new TypeError('axe.run arguments are invalid');\n    // Determine the context\n    if (!isContext(context)) {\n      if (callback !== undefined) {\n        // Either context is invalid or there are too many params\n        throw typeErr;\n      }\n      // Set default and shift one over\n      callback = options;\n      options = context;\n      context = document;\n    }\n    // Determine the options\n    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {\n      if (callback !== undefined) {\n        // Either options is invalid or there are too many params\n        throw typeErr;\n      }\n      // Set default and shift one over\n      callback = options;\n      options = {};\n    }\n    // Set the callback or noop;\n    if (typeof callback !== 'function' && callback !== undefined) {\n      throw typeErr;\n    }\n    return {\n      context: context,\n      options: options,\n      callback: callback || noop\n    };\n  }\n  /**\n * Runs a number of rules against the provided HTML page and returns the\n * resulting issue list\n *\n * @param  {Object}   context  (optional) Defines the scope of the analysis\n * @param  {Object}   options  (optional) Set of options passed into rules or checks\n * @param  {Function} callback (optional) The callback when axe is done, given 2 params:\n *                             - Error    If any errors occured, otherwise null\n *                             - Results  The results object / array, or undefined on error\n * @return {Promise}           Resolves with the axe results. Only available when natively supported\n */\n  axe.run = function(context, options, callback) {\n    'use strict';\n    if (!axe._audit) {\n      throw new Error('No audit configured');\n    }\n    var args = normalizeRunParams(context, options, callback);\n    context = args.context;\n    options = args.options;\n    callback = args.callback;\n    // set defaults:\n    options.reporter = options.reporter || axe._audit.reporter || 'v1';\n    var p = void 0;\n    var reject = noop;\n    var resolve = noop;\n    if (window.Promise && callback === noop) {\n      p = new Promise(function(_resolve, _reject) {\n        reject = _reject;\n        resolve = _resolve;\n      });\n    }\n    axe._runRules(context, options, function(rawResults) {\n      var respond = function respond(results) {\n        try {\n          callback(null, results);\n        } catch (e) {\n          axe.log(e);\n        }\n        resolve(results);\n      };\n      try {\n        var reporter = axe.getReporter(options.reporter);\n        var results = reporter(rawResults, options, respond);\n        if (results !== undefined) {\n          respond(results);\n        }\n      } catch (err) {\n        callback(err);\n        reject(err);\n      }\n    }, function(err) {\n      callback(err);\n      reject(err);\n    });\n    return p;\n  };\n  'use strict';\n  /*global helpers */\n  /**\n * Finds failing Checks and combines each help message into an array\n * @param  {Object} nodeData Individual \"detail\" object to generate help messages for\n * @return {String}          failure messages\n */\n  helpers.failureSummary = function failureSummary(nodeData) {\n    'use strict';\n    var failingChecks = {};\n    // combine \"all\" and \"none\" as messaging is the same\n    failingChecks.none = nodeData.none.concat(nodeData.all);\n    failingChecks.any = nodeData.any;\n    return Object.keys(failingChecks).map(function(key) {\n      if (!failingChecks[key].length) {\n        return;\n      }\n      var sum = axe._audit.data.failureSummaries[key];\n      if (sum && typeof sum.failureMessage === 'function') {\n        return sum.failureMessage(failingChecks[key].map(function(check) {\n          return check.message || '';\n        }));\n      }\n    }).filter(function(i) {\n      return i !== undefined;\n    }).join('\\n\\n');\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*global helpers */\n  function normalizeRelatedNodes(node, xpath) {\n    'use strict';\n    [ 'any', 'all', 'none' ].forEach(function(type) {\n      if (!Array.isArray(node[type])) {\n        return;\n      }\n      node[type].filter(function(checkRes) {\n        return Array.isArray(checkRes.relatedNodes);\n      }).forEach(function(checkRes) {\n        checkRes.relatedNodes = checkRes.relatedNodes.map(function(relatedNode) {\n          var res = {\n            html: relatedNode.source,\n            target: relatedNode.selector\n          };\n          if (xpath) {\n            res.xpath = relatedNode.xpath;\n          }\n          return res;\n        });\n      });\n    });\n  }\n  var resultKeys = axe.constants.resultGroups;\n  helpers.processAggregate = function(results, options) {\n    var resultObject = axe.utils.aggregateResult(results);\n    resultObject.timestamp = new Date().toISOString();\n    resultObject.url = window.location.href;\n    resultKeys.forEach(function(key) {\n      resultObject[key] = (resultObject[key] || []).map(function(ruleResult) {\n        ruleResult = Object.assign({}, ruleResult);\n        if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {\n          ruleResult.nodes = ruleResult.nodes.map(function(subResult) {\n            if (_typeof(subResult.node) === 'object') {\n              subResult.html = subResult.node.source;\n              subResult.target = subResult.node.selector;\n              if (options.xpath) {\n                subResult.xpath = subResult.node.xpath;\n              }\n            }\n            delete subResult.result;\n            delete subResult.node;\n            normalizeRelatedNodes(subResult, options.xpath);\n            return subResult;\n          });\n        }\n        resultKeys.forEach(function(key) {\n          return delete ruleResult[key];\n        });\n        delete ruleResult.pageLevel;\n        delete ruleResult.result;\n        return ruleResult;\n      });\n    });\n    return resultObject;\n  };\n  'use strict';\n  /*global helpers */\n  axe.addReporter('na', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    callback({\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable,\n      timestamp: out.timestamp,\n      url: out.url\n    });\n  });\n  'use strict';\n  /*global helpers */\n  axe.addReporter('no-passes', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    callback({\n      violations: out.violations,\n      timestamp: out.timestamp,\n      url: out.url\n    });\n  });\n  'use strict';\n  axe.addReporter('raw', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    callback(results);\n  });\n  'use strict';\n  /*global helpers */\n  axe.addReporter('v1', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    out.violations.forEach(function(result) {\n      return result.nodes.forEach(function(nodeResult) {\n        nodeResult.failureSummary = helpers.failureSummary(nodeResult);\n      });\n    });\n    callback({\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable,\n      timestamp: out.timestamp,\n      url: out.url\n    });\n  });\n  'use strict';\n  /*global helpers */\n  axe.addReporter('v2', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    callback({\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable,\n      timestamp: out.timestamp,\n      url: out.url\n    });\n  }, true);\n  'use strict';\n  /**\n * From a list of values, find the one with the greatest weight according to\n * the supplied map\n * @param  {object} params Contains 3 properties:\n * - map: a map indicating the order of values to run in\n *        example: ['small', 'medium', 'large']\n * - values: Array of values to take the highest from\n * - initial: optional starting value\n */\n  axe.utils.aggregate = function(map, values, initial) {\n    values = values.slice();\n    if (initial) {\n      values.push(initial);\n    }\n    var sorting = values.map(function(val) {\n      return map.indexOf(val);\n    }).sort();\n    // Stupid NodeJS array.sort functor doesn't work!!\n    return map[sorting.pop()];\n  };\n  'use strict';\n  var checkMap = [];\n  checkMap[axe.constants.PASS_PRIO] = true;\n  checkMap[axe.constants.CANTTELL_PRIO] = null;\n  checkMap[axe.constants.FAIL_PRIO] = false;\n  /**\n * Map over the any / all / none properties\n */\n  var checkTypes = [ 'any', 'all', 'none' ];\n  function anyAllNone(obj, functor) {\n    return checkTypes.reduce(function(out, type) {\n      out[type] = (obj[type] || []).map(function(val) {\n        return functor(val, type);\n      });\n      return out;\n    }, {});\n  }\n  axe.utils.aggregateChecks = function(nodeResOriginal) {\n    // Create a copy\n    var nodeResult = Object.assign({}, nodeResOriginal);\n    // map each result value to a priority\n    anyAllNone(nodeResult, function(check, type) {\n      var i = checkMap.indexOf(check.result);\n      // default to cantTell\n      check.priority = i !== -1 ? i : axe.constants.CANTTELL_PRIO;\n      if (type === 'none') {\n        // For none, reverse the outcome\n        check.priority = 4 - check.priority;\n      }\n    });\n    // Find the result with the highest priority\n    var priorities = anyAllNone(nodeResult, function(c) {\n      return c.priority;\n    });\n    nodeResult.priority = Math.max(priorities.all.reduce(function(a, b) {\n      return Math.max(a, b);\n    }, 0), priorities.none.reduce(function(a, b) {\n      return Math.max(a, b);\n    }, 0), // get the lowest passing of 'any' defaulting\n    // to 0 by wrapping around 4 to 0 (inapplicable)\n    priorities.any.reduce(function(a, b) {\n      return Math.min(a, b);\n    }, 4) % 4);\n    // Of each type, filter out all results not matching the final priority\n    var impacts = [];\n    checkTypes.forEach(function(type) {\n      nodeResult[type] = nodeResult[type].filter(function(check) {\n        return check.priority === nodeResult.priority;\n      });\n      nodeResult[type].forEach(function(check) {\n        return impacts.push(check.impact);\n      });\n    });\n    // for failed nodes, define the impact\n    if (nodeResult.priority === axe.constants.FAIL_PRIO) {\n      nodeResult.impact = axe.utils.aggregate(axe.constants.impact, impacts);\n    } else {\n      nodeResult.impact = null;\n    }\n    // Delete the old result and priority properties\n    anyAllNone(nodeResult, function(c) {\n      delete c.result;\n      delete c.priority;\n    });\n    // Convert the index to a result string value\n    nodeResult.result = axe.constants.results[nodeResult.priority];\n    delete nodeResult.priority;\n    return nodeResult;\n  };\n  'use strict';\n  function copyToGroup(resultObject, subResult, group) {\n    var resultCopy = Object.assign({}, subResult);\n    resultCopy.nodes = (resultCopy[group] || []).concat();\n    axe.constants.resultGroups.forEach(function(group) {\n      delete resultCopy[group];\n    });\n    resultObject[group].push(resultCopy);\n  }\n  /**\n * Calculates the result of a Rule based on its types and the result of its child Checks\n * @param  {RuleResult} ruleResult The RuleResult to calculate the result of\n */\n  axe.utils.aggregateResult = function(results) {\n    var resultObject = {};\n    // Create an array for each type\n    axe.constants.resultGroups.forEach(function(groupName) {\n      return resultObject[groupName] = [];\n    });\n    // Fill the array with nodes\n    results.forEach(function(subResult) {\n      if (subResult.error) {\n        copyToGroup(resultObject, subResult, axe.constants.CANTTELL_GROUP);\n      } else {\n        if (subResult.result === axe.constants.NA) {\n          copyToGroup(resultObject, subResult, axe.constants.NA_GROUP);\n        } else {\n          axe.constants.resultGroups.forEach(function(group) {\n            if (Array.isArray(subResult[group]) && subResult[group].length > 0) {\n              copyToGroup(resultObject, subResult, group);\n            }\n          });\n        }\n      }\n    });\n    return resultObject;\n  };\n  'use strict';\n  (function() {\n    /**\n  * Calculates the result of a Rule based on its types and the result of its child Checks\n  * @param  {RuleResult} ruleResult The RuleResult to calculate the result of\n  */\n    axe.utils.aggregateRule = function(subResults) {\n      var ruleResult = {};\n      // For each node, retrieve the result and impact\n      subResults = subResults.map(function(subResult) {\n        // Known result\n        if (subResult.any && subResult.all && subResult.none) {\n          return axe.utils.aggregateChecks(subResult);\n        } else {\n          if (Array.isArray(subResult.node)) {\n            return axe.utils.finalizeRuleResult(subResult);\n          } else {\n            throw new TypeError('Invalid Result type');\n          }\n        }\n      });\n      // Aggregate the result\n      var resultList = subResults.map(function(node) {\n        return node.result;\n      });\n      ruleResult.result = axe.utils.aggregate(axe.constants.results, resultList, ruleResult.result);\n      // Create an array for each type\n      axe.constants.resultGroups.forEach(function(group) {\n        return ruleResult[group] = [];\n      });\n      // Fill the array with nodes\n      subResults.forEach(function(subResult) {\n        var groupName = axe.constants.resultGroupMap[subResult.result];\n        ruleResult[groupName].push(subResult);\n      });\n      // Take the highest impact of failed rules\n      var failGroup = axe.constants.FAIL_GROUP;\n      if (ruleResult[failGroup].length > 0) {\n        // Get the impact of all violations\n        var impactList = ruleResult[failGroup].map(function(failure) {\n          return failure.impact;\n        });\n        ruleResult.impact = axe.utils.aggregate(axe.constants.impact, impactList) || null;\n      } else {\n        ruleResult.impact = null;\n      }\n      return ruleResult;\n    };\n  })();\n  'use strict';\n  /* global axe*/\n  function areStylesSet(el, styles, stopAt) {\n    'use strict';\n    var styl = window.getComputedStyle(el, null);\n    var set = false;\n    if (!styl) {\n      return false;\n    }\n    styles.forEach(function(att) {\n      if (styl.getPropertyValue(att.property) === att.value) {\n        set = true;\n      }\n    });\n    if (set) {\n      return true;\n    }\n    if (el.nodeName.toUpperCase() === stopAt.toUpperCase() || !el.parentNode) {\n      return false;\n    }\n    return areStylesSet(el.parentNode, styles, stopAt);\n  }\n  axe.utils.areStylesSet = areStylesSet;\n  'use strict';\n  /**\n * Helper to denote which checks are asyncronous and provide callbacks and pass data back to the CheckResult\n * @param  {CheckResult}   checkResult The target object\n * @param  {Function} callback    The callback to expose when `this.async()` is called\n * @return {Object}               Bound to `this` for a check's fn\n */\n  axe.utils.checkHelper = function checkHelper(checkResult, resolve, reject) {\n    'use strict';\n    return {\n      isAsync: false,\n      async: function async() {\n        this.isAsync = true;\n        return function(result) {\n          if (result instanceof Error === false) {\n            checkResult.value = result;\n            resolve(checkResult);\n          } else {\n            reject(result);\n          }\n        };\n      },\n      data: function data(_data) {\n        checkResult.data = _data;\n      },\n      relatedNodes: function relatedNodes(nodes) {\n        nodes = nodes instanceof Node ? [ nodes ] : axe.utils.toArray(nodes);\n        checkResult.relatedNodes = nodes.map(function(element) {\n          return new axe.utils.DqElement(element);\n        });\n      }\n    };\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /**\n * Deeply clones an object or array\n * @param  {Mixed} obj The object/array to clone\n * @return {Mixed}     A clone of the initial object or array\n */\n  axe.utils.clone = function(obj) {\n    'use strict';\n    var index, length, out = obj;\n    if (obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {\n      if (Array.isArray(obj)) {\n        out = [];\n        for (index = 0, length = obj.length; index < length; index++) {\n          out[index] = axe.utils.clone(obj[index]);\n        }\n      } else {\n        out = {};\n        // jshint forin: false\n        for (index in obj) {\n          out[index] = axe.utils.clone(obj[index]);\n        }\n      }\n    }\n    return out;\n  };\n  'use strict';\n  function err(message, node) {\n    'use strict';\n    return new Error(message + ': ' + axe.utils.getSelector(node));\n  }\n  /**\n * Sends a command to an instance of axe in the specified frame\n * @param  {Element}  node       The frame element to send the message to\n * @param  {Object}   parameters Parameters to pass to the frame\n * @param  {Function} callback   Function to call when results from the frame has returned\n */\n  axe.utils.sendCommandToFrame = function(node, parameters, resolve, reject) {\n    'use strict';\n    var win = node.contentWindow;\n    if (!win) {\n      axe.log('Frame does not have a content window', node);\n      resolve(null);\n      return;\n    }\n    // give the frame .5s to respond to 'axe.ping', else log failed response\n    var timeout = setTimeout(function() {\n      // This double timeout is important for allowing iframes to respond\n      // DO NOT REMOVE\n      timeout = setTimeout(function() {\n        var errMsg = err('No response from frame', node);\n        if (!parameters.debug) {\n          axe.log(errMsg);\n          resolve(null);\n        } else {\n          reject(errMsg);\n        }\n      }, 0);\n    }, 500);\n    // send 'axe.ping' to the frame\n    axe.utils.respondable(win, 'axe.ping', null, undefined, function() {\n      clearTimeout(timeout);\n      // Give aXe 30s to respond to 'axe.start'\n      timeout = setTimeout(function() {\n        reject(err('Axe in frame timed out', node));\n      }, 3e4);\n      // send 'axe.start' and send the callback if it responded\n      axe.utils.respondable(win, 'axe.start', parameters, undefined, function(data) {\n        clearTimeout(timeout);\n        if (data instanceof Error === false) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  };\n  /**\n * Sends a message to axe running in frames to start analysis and collate results (via `mergeResults`)\n * @private\n * @param  {Context}  context   The resolved Context object\n * @param  {Object}   options   Options object (as passed to `runRules`)\n * @param  {string}   command   Command sent to all frames\n * @param  {Array}    parameter Array of values to be passed along side the command\n * @param  {Function} callback  Function to call when results from all frames have returned\n */\n  function collectResultsFromFrames(context, options, command, parameter, resolve, reject) {\n    'use strict';\n    var q = axe.utils.queue();\n    var frames = context.frames;\n    // Tell each axe running in each frame to collect results\n    frames.forEach(function(frame) {\n      var params = {\n        options: options,\n        command: command,\n        parameter: parameter,\n        context: {\n          initiator: false,\n          page: context.page,\n          include: frame.include || [],\n          exclude: frame.exclude || []\n        }\n      };\n      q.defer(function(res, rej) {\n        var node = frame.node;\n        axe.utils.sendCommandToFrame(node, params, function(data) {\n          if (data) {\n            return res({\n              results: data,\n              frameElement: node,\n              frame: axe.utils.getSelector(node)\n            });\n          }\n          res(null);\n        }, rej);\n      });\n    });\n    // Combine results from all frames and give it back\n    q.then(function(data) {\n      resolve(axe.utils.mergeResults(data));\n    }).catch(reject);\n  }\n  axe.utils.collectResultsFromFrames = collectResultsFromFrames;\n  'use strict';\n  /**\n * Wrapper for Node#contains; PhantomJS does not support Node#contains and erroneously reports that it does\n * @param  {HTMLElement} node      The candidate container node\n * @param  {HTMLElement} otherNode The node to test is contained by `node`\n * @return {Boolean}           Whether `node` contains `otherNode`\n */\n  axe.utils.contains = function(node, otherNode) {\n    //jshint bitwise: false\n    'use strict';\n    if (typeof node.contains === 'function') {\n      return node.contains(otherNode);\n    }\n    return !!(node.compareDocumentPosition(otherNode) & 16);\n  };\n  'use strict';\n  /*exported DqElement */\n  function truncate(str, maxLength) {\n    'use strict';\n    maxLength = maxLength || 300;\n    if (str.length > maxLength) {\n      var index = str.indexOf('>');\n      str = str.substring(0, index + 1);\n    }\n    return str;\n  }\n  function getSource(element) {\n    'use strict';\n    var source = element.outerHTML;\n    if (!source && typeof XMLSerializer === 'function') {\n      source = new XMLSerializer().serializeToString(element);\n    }\n    return truncate(source || '');\n  }\n  /**\n * \"Serialized\" `HTMLElement`. It will calculate the CSS selector,\n * grab the source (outerHTML) and offer an array for storing frame paths\n * @param {HTMLElement} element The element to serialize\n * @param {Object} spec Properties to use in place of the element when instantiated on Elements from other frames\n */\n  function DqElement(element, spec) {\n    'use strict';\n    spec = spec || {};\n    /**\n  * A unique CSS selector for the element\n  * @type {String}\n  */\n    this.selector = spec.selector || [ axe.utils.getSelector(element) ];\n    /**\n  * Xpath to the element\n  */\n    this.xpath = spec.xpath || [ axe.utils.getXpath(element) ];\n    /**\n  * The generated HTML source code of the element\n  * @type {String}\n  */\n    this.source = spec.source !== undefined ? spec.source : getSource(element);\n    /**\n  * The element which this object is based off or the containing frame, used for sorting.\n  * Excluded in toJSON method.\n  * @type {HTMLElement}\n  */\n    this.element = element;\n  }\n  DqElement.prototype.toJSON = function() {\n    'use strict';\n    return {\n      selector: this.selector,\n      source: this.source,\n      xpath: this.xpath\n    };\n  };\n  DqElement.fromFrame = function(node, frame) {\n    node.selector.unshift(frame.selector);\n    node.xpath.unshift(frame.xpath);\n    return new axe.utils.DqElement(frame.element, node);\n  };\n  axe.utils.DqElement = DqElement;\n  'use strict';\n  /**\n * Polyfill for Element#matches\n * @param {HTMLElement} node The element to test\n * @param {String} selector The selector to test element against\n * @return {Boolean}\n */\n  axe.utils.matchesSelector = function() {\n    'use strict';\n    var method;\n    function getMethod(win) {\n      var index, candidate, elProto = win.Element.prototype, candidates = [ 'matches', 'matchesSelector', 'mozMatchesSelector', 'webkitMatchesSelector', 'msMatchesSelector' ], length = candidates.length;\n      for (index = 0; index < length; index++) {\n        candidate = candidates[index];\n        if (elProto[candidate]) {\n          return candidate;\n        }\n      }\n    }\n    return function(node, selector) {\n      if (!method || !node[method]) {\n        method = getMethod(node.ownerDocument.defaultView);\n      }\n      return node[method](selector);\n    };\n  }();\n  'use strict';\n  /**\n * Escapes a property value of a CSS selector\n * @see https://github.com/mathiasbynens/CSS.escape/\n * @see http://dev.w3.org/csswg/cssom/#serialize-an-identifier\n * @param  {String} value The piece of the selector to escape\n * @return {String}        The escaped selector\n */\n  axe.utils.escapeSelector = function(value) {\n    'use strict';\n    /*jshint bitwise: true, eqeqeq: false, maxcomplexity: 14, maxstatements: 23, onevar: false, -W041: false */\n    var string = String(value);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index);\n      // Note: there’s no need to special-case astral symbols, surrogate\n      // pairs, or lone surrogates.\n      // If the character is NULL (U+0000), then throw an\n      // `InvalidCharacterError` exception and terminate these steps.\n      if (codeUnit == 0) {\n        throw new Error('INVALID_CHARACTER_ERR');\n      }\n      if (// If the character is in the range [\\1-\\1F] (U+0001 to U+001F) or\n      // [\\7F-\\9F] (U+007F to U+009F), […]\n      codeUnit >= 1 && codeUnit <= 31 || codeUnit >= 127 && codeUnit <= 159 || // If the character is the first character and is in the range [0-9]\n      // (U+0030 to U+0039), […]\n      index == 0 && codeUnit >= 48 && codeUnit <= 57 || // If the character is the second character and is in the range [0-9]\n      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]\n      index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {\n        // http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      }\n      // If the character is the second character and is `-` (U+002D) and the\n      // first character is `-` as well, […]\n      if (index == 1 && codeUnit == 45 && firstCodeUnit == 45) {\n        // http://dev.w3.org/csswg/cssom/#escape-a-character\n        result += '\\\\' + string.charAt(index);\n        continue;\n      }\n      // If the character is not handled by one of the above rules and is\n      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or\n      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to\n      // U+005A), or [a-z] (U+0061 to U+007A), […]\n      if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {\n        // the character itself\n        result += string.charAt(index);\n        continue;\n      }\n      // Otherwise, the escaped character.\n      // http://dev.w3.org/csswg/cssom/#escape-a-character\n      result += '\\\\' + string.charAt(index);\n    }\n    return result;\n  };\n  'use strict';\n  /**\n * Extends metadata onto result object and executes any functions\n * @param  {Object} to   The target of the extend\n * @param  {Object} from Metadata to extend\n */\n  axe.utils.extendMetaData = function(to, from) {\n    Object.assign(to, from);\n    Object.keys(from).filter(function(prop) {\n      return typeof from[prop] === 'function';\n    }).forEach(function(prop) {\n      to[prop] = null;\n      try {\n        to[prop] = from[prop](to);\n      } catch (e) {}\n    });\n  };\n  'use strict';\n  /**\n * Process rule results, grouping them by outcome\n * @param ruleResult {object}\n * @return {object}\n */\n  axe.utils.finalizeRuleResult = function(ruleResult) {\n    Object.assign(ruleResult, axe.utils.aggregateRule(ruleResult.nodes));\n    delete ruleResult.nodes;\n    return ruleResult;\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /**\n * Iterates an array of objects looking for a property with a specific value\n * @param  {Array} array  The array of objects to iterate\n * @param  {String} key   The property name to test against\n * @param  {Mixed} value  The value to find\n * @return {Object}       The first matching object or `undefined` if no match\n */\n  axe.utils.findBy = function(array, key, value) {\n    if (Array.isArray(array)) {\n      return array.find(function(obj) {\n        return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj[key] === value;\n      });\n    }\n  };\n  'use strict';\n  /**\n * Gets all Checks (or CheckResults) for a given Rule or RuleResult\n * @param {RuleResult|Rule} rule\n */\n  axe.utils.getAllChecks = function getAllChecks(object) {\n    'use strict';\n    var result = [];\n    return result.concat(object.any || []).concat(object.all || []).concat(object.none || []);\n  };\n  'use strict';\n  /**\n * Determines which CheckOption to use, either defined on the rule options, global check options or the check itself\n * @param  {Check} check    The Check object\n * @param  {String} ruleID  The ID of the rule\n * @param  {Object} options Options object as passed to main API\n * @return {Object}         The resolved object with `options` and `enabled` keys\n */\n  axe.utils.getCheckOption = function(check, ruleID, options) {\n    'use strict';\n    var ruleCheckOption = ((options.rules && options.rules[ruleID] || {}).checks || {})[check.id];\n    var checkOption = (options.checks || {})[check.id];\n    var enabled = check.enabled;\n    var opts = check.options;\n    if (checkOption) {\n      if (checkOption.hasOwnProperty('enabled')) {\n        enabled = checkOption.enabled;\n      }\n      if (checkOption.hasOwnProperty('options')) {\n        opts = checkOption.options;\n      }\n    }\n    if (ruleCheckOption) {\n      if (ruleCheckOption.hasOwnProperty('enabled')) {\n        enabled = ruleCheckOption.enabled;\n      }\n      if (ruleCheckOption.hasOwnProperty('options')) {\n        opts = ruleCheckOption.options;\n      }\n    }\n    return {\n      enabled: enabled,\n      options: opts\n    };\n  };\n  'use strict';\n  /**\n * Gets the index of element siblings that have the same nodeName\n * Intended for use with the CSS psuedo-class `:nth-of-type()` and xpath node index\n * @param  {HTMLElement} element The element to test\n * @return {Number}         The number of preceeding siblings with the same nodeName\n * @private\n */\n  function nthOfType(element) {\n    'use strict';\n    var index = 1, type = element.nodeName.toUpperCase();\n    /*jshint boss:true */\n    element = element.previousElementSibling;\n    while (element) {\n      if (element.nodeName.toUpperCase() === type) {\n        index++;\n      }\n      element = element.previousElementSibling;\n    }\n    return index;\n  }\n  /**\n * Checks if an element has siblings with the same selector\n * @param  {HTMLElement} node     The element to test\n * @param  {String} selector The CSS selector to test\n * @return {Boolean}          Whether any of element's siblings matches selector\n * @private\n */\n  function siblingsHaveSameSelector(node, selector) {\n    'use strict';\n    var index, sibling, siblings = node.parentNode.children;\n    if (!siblings) {\n      return false;\n    }\n    var length = siblings.length;\n    for (index = 0; index < length; index++) {\n      sibling = siblings[index];\n      if (sibling !== node && axe.utils.matchesSelector(sibling, selector)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n * Gets a unique CSS selector\n * @param  {HTMLElement} node The element to get the selector for\n * @return {String}      Unique CSS selector for the node\n */\n  axe.utils.getSelector = function getSelector(node) {\n    //jshint maxstatements: 21\n    'use strict';\n    function escape(p) {\n      return axe.utils.escapeSelector(p);\n    }\n    var parts = [], part;\n    while (node.parentNode) {\n      part = '';\n      if (node.id && document.querySelectorAll('#' + axe.utils.escapeSelector(node.id)).length === 1) {\n        parts.unshift('#' + axe.utils.escapeSelector(node.id));\n        break;\n      }\n      if (node.className && typeof node.className === 'string') {\n        part = '.' + node.className.trim().split(/\\s+/).map(escape).join('.');\n        if (part === '.' || siblingsHaveSameSelector(node, part)) {\n          part = '';\n        }\n      }\n      if (!part) {\n        part = axe.utils.escapeSelector(node.nodeName).toLowerCase();\n        if (part === 'html' || part === 'body') {\n          parts.unshift(part);\n          break;\n        }\n        if (siblingsHaveSameSelector(node, part)) {\n          part += ':nth-of-type(' + nthOfType(node) + ')';\n        }\n      }\n      parts.unshift(part);\n      node = node.parentNode;\n    }\n    return parts.join(' > ');\n  };\n  'use strict';\n  /*global axe */\n  //jshint maxstatements: false, maxcomplexity: false\n  function getXPathArray(node, path) {\n    var sibling, count;\n    // Gets an XPath for an element which describes its hierarchical location.\n    if (!node) {\n      return [];\n    }\n    if (!path && node.nodeType === 9) {\n      // special case for when we are called and give the document itself as the starting node\n      path = [ {\n        str: 'html'\n      } ];\n      return path;\n    }\n    path = path || [];\n    if (node.parentNode && node.parentNode !== node) {\n      path = getXPathArray(node.parentNode, path);\n    }\n    if (node.previousSibling) {\n      count = 1;\n      sibling = node.previousSibling;\n      do {\n        if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n          count++;\n        }\n        sibling = sibling.previousSibling;\n      } while (sibling);\n      if (count === 1) {\n        count = null;\n      }\n    } else {\n      if (node.nextSibling) {\n        sibling = node.nextSibling;\n        do {\n          if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n            count = 1;\n            sibling = null;\n          } else {\n            count = null;\n            sibling = sibling.previousSibling;\n          }\n        } while (sibling);\n      }\n    }\n    if (node.nodeType === 1) {\n      var element = {};\n      element.str = node.nodeName.toLowerCase();\n      // add the id and the count so we can construct robust versions of the xpath\n      if (node.getAttribute && node.getAttribute('id') && node.ownerDocument.querySelectorAll('#' + axe.utils.escapeSelector(node.id)).length === 1) {\n        element.id = node.getAttribute('id');\n      }\n      if (count > 1) {\n        element.count = count;\n      }\n      path.push(element);\n    }\n    return path;\n  }\n  // Robust is intended to allow xpaths to be robust to changes in the HTML structure of the page\n  // This means always use the id when present\n  // Non robust means always use the count (i.e. the exact position of the element)\n  // Ironically this is a bit of a misnomer because in very, very dynamic pages (e.g. where ids are generated on the fly)\n  // the non-ribust Xpaths will work whereas the robust ones will not work\n  function xpathToString(xpathArray) {\n    return xpathArray.reduce(function(str, elm) {\n      if (elm.id) {\n        return '/' + elm.str + '[@id=\\'' + elm.id + '\\']';\n      } else {\n        return str + ('/' + elm.str) + (elm.count > 0 ? '[' + elm.count + ']' : '');\n      }\n    }, '');\n  }\n  axe.utils.getXpath = function getXpath(node) {\n    var xpathArray = getXPathArray(node);\n    return xpathToString(xpathArray);\n  };\n  'use strict';\n  /*exported injectStyle */\n  /*global axe*/\n  var styleSheet;\n  function injectStyle(style) {\n    'use strict';\n    if (styleSheet && styleSheet.parentNode) {\n      // append the style to the existing sheet\n      if (styleSheet.styleSheet === undefined) {\n        // Not old IE\n        styleSheet.appendChild(document.createTextNode(style));\n      } else {\n        styleSheet.styleSheet.cssText += style;\n      }\n      return styleSheet;\n    }\n    if (!style) {\n      return;\n    }\n    var head = document.head || document.getElementsByTagName('head')[0];\n    styleSheet = document.createElement('style');\n    styleSheet.type = 'text/css';\n    if (styleSheet.styleSheet === undefined) {\n      // Not old IE\n      styleSheet.appendChild(document.createTextNode(style));\n    } else {\n      styleSheet.styleSheet.cssText = style;\n    }\n    head.appendChild(styleSheet);\n    return styleSheet;\n  }\n  axe.utils.injectStyle = injectStyle;\n  'use strict';\n  /**\n * Determine whether an element is visible\n *\n * @param {HTMLElement} el The HTMLElement\n * @return {Boolean} The element's visibilty status\n */\n  axe.utils.isHidden = function isHidden(el, recursed) {\n    'use strict';\n    // 9 === Node.DOCUMENT\n    if (el.nodeType === 9) {\n      return false;\n    }\n    var style = window.getComputedStyle(el, null);\n    if (!style || !el.parentNode || style.getPropertyValue('display') === 'none' || !recursed && // visibility is only accurate on the first element\n    style.getPropertyValue('visibility') === 'hidden' || el.getAttribute('aria-hidden') === 'true') {\n      return true;\n    }\n    return axe.utils.isHidden(el.parentNode, true);\n  };\n  'use strict';\n  /**\n* Adds the owning frame's CSS selector onto each instance of DqElement\n* @private\n* @param  {Array} resultSet `nodes` array on a `RuleResult`\n* @param  {HTMLElement} frameElement  The frame element\n* @param  {String} frameSelector     Unique CSS selector for the frame\n*/\n  function pushFrame(resultSet, frameElement, frameSelector) {\n    'use strict';\n    var frameXpath = axe.utils.getXpath(frameElement);\n    var frameSpec = {\n      element: frameElement,\n      selector: frameSelector,\n      xpath: frameXpath\n    };\n    resultSet.forEach(function(res) {\n      res.node = axe.utils.DqElement.fromFrame(res.node, frameSpec);\n      var checks = axe.utils.getAllChecks(res);\n      if (checks.length) {\n        checks.forEach(function(check) {\n          check.relatedNodes = check.relatedNodes.map(function(node) {\n            return axe.utils.DqElement.fromFrame(node, frameSpec);\n          });\n        });\n      }\n    });\n  }\n  /**\n* Adds `to` to `from` and then re-sorts by DOM order\n* @private\n* @param  {Array} target  `nodes` array on a `RuleResult`\n* @param  {Array} to   `nodes` array on a `RuleResult`\n* @return {Array}      The merged and sorted result\n*/\n  function spliceNodes(target, to) {\n    'use strict';\n    var firstFromFrame = to[0].node, sorterResult, t;\n    for (var i = 0, l = target.length; i < l; i++) {\n      t = target[i].node;\n      sorterResult = axe.utils.nodeSorter(t.element, firstFromFrame.element);\n      if (sorterResult > 0 || sorterResult === 0 && firstFromFrame.selector.length < t.selector.length) {\n        target.splice.apply(target, [ i, 0 ].concat(to));\n        return;\n      }\n    }\n    target.push.apply(target, to);\n  }\n  function normalizeResult(result) {\n    'use strict';\n    if (!result || !result.results) {\n      return null;\n    }\n    if (!Array.isArray(result.results)) {\n      return [ result.results ];\n    }\n    if (!result.results.length) {\n      return null;\n    }\n    return result.results;\n  }\n  /**\n* Merges one or more RuleResults (possibly from different frames) into one RuleResult\n* @private\n* @param  {Array} frameResults  Array of objects including the RuleResults as `results` and frame as `frame`\n* @return {Array}              The merged RuleResults; should only have one result per rule\n*/\n  axe.utils.mergeResults = function mergeResults(frameResults) {\n    'use strict';\n    var result = [];\n    frameResults.forEach(function(frameResult) {\n      var results = normalizeResult(frameResult);\n      if (!results || !results.length) {\n        return;\n      }\n      results.forEach(function(ruleResult) {\n        if (ruleResult.nodes && frameResult.frame) {\n          pushFrame(ruleResult.nodes, frameResult.frameElement, frameResult.frame);\n        }\n        var res = axe.utils.findBy(result, 'id', ruleResult.id);\n        if (!res) {\n          result.push(ruleResult);\n        } else {\n          if (ruleResult.nodes.length) {\n            spliceNodes(res.nodes, ruleResult.nodes);\n          }\n        }\n      });\n    });\n    return result;\n  };\n  'use strict';\n  /**\n * Array#sort callback to sort nodes by DOM order\n * @private\n * @param  {Node} a\n * @param  {Node} b\n * @return {Integer}   @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Sort\n */\n  axe.utils.nodeSorter = function nodeSorter(a, b) {\n    /*jshint bitwise: false */\n    'use strict';\n    if (a === b) {\n      return 0;\n    }\n    if (a.compareDocumentPosition(b) & 4) {\n      // a before b\n      return -1;\n    }\n    return 1;\n  };\n  'use strict';\n  // jshint ignore: start\n  /*\n These pollyfills came directly from the ES Specification it's self\n Contained within:\n  - Object.assign\n  - Array.prototype.find\n*/\n  if (typeof Object.assign !== 'function') {\n    (function() {\n      Object.assign = function(target) {\n        'use strict';\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n          var source = arguments[index];\n          if (source !== undefined && source !== null) {\n            for (var nextKey in source) {\n              if (source.hasOwnProperty(nextKey)) {\n                output[nextKey] = source[nextKey];\n              }\n            }\n          }\n        }\n        return output;\n      };\n    })();\n  }\n  if (!Array.prototype.find) {\n    Array.prototype.find = function(predicate) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.find called on null or undefined');\n      }\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n      var list = Object(this);\n      var length = list.length >>> 0;\n      var thisArg = arguments[1];\n      var value;\n      for (var i = 0; i < length; i++) {\n        value = list[i];\n        if (predicate.call(thisArg, value, i, list)) {\n          return value;\n        }\n      }\n      return undefined;\n    };\n  }\n  axe.utils.pollyfillElementsFromPoint = function() {\n    if (document.elementsFromPoint) {\n      return document.elementsFromPoint;\n    }\n    if (document.msElementsFromPoint) {\n      return document.msElementsFromPoint;\n    }\n    var usePointer = function() {\n      var element = document.createElement('x');\n      element.style.cssText = 'pointer-events:auto';\n      return element.style.pointerEvents === 'auto';\n    }();\n    var cssProp = usePointer ? 'pointer-events' : 'visibility';\n    var cssDisableVal = usePointer ? 'none' : 'hidden';\n    var style = document.createElement('style');\n    style.innerHTML = usePointer ? '* { pointer-events: all }' : '* { visibility: visible }';\n    return function(x, y) {\n      var current, i, d;\n      var elements = [];\n      var previousPointerEvents = [];\n      // startup\n      document.head.appendChild(style);\n      while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n          value: current.style.getPropertyValue(cssProp),\n          priority: current.style.getPropertyPriority(cssProp)\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty(cssProp, cssDisableVal, 'important');\n      }\n      // restore the previous pointer-events values\n      for (i = previousPointerEvents.length; !!(d = previousPointerEvents[--i]); ) {\n        elements[i].style.setProperty(cssProp, d.value ? d.value : '', d.priority);\n      }\n      // teardown;\n      document.head.removeChild(style);\n      return elements;\n    };\n  };\n  if (typeof window.addEventListener === 'function') {\n    document.elementsFromPoint = axe.utils.pollyfillElementsFromPoint();\n  }\n  if (!Array.prototype.includes) {\n    Array.prototype.includes = function(searchElement) {\n      'use strict';\n      var O = Object(this);\n      var len = parseInt(O.length, 10) || 0;\n      if (len === 0) {\n        return false;\n      }\n      var n = parseInt(arguments[1], 10) || 0;\n      var k;\n      if (n >= 0) {\n        k = n;\n      } else {\n        k = len + n;\n        if (k < 0) {\n          k = 0;\n        }\n      }\n      var currentElement;\n      while (k < len) {\n        currentElement = O[k];\n        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {\n          // NaN !== NaN\n          return true;\n        }\n        k++;\n      }\n      return false;\n    };\n  }\n  // Production steps of ECMA-262, Edition 5, 15.4.4.17\n  // Reference: http://es5.github.io/#x15.4.4.17\n  if (!Array.prototype.some) {\n    Array.prototype.some = function(fun) {\n      'use strict';\n      if (this == null) {\n        throw new TypeError('Array.prototype.some called on null or undefined');\n      }\n      if (typeof fun !== 'function') {\n        throw new TypeError();\n      }\n      var t = Object(this);\n      var len = t.length >>> 0;\n      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n      for (var i = 0; i < len; i++) {\n        if (i in t && fun.call(thisArg, t[i], i, t)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }\n  'use strict';\n  function extender(checksData, shouldBeTrue) {\n    'use strict';\n    return function(check) {\n      var sourceData = checksData[check.id] || {};\n      var messages = sourceData.messages || {};\n      var data = Object.assign({}, sourceData);\n      delete data.messages;\n      data.message = check.result === shouldBeTrue ? messages.pass : messages.fail;\n      axe.utils.extendMetaData(check, data);\n    };\n  }\n  /**\n * Publish metadata from axe._audit.data\n * @param  {RuleResult} result Result to publish to\n * @private\n */\n  axe.utils.publishMetaData = function(ruleResult) {\n    'use strict';\n    var checksData = axe._audit.data.checks || {};\n    var rulesData = axe._audit.data.rules || {};\n    var rule = axe.utils.findBy(axe._audit.rules, 'id', ruleResult.id) || {};\n    ruleResult.tags = axe.utils.clone(rule.tags || []);\n    var shouldBeTrue = extender(checksData, true);\n    var shouldBeFalse = extender(checksData, false);\n    ruleResult.nodes.forEach(function(detail) {\n      detail.any.forEach(shouldBeTrue);\n      detail.all.forEach(shouldBeTrue);\n      detail.none.forEach(shouldBeFalse);\n    });\n    axe.utils.extendMetaData(ruleResult, axe.utils.clone(rulesData[ruleResult.id] || {}));\n  };\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  (function() {\n    'use strict';\n    function noop() {}\n    function funcGuard(f) {\n      if (typeof f !== 'function') {\n        throw new TypeError('Queue methods require functions as arguments');\n      }\n    }\n    /**\n  * Create an asynchronous \"queue\", list of functions to be invoked in parallel, but not necessarily returned in order\n  * @return {Queue} The newly generated \"queue\"\n  */\n    function queue() {\n      var tasks = [];\n      var started = 0;\n      var remaining = 0;\n      // number of tasks not yet finished\n      var completeQueue = noop;\n      var complete = false;\n      var err;\n      // By default, wait until the next tick,\n      // if no catch was set, throw to console.\n      var defaultFail = function defaultFail(e) {\n        err = e;\n        setTimeout(function() {\n          if (err !== undefined && err !== null) {\n            axe.log('Uncaught error (of queue)', err);\n          }\n        }, 1);\n      };\n      var failed = defaultFail;\n      function createResolve(i) {\n        return function(r) {\n          tasks[i] = r;\n          remaining -= 1;\n          if (!remaining && completeQueue !== noop) {\n            complete = true;\n            completeQueue(tasks);\n          }\n        };\n      }\n      function abort(msg) {\n        // reset tasks\n        completeQueue = noop;\n        // notify catch\n        failed(msg);\n        // return unfinished work\n        return tasks;\n      }\n      function pop() {\n        var length = tasks.length;\n        for (;started < length; started++) {\n          var task = tasks[started];\n          try {\n            task.call(null, createResolve(started), abort);\n          } catch (e) {\n            abort(e);\n          }\n        }\n      }\n      var q = {\n        /**\n    * Defer a function that may or may not run asynchronously.\n    *\n    * First parameter should be the function to execute with subsequent\n    * parameters being passed as arguments to that function\n    */\n        defer: function defer(fn) {\n          if ((typeof fn === 'undefined' ? 'undefined' : _typeof(fn)) === 'object' && fn.then && fn.catch) {\n            var defer = fn;\n            fn = function fn(resolve, reject) {\n              defer.then(resolve).catch(reject);\n            };\n          }\n          funcGuard(fn);\n          if (err !== undefined) {\n            return;\n          } else {\n            if (complete) {\n              throw new Error('Queue already completed');\n            }\n          }\n          tasks.push(fn);\n          ++remaining;\n          pop();\n          return q;\n        },\n        /**\n    * The callback to execute once all \"deferred\" functions have completed.  Will only be invoked once.\n    * @param  {Function} f The callback, receives an array of the return/callbacked\n    * values of each of the \"deferred\" functions\n    */\n        then: function then(fn) {\n          funcGuard(fn);\n          if (completeQueue !== noop) {\n            throw new Error('queue `then` already set');\n          }\n          if (!err) {\n            completeQueue = fn;\n            if (!remaining) {\n              complete = true;\n              completeQueue(tasks);\n            }\n          }\n          return q;\n        },\n        'catch': function _catch(fn) {\n          funcGuard(fn);\n          if (failed !== defaultFail) {\n            throw new Error('queue `catch` already set');\n          }\n          if (!err) {\n            failed = fn;\n          } else {\n            fn(err);\n            err = null;\n          }\n          return q;\n        },\n        /**\n    * Abort the \"queue\" and prevent `then` function from firing\n    * @param  {Function} fn The callback to execute; receives an array of the results which have completed\n    */\n        abort: abort\n      };\n      return q;\n    }\n    axe.utils.queue = queue;\n  })();\n  'use strict';\n  var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function(obj) {\n    return typeof obj;\n  } : function(obj) {\n    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n  /*global uuid, utils, axe */\n  (function(exports) {\n    'use strict';\n    var messages = {}, subscribers = {};\n    /**\n  * get the unique string to be used to identify our instance of aXe\n  * @private\n  */\n    function _getSource() {\n      var application = 'axe', version = '', src;\n      if (typeof axe !== 'undefined' && axe._audit && !axe._audit.application) {\n        application = axe._audit.application;\n      }\n      if (typeof axe !== 'undefined') {\n        version = axe.version;\n      }\n      src = application + '.' + version;\n      return src;\n    }\n    /**\n  * Verify the received message is from the \"respondable\" module\n  * @private\n  * @param  {Object} postedMessage The message received via postMessage\n  * @return {Boolean}              `true` if the message is verified from respondable\n  */\n    function verify(postedMessage) {\n      if (// Check incoming message is valid\n      (typeof postedMessage === 'undefined' ? 'undefined' : _typeof(postedMessage)) === 'object' && typeof postedMessage.uuid === 'string' && postedMessage._respondable === true) {\n        var messageSource = _getSource();\n        // Check the version matches\n        // Allow free communication with axe test\n        return postedMessage._source === messageSource || postedMessage._source === 'axe.x.y.z' || messageSource === 'axe.x.y.z';\n      }\n      return false;\n    }\n    /**\n  * Posts the message to correct frame.\n  * This abstraction necessary because IE9 & 10 do not support posting Objects; only strings\n  * @private\n  * @param  {Window}   win      The `window` to post the message to\n  * @param  {String}   topic    The topic of the message\n  * @param  {Object}   message  The message content\n  * @param  {String}   uuid     The UUID, or pseudo-unique ID of the message\n  * @param  {Boolean}  keepalive Whether to allow multiple responses - default is false\n  * @param  {Function} callback The function to invoke when/if the message is responded to\n  */\n    function post(win, topic, message, uuid, keepalive, callback) {\n      var error;\n      if (message instanceof Error) {\n        error = {\n          name: message.name,\n          message: message.message,\n          stack: message.stack\n        };\n        message = undefined;\n      }\n      var data = {\n        uuid: uuid,\n        topic: topic,\n        message: message,\n        error: error,\n        _respondable: true,\n        _source: _getSource(),\n        _keepalive: keepalive\n      };\n      if (typeof callback === 'function') {\n        messages[uuid] = callback;\n      }\n      win.postMessage(JSON.stringify(data), '*');\n    }\n    /**\n  * Post a message to a window who may or may not respond to it.\n  * @param  {Window}   win      The window to post the message to\n  * @param  {String}   topic    The topic of the message\n  * @param  {Object}   message  The message content\n  * @param  {Boolean}  keepalive Whether to allow multiple responses - default is false\n  * @param  {Function} callback The function to invoke when/if the message is responded to\n  */\n    function respondable(win, topic, message, keepalive, callback) {\n      var id = uuid.v1();\n      post(win, topic, message, id, keepalive, callback);\n    }\n    /**\n  * Subscribe to messages sent via the `respondable` module.\n  *\n  * Axe._load uses this to listen for messages from other frames\n  *\n  * @param  {String}   topic    The topic to listen to\n  * @param  {Function} callback The function to invoke when a message is received\n  */\n    respondable.subscribe = function(topic, callback) {\n      subscribers[topic] = callback;\n    };\n    /**\n  * checks if the current context is inside a frame\n  * @return {Boolean}\n  */\n    respondable.isInFrame = function(win) {\n      win = win || window;\n      return !!win.frameElement;\n    };\n    /**\n  * Helper closure to create a function that may be used to respond to a message\n  * @private\n  * @param  {Window} source The window from which the message originated\n  * @param  {String} topic  The topic of the message\n  * @param  {String} uuid   The \"unique\" ID of the original message\n  * @return {Function}      A function that may be invoked to respond to the message\n  */\n    function createResponder(source, topic, uuid) {\n      return function(message, keepalive, callback) {\n        post(source, topic, message, uuid, keepalive, callback);\n      };\n    }\n    /**\n  * Publishes the \"respondable\" message to the appropriate subscriber\n  * @private\n  * @param  {Event} event The event object of the postMessage\n  * @param  {Object} data  The data sent with the message\n  * @param  {Boolean}  keepalive Whether to allow multiple responses - default is false\n  */\n    function publish(target, data, keepalive) {\n      var topic = data.topic;\n      var subscriber = subscribers[topic];\n      if (subscriber) {\n        var responder = createResponder(target, null, data.uuid);\n        subscriber(data.message, keepalive, responder);\n      }\n    }\n    /**\n  * Convert a javascript Error into something that can be stringified\n  * @param  {Error} error  Any type of error\n  * @return {Object}       Processable object\n  */\n    function buildErrorObject(error) {\n      var msg = error.message || 'Unknown error occurred';\n      var ErrConstructor = window[error.name] || Error;\n      if (error.stack) {\n        msg += '\\n' + error.stack.replace(error.message, '');\n      }\n      return new ErrConstructor(msg);\n    }\n    /**\n  * Parse the received message for processing\n  * @param  {string} dataString Message received\n  * @return {object}            Object to be used for pub/sub\n  */\n    function parseMessage(dataString) {\n      var data;\n      if (typeof dataString !== 'string') {\n        return;\n      }\n      try {\n        data = JSON.parse(dataString);\n      } catch (ex) {}\n      if (!verify(data)) {\n        return;\n      }\n      if (_typeof(data.error) === 'object') {\n        data.error = buildErrorObject(data.error);\n      } else {\n        data.error = undefined;\n      }\n      return data;\n    }\n    if (typeof window.addEventListener === 'function') {\n      window.addEventListener('message', function(e) {\n        // jshint maxstatements: 20\n        var data = parseMessage(e.data);\n        if (!data) {\n          return;\n        }\n        var uuid = data.uuid;\n        var keepalive = data._keepalive;\n        var callback = messages[uuid];\n        if (callback) {\n          var result = data.error || data.message;\n          var responder = createResponder(e.source, data.topic, uuid);\n          callback(result, keepalive, responder);\n          if (!keepalive) {\n            delete messages[uuid];\n          }\n        }\n        if (!data.error) {\n          try {\n            publish(e.source, data, keepalive);\n          } catch (err) {\n            post(e.source, data.topic, err, uuid, false);\n          }\n        }\n      }, false);\n    }\n    exports.respondable = respondable;\n  })(utils);\n  'use strict';\n  /**\n * Check if a rule matches the value of runOnly type=tag\n * @private\n * @param  {object} rule\n * @param  {object}\trunOnly Value of runOnly with type=tags\n * @return {bool}\n */\n  function matchTags(rule, runOnly) {\n    // jshint maxcomplexity: 11\n    'use strict';\n    var include, exclude, matching;\n    var defaultExclude = axe._audit && axe._audit.tagExclude ? axe._audit.tagExclude : [];\n    // normalize include/exclude\n    if (runOnly.include || runOnly.exclude) {\n      // Wrap include and exclude if it's not already an array\n      include = runOnly.include || [];\n      include = Array.isArray(include) ? include : [ include ];\n      exclude = runOnly.exclude || [];\n      exclude = Array.isArray(exclude) ? exclude : [ exclude ];\n      // add defaults, unless mentioned in include\n      exclude = exclude.concat(defaultExclude.filter(function(tag) {\n        return include.indexOf(tag) === -1;\n      }));\n    } else {\n      include = Array.isArray(runOnly) ? runOnly : [ runOnly ];\n      // exclude the defaults not included\n      exclude = defaultExclude.filter(function(tag) {\n        return include.indexOf(tag) === -1;\n      });\n    }\n    matching = include.some(function(tag) {\n      return rule.tags.indexOf(tag) !== -1;\n    });\n    if (matching || include.length === 0 && rule.enabled !== false) {\n      return exclude.every(function(tag) {\n        return rule.tags.indexOf(tag) === -1;\n      });\n    } else {\n      return false;\n    }\n  }\n  /**\n * Determines whether a rule should run\n * @param  {Rule}    rule     The rule to test\n * @param  {Context} context  The context of the Audit\n * @param  {Object}  options  Options object\n * @return {Boolean}\n */\n  axe.utils.ruleShouldRun = function(rule, context, options) {\n    'use strict';\n    var runOnly = options.runOnly || {};\n    var ruleOptions = (options.rules || {})[rule.id];\n    // Never run page level rules if the context is not on the page\n    if (rule.pageLevel && !context.page) {\n      return false;\n    } else {\n      if (runOnly.type === 'rule') {\n        return runOnly.values.indexOf(rule.id) !== -1;\n      } else {\n        if (ruleOptions && typeof ruleOptions.enabled === 'boolean') {\n          return ruleOptions.enabled;\n        } else {\n          if (runOnly.type === 'tag' && runOnly.values) {\n            return matchTags(rule, runOnly.values);\n          } else {\n            return matchTags(rule, []);\n          }\n        }\n      }\n    }\n  };\n  'use strict';\n  /**\n * Get the deepest node in a given collection\n * @private\n * @param  {Array} collection Array of nodes to test\n * @return {Node}             The deepest node\n */\n  function getDeepest(collection) {\n    'use strict';\n    return collection.sort(function(a, b) {\n      if (axe.utils.contains(a, b)) {\n        return 1;\n      }\n      return -1;\n    })[0];\n  }\n  /**\n * Determines if a node is included or excluded in a given context\n * @private\n * @param  {Node}  node     The node to test\n * @param  {Object}  context \"Resolved\" context object, @see resolveContext\n * @return {Boolean}         [description]\n */\n  function isNodeInContext(node, context) {\n    'use strict';\n    var include = context.include && getDeepest(context.include.filter(function(candidate) {\n      return axe.utils.contains(candidate, node);\n    }));\n    var exclude = context.exclude && getDeepest(context.exclude.filter(function(candidate) {\n      return axe.utils.contains(candidate, node);\n    }));\n    if (!exclude && include || exclude && axe.utils.contains(exclude, include)) {\n      return true;\n    }\n    return false;\n  }\n  /**\n * Pushes unique nodes that are in context to an array\n * @private\n * @param  {Array} result  The array to push to\n * @param  {Array} nodes   The list of nodes to push\n * @param  {Object} context The \"resolved\" context object, @see resolveContext\n */\n  function pushNode(result, nodes, context) {\n    'use strict';\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (result.indexOf(nodes[i]) === -1 && isNodeInContext(nodes[i], context)) {\n        result.push(nodes[i]);\n      }\n    }\n  }\n  /**\n * Selects elements which match `select` that are included and excluded via the `Context` object\n * @param  {String} selector  CSS selector of the HTMLElements to select\n * @param  {Context} context  The \"resolved\" context object, @see Context\n * @return {Array}            Matching nodes sorted by DOM order\n */\n  axe.utils.select = function select(selector, context) {\n    'use strict';\n    var result = [], candidate;\n    for (var i = 0, l = context.include.length; i < l; i++) {\n      candidate = context.include[i];\n      if (candidate.nodeType === candidate.ELEMENT_NODE && axe.utils.matchesSelector(candidate, selector)) {\n        pushNode(result, [ candidate ], context);\n      }\n      pushNode(result, candidate.querySelectorAll(selector), context);\n    }\n    return result.sort(axe.utils.nodeSorter);\n  };\n  'use strict';\n  /**\n * Converts array-like (numerical indicies and `length` property) structures to actual, real arrays\n * @param  {Mixed} thing Array-like thing to convert\n * @return {Array}\n */\n  axe.utils.toArray = function(thing) {\n    'use strict';\n    return Array.prototype.slice.call(thing);\n  };\n  'use strict';\n  /*jshint bitwise: false, eqeqeq: false, curly: false, strict: false, eqnull: true,\nmaxstatements: false, maxcomplexity: false */\n  //     uuid.js\n  //\n  //     Copyright (c) 2010-2012 Robert Kieffer\n  //     MIT License - http://opensource.org/licenses/mit-license.php\n  var uuid;\n  (function(_global) {\n    // Unique ID creation requires a high quality random # generator.  We feature\n    // detect to determine the best RNG source, normalizing to a function that\n    // returns 128-bits of randomness, since that's what's usually required\n    var _rng;\n    // Allow for MSIE11 msCrypto\n    var _crypto = _global.crypto || _global.msCrypto;\n    if (!_rng && _crypto && _crypto.getRandomValues) {\n      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n      //\n      // Moderately fast, high quality\n      var _rnds8 = new Uint8Array(16);\n      _rng = function whatwgRNG() {\n        _crypto.getRandomValues(_rnds8);\n        return _rnds8;\n      };\n    }\n    if (!_rng) {\n      // Math.random()-based (RNG)\n      //\n      // If all else fails, use Math.random().  It's fast, but is of unspecified\n      // quality.\n      var _rnds = new Array(16);\n      _rng = function _rng() {\n        for (var i = 0, r; i < 16; i++) {\n          if ((i & 3) === 0) {\n            r = Math.random() * 4294967296;\n          }\n          _rnds[i] = r >>> ((i & 3) << 3) & 255;\n        }\n        return _rnds;\n      };\n    }\n    // Buffer class to use\n    var BufferClass = typeof _global.Buffer == 'function' ? _global.Buffer : Array;\n    // Maps for number <-> hex string conversion\n    var _byteToHex = [];\n    var _hexToByte = {};\n    for (var i = 0; i < 256; i++) {\n      _byteToHex[i] = (i + 256).toString(16).substr(1);\n      _hexToByte[_byteToHex[i]] = i;\n    }\n    // **`parse()` - Parse a UUID into it's component bytes**\n    function parse(s, buf, offset) {\n      var i = buf && offset || 0, ii = 0;\n      buf = buf || [];\n      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n        if (ii < 16) {\n          // Don't overflow!\n          buf[i + ii++] = _hexToByte[oct];\n        }\n      });\n      // Zero out remaining bytes if string was short\n      while (ii < 16) {\n        buf[i + ii++] = 0;\n      }\n      return buf;\n    }\n    // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n    function unparse(buf, offset) {\n      var i = offset || 0, bth = _byteToHex;\n      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n    }\n    // **`v1()` - Generate time-based UUID**\n    //\n    // Inspired by https://github.com/LiosK/UUID.js\n    // and http://docs.python.org/library/uuid.html\n    // random #'s we need to init node and clockseq\n    var _seedBytes = _rng();\n    // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n    var _nodeId = [ _seedBytes[0] | 1, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5] ];\n    // Per 4.2.2, randomize (14 bit) clockseq\n    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;\n    // Previous uuid creation time\n    var _lastMSecs = 0, _lastNSecs = 0;\n    // See https://github.com/broofa/node-uuid for API details\n    function v1(options, buf, offset) {\n      var i = buf && offset || 0;\n      var b = buf || [];\n      options = options || {};\n      var clockseq = options.clockseq != null ? options.clockseq : _clockseq;\n      // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n      var msecs = options.msecs != null ? options.msecs : new Date().getTime();\n      // Per 4.2.1.2, use count of uuid's generated during the current clock\n      // cycle to simulate higher resolution clock\n      var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;\n      // Time since last uuid creation (in msecs)\n      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;\n      // Per 4.2.1.2, Bump clockseq on clock regression\n      if (dt < 0 && options.clockseq == null) {\n        clockseq = clockseq + 1 & 16383;\n      }\n      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n      // time interval\n      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n        nsecs = 0;\n      }\n      // Per 4.2.1.2 Throw error if too many uuids are requested\n      if (nsecs >= 1e4) {\n        throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n      }\n      _lastMSecs = msecs;\n      _lastNSecs = nsecs;\n      _clockseq = clockseq;\n      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n      msecs += 122192928e5;\n      // `time_low`\n      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;\n      b[i++] = tl >>> 24 & 255;\n      b[i++] = tl >>> 16 & 255;\n      b[i++] = tl >>> 8 & 255;\n      b[i++] = tl & 255;\n      // `time_mid`\n      var tmh = msecs / 4294967296 * 1e4 & 268435455;\n      b[i++] = tmh >>> 8 & 255;\n      b[i++] = tmh & 255;\n      // `time_high_and_version`\n      b[i++] = tmh >>> 24 & 15 | 16;\n      // include version\n      b[i++] = tmh >>> 16 & 255;\n      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n      b[i++] = clockseq >>> 8 | 128;\n      // `clock_seq_low`\n      b[i++] = clockseq & 255;\n      // `node`\n      var node = options.node || _nodeId;\n      for (var n = 0; n < 6; n++) {\n        b[i + n] = node[n];\n      }\n      return buf ? buf : unparse(b);\n    }\n    // **`v4()` - Generate random UUID**\n    // See https://github.com/broofa/node-uuid for API details\n    function v4(options, buf, offset) {\n      // Deprecated - 'format' argument, as supported in v1.2\n      var i = buf && offset || 0;\n      if (typeof options == 'string') {\n        buf = options == 'binary' ? new BufferClass(16) : null;\n        options = null;\n      }\n      options = options || {};\n      var rnds = options.random || (options.rng || _rng)();\n      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n      rnds[6] = rnds[6] & 15 | 64;\n      rnds[8] = rnds[8] & 63 | 128;\n      // Copy bytes to buffer, if provided\n      if (buf) {\n        for (var ii = 0; ii < 16; ii++) {\n          buf[i + ii] = rnds[ii];\n        }\n      }\n      return buf || unparse(rnds);\n    }\n    // Export public API\n    uuid = v4;\n    uuid.v1 = v1;\n    uuid.v4 = v4;\n    uuid.parse = parse;\n    uuid.unparse = unparse;\n    uuid.BufferClass = BufferClass;\n  })(window);\n  'use strict';\n  axe._load({\n    data: {\n      rules: {\n        accesskeys: {\n          description: 'Ensures every accesskey attribute value is unique',\n          help: 'accesskey attribute value must be unique'\n        },\n        'area-alt': {\n          description: 'Ensures <area> elements of image maps have alternate text',\n          help: 'Active <area> elements must have alternate text'\n        },\n        'aria-allowed-attr': {\n          description: 'Ensures ARIA attributes are allowed for an element\\'s role',\n          help: 'Elements must only use allowed ARIA attributes'\n        },\n        'aria-required-attr': {\n          description: 'Ensures elements with ARIA roles have all required ARIA attributes',\n          help: 'Required ARIA attributes must be provided'\n        },\n        'aria-required-children': {\n          description: 'Ensures elements with an ARIA role that require child roles contain them',\n          help: 'Certain ARIA roles must contain particular children'\n        },\n        'aria-required-parent': {\n          description: 'Ensures elements with an ARIA role that require parent roles are contained by them',\n          help: 'Certain ARIA roles must be contained by particular parents'\n        },\n        'aria-roles': {\n          description: 'Ensures all elements with a role attribute use a valid value',\n          help: 'ARIA roles used must conform to valid values'\n        },\n        'aria-valid-attr-value': {\n          description: 'Ensures all ARIA attributes have valid values',\n          help: 'ARIA attributes must conform to valid values'\n        },\n        'aria-valid-attr': {\n          description: 'Ensures attributes that begin with aria- are valid ARIA attributes',\n          help: 'ARIA attributes must conform to valid names'\n        },\n        'audio-caption': {\n          description: 'Ensures <audio> elements have captions',\n          help: '<audio> elements must have a captions track'\n        },\n        blink: {\n          description: 'Ensures <blink> elements are not used',\n          help: '<blink> elements are deprecated and must not be used'\n        },\n        'button-name': {\n          description: 'Ensures buttons have discernible text',\n          help: 'Buttons must have discernible text'\n        },\n        bypass: {\n          description: 'Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content',\n          help: 'Page must have means to bypass repeated blocks'\n        },\n        checkboxgroup: {\n          description: 'Ensures related <input type=\"checkbox\"> elements have a group and that that group designation is consistent',\n          help: 'Checkbox inputs with the same name attribute value must be part of a group'\n        },\n        'color-contrast': {\n          description: 'Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds',\n          help: 'Elements must have sufficient color contrast'\n        },\n        'definition-list': {\n          description: 'Ensures <dl> elements are structured correctly',\n          help: '<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script> or <template> elements'\n        },\n        dlitem: {\n          description: 'Ensures <dt> and <dd> elements are contained by a <dl>',\n          help: '<dt> and <dd> elements must be contained by a <dl>'\n        },\n        'document-title': {\n          description: 'Ensures each HTML document contains a non-empty <title> element',\n          help: 'Documents must have <title> element to aid in navigation'\n        },\n        'duplicate-id': {\n          description: 'Ensures every id attribute value is unique',\n          help: 'id attribute value must be unique'\n        },\n        'empty-heading': {\n          description: 'Ensures headings have discernible text',\n          help: 'Headings must not be empty'\n        },\n        'frame-title-unique': {\n          description: 'Ensures <iframe> and <frame> elements contain a unique title attribute',\n          help: 'Frames must have a unique title attribute'\n        },\n        'frame-title': {\n          description: 'Ensures <iframe> and <frame> elements contain a non-empty title attribute',\n          help: 'Frames must have title attribute'\n        },\n        'heading-order': {\n          description: 'Ensures the order of headings is semantically correct',\n          help: 'Heading levels should only increase by one'\n        },\n        'href-no-hash': {\n          description: 'Ensures that href values are valid link references to promote only using anchors as links',\n          help: 'Anchors must only be used as links and must therefore have an href value that is a valid reference. Otherwise you should probably usa a button'\n        },\n        'html-has-lang': {\n          description: 'Ensures every HTML document has a lang attribute',\n          help: '<html> element must have a lang attribute'\n        },\n        'html-lang-valid': {\n          description: 'Ensures the lang attribute of the <html> element has a valid value',\n          help: '<html> element must have a valid value for the lang attribute'\n        },\n        'image-alt': {\n          description: 'Ensures <img> elements have alternate text or a role of none or presentation',\n          help: 'Images must have alternate text'\n        },\n        'image-redundant-alt': {\n          description: 'Ensure button and link text is not repeated as image alternative',\n          help: 'Text of buttons and links should not be repeated in the image alternative'\n        },\n        'input-image-alt': {\n          description: 'Ensures <input type=\"image\"> elements have alternate text',\n          help: 'Image buttons must have alternate text'\n        },\n        'label-title-only': {\n          description: 'Ensures that every form element is not solely labeled using the title or aria-describedby attributes',\n          help: 'Form elements should have a visible label'\n        },\n        label: {\n          description: 'Ensures every form element has a label',\n          help: 'Form elements must have labels'\n        },\n        'layout-table': {\n          description: 'Ensures presentational <table> elements do not use <th>, <caption> elements or the summary attribute',\n          help: 'Layout tables must not use data table elements'\n        },\n        'link-in-text-block': {\n          description: 'Links can be distinguished without relying on color',\n          help: 'Links must be distinguished from surrounding text in a way that does not rely on color'\n        },\n        'link-name': {\n          description: 'Ensures links have discernible text',\n          help: 'Links must have discernible text'\n        },\n        list: {\n          description: 'Ensures that lists are structured correctly',\n          help: '<ul> and <ol> must only directly contain <li>, <script> or <template> elements'\n        },\n        listitem: {\n          description: 'Ensures <li> elements are used semantically',\n          help: '<li> elements must be contained in a <ul> or <ol>'\n        },\n        marquee: {\n          description: 'Ensures <marquee> elements are not used',\n          help: '<marquee> elements are deprecated and must not be used'\n        },\n        'meta-refresh': {\n          description: 'Ensures <meta http-equiv=\"refresh\"> is not used',\n          help: 'Timed refresh must not exist'\n        },\n        'meta-viewport-large': {\n          description: 'Ensures <meta name=\"viewport\"> can scale a significant amount',\n          help: 'Users should be able to zoom and scale the text up to 500%'\n        },\n        'meta-viewport': {\n          description: 'Ensures <meta name=\"viewport\"> does not disable text scaling and zooming',\n          help: 'Zooming and scaling must not be disabled'\n        },\n        'object-alt': {\n          description: 'Ensures <object> elements have alternate text',\n          help: '<object> elements must have alternate text'\n        },\n        radiogroup: {\n          description: 'Ensures related <input type=\"radio\"> elements have a group and that the group designation is consistent',\n          help: 'Radio inputs with the same name attribute value must be part of a group'\n        },\n        region: {\n          description: 'Ensures all content is contained within a landmark region',\n          help: 'Content should be contained in a landmark region'\n        },\n        'scope-attr-valid': {\n          description: 'Ensures the scope attribute is used correctly on tables',\n          help: 'scope attribute should be used correctly'\n        },\n        'server-side-image-map': {\n          description: 'Ensures that server-side image maps are not used',\n          help: 'Server-side image maps must not be used'\n        },\n        'skip-link': {\n          description: 'Ensures the first link on the page is a skip link',\n          help: 'The page should have a skip link as its first link'\n        },\n        tabindex: {\n          description: 'Ensures tabindex attribute values are not greater than 0',\n          help: 'Elements should not have tabindex greater than zero'\n        },\n        'table-duplicate-name': {\n          description: 'Ensure that tables do not have the same summary and caption',\n          help: 'The <caption> element should not contain the same text as the summary attribute'\n        },\n        'table-fake-caption': {\n          description: 'Ensure that tables with a caption use the <caption> element.',\n          help: 'Data or header cells should not be used to give caption to a data table.'\n        },\n        'td-has-header': {\n          description: 'Ensure that each non-empty data cell in a large table has one or more table headers',\n          help: 'All non-empty td element in table larger than 3 by 3 must have an associated table header'\n        },\n        'td-headers-attr': {\n          description: 'Ensure that each cell in a table using the headers refers to another cell in that table',\n          help: 'All cells in a table element that use the headers attribute must only refer to other cells of that same table'\n        },\n        'th-has-data-cells': {\n          description: 'Ensure that each table header in a data table refers to data cells',\n          help: 'All th element and elements with role=columnheader/rowheader must data cells which it describes'\n        },\n        'valid-lang': {\n          description: 'Ensures lang attributes have valid values',\n          help: 'lang attribute must have a valid value'\n        },\n        'video-caption': {\n          description: 'Ensures <video> elements have captions',\n          help: '<video> elements must have captions'\n        },\n        'video-description': {\n          description: 'Ensures <video> elements have audio descriptions',\n          help: '<video> elements must have an audio description track'\n        }\n      },\n      checks: {\n        accesskeys: {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Accesskey attribute value is unique';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Document has multiple elements with the same accesskey';\n              return out;\n            }\n          }\n        },\n        'non-empty-alt': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has a non-empty alt attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has no alt attribute or the alt attribute is empty';\n              return out;\n            }\n          }\n        },\n        'non-empty-title': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has a title attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has no title attribute or the title attribute is empty';\n              return out;\n            }\n          }\n        },\n        'aria-label': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'aria-label attribute exists and is not empty';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'aria-label attribute does not exist or is empty';\n              return out;\n            }\n          }\n        },\n        'aria-labelledby': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'aria-labelledby attribute exists and references elements that are visible to screen readers';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty or not visible';\n              return out;\n            }\n          }\n        },\n        'aria-allowed-attr': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'ARIA attributes are used correctly for the defined role';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'ARIA attribute' + (it.data && it.data.length > 1 ? 's are' : ' is') + ' not allowed:';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        'aria-required-attr': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'All required ARIA attributes are present';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Required ARIA attribute' + (it.data && it.data.length > 1 ? 's' : '') + ' not present:';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        'aria-required-children': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Required ARIA children are present';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Required ARIA ' + (it.data && it.data.length > 1 ? 'children' : 'child') + ' role not present:';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        'aria-required-parent': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Required ARIA parent role present';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Required ARIA parent' + (it.data && it.data.length > 1 ? 's' : '') + ' role not present:';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        invalidrole: {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'ARIA role is valid';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Role must be one of the valid ARIA roles';\n              return out;\n            }\n          }\n        },\n        abstractrole: {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Abstract roles are not used';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Abstract roles cannot be directly used';\n              return out;\n            }\n          }\n        },\n        'aria-valid-attr-value': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'ARIA attribute values are valid';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Invalid ARIA attribute value' + (it.data && it.data.length > 1 ? 's' : '') + ':';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        'aria-valid-attr': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'ARIA attribute name' + (it.data && it.data.length > 1 ? 's' : '') + ' are valid';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Invalid ARIA attribute name' + (it.data && it.data.length > 1 ? 's' : '') + ':';\n              var arr1 = it.data;\n              if (arr1) {\n                var value, i1 = -1, l1 = arr1.length - 1;\n                while (i1 < l1) {\n                  value = arr1[i1 += 1];\n                  out += ' ' + value;\n                }\n              }\n              return out;\n            }\n          }\n        },\n        caption: {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'The multimedia element has a captions track';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The multimedia element does not have a captions track';\n              return out;\n            }\n          }\n        },\n        'is-on-screen': {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element is not visible';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element is visible';\n              return out;\n            }\n          }\n        },\n        'non-empty-if-present': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element ';\n              if (it.data) {\n                out += 'has a non-empty value attribute';\n              } else {\n                out += 'does not have a value attribute';\n              }\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has a value attribute and the value attribute is empty';\n              return out;\n            }\n          }\n        },\n        'non-empty-value': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has a non-empty value attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has no value attribute or the value attribute is empty';\n              return out;\n            }\n          }\n        },\n        'button-has-visible-text': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has inner text that is visible to screen readers';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element does not have inner text that is visible to screen readers';\n              return out;\n            }\n          }\n        },\n        'role-presentation': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element\\'s default semantics were overriden with role=\"presentation\"';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element\\'s default semantics were not overridden with role=\"presentation\"';\n              return out;\n            }\n          }\n        },\n        'role-none': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element\\'s default semantics were overriden with role=\"none\"';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element\\'s default semantics were not overridden with role=\"none\"';\n              return out;\n            }\n          }\n        },\n        'focusable-no-name': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element is not in tab order or has accessible text';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element is in tab order and does not have accessible text';\n              return out;\n            }\n          }\n        },\n        'internal-link-present': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Valid skip link found';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'No valid skip link found';\n              return out;\n            }\n          }\n        },\n        'header-present': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Page has a header';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Page does not have a header';\n              return out;\n            }\n          }\n        },\n        landmark: {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Page has a landmark region';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Page does not have a landmark region';\n              return out;\n            }\n          }\n        },\n        'group-labelledby': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'All elements with the name \"' + it.data.name + '\" reference the same element with aria-labelledby';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'All elements with the name \"' + it.data.name + '\" do not reference the same element with aria-labelledby';\n              return out;\n            }\n          }\n        },\n        fieldset: {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element is contained in a fieldset';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = '';\n              var code = it.data && it.data.failureCode;\n              if (code === 'no-legend') {\n                out += 'Fieldset does not have a legend as its first child';\n              } else {\n                if (code === 'empty-legend') {\n                  out += 'Legend does not have text that is visible to screen readers';\n                } else {\n                  if (code === 'mixed-inputs') {\n                    out += 'Fieldset contains unrelated inputs';\n                  } else {\n                    if (code === 'no-group-label') {\n                      out += 'ARIA group does not have aria-label or aria-labelledby';\n                    } else {\n                      if (code === 'group-mixed-inputs') {\n                        out += 'ARIA group contains unrelated inputs';\n                      } else {\n                        out += 'Element does not have a containing fieldset or ARIA group';\n                      }\n                    }\n                  }\n                }\n              }\n              return out;\n            }\n          }\n        },\n        'color-contrast': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = '';\n              if (it.data && it.data.contrastRatio) {\n                out += 'Element has sufficient color contrast of ' + it.data.contrastRatio;\n              } else {\n                out += 'Unable to determine contrast ratio';\n              }\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has insufficient color contrast of ' + it.data.contrastRatio + ' (foreground color: ' + it.data.fgColor + ', background color: ' + it.data.bgColor + ', font size: ' + it.data.fontSize + ', font weight: ' + it.data.fontWeight + ')';\n              return out;\n            }\n          }\n        },\n        'structured-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'When not empty, element has both <dt> and <dd> elements';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'When not empty, element does not have at least one <dt> element followed by at least one <dd> element';\n              return out;\n            }\n          }\n        },\n        'only-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'List element only has direct children that are allowed inside <dt> or <dd> elements';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'List element has direct children that are not allowed inside <dt> or <dd> elements';\n              return out;\n            }\n          }\n        },\n        dlitem: {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Description list item has a <dl> parent element';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Description list item does not have a <dl> parent element';\n              return out;\n            }\n          }\n        },\n        'doc-has-title': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Document has a non-empty <title> element';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Document does not have a non-empty <title> element';\n              return out;\n            }\n          }\n        },\n        'duplicate-id': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Document has no elements that share the same id attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Document has multiple elements with the same id attribute: ' + it.data;\n              return out;\n            }\n          }\n        },\n        'has-visible-text': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has text that is visible to screen readers';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element does not have text that is visible to screen readers';\n              return out;\n            }\n          }\n        },\n        'unique-frame-title': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element\\'s title attribute is unique';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element\\'s title attribute is not unique';\n              return out;\n            }\n          }\n        },\n        'heading-order': {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Heading order valid';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Heading order invalid';\n              return out;\n            }\n          }\n        },\n        'href-no-hash': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Anchor does not have a href quals #';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Anchor has a href quals #';\n              return out;\n            }\n          }\n        },\n        'has-lang': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'The <html> element has a lang attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The <html> element does not have a lang attribute';\n              return out;\n            }\n          }\n        },\n        'valid-lang': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Value of lang attribute is included in the list of valid languages';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Value of lang attribute not included in the list of valid languages';\n              return out;\n            }\n          }\n        },\n        'has-alt': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element has an alt attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element does not have an alt attribute';\n              return out;\n            }\n          }\n        },\n        'duplicate-img-label': {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element does not duplicate existing text in <img> alt text';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element contains <img> element with alt text that duplicates existing text';\n              return out;\n            }\n          }\n        },\n        'title-only': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Form element does not solely use title attribute for its label';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Only title used to generate label for form element';\n              return out;\n            }\n          }\n        },\n        'implicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Form element has an implicit (wrapped) <label>';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Form element does not have an implicit (wrapped) <label>';\n              return out;\n            }\n          }\n        },\n        'explicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Form element has an explicit <label>';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Form element does not have an explicit <label>';\n              return out;\n            }\n          }\n        },\n        'help-same-as-label': {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Help text (title or aria-describedby) does not duplicate label text';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Help text (title or aria-describedby) text is the same as the label text';\n              return out;\n            }\n          }\n        },\n        'multiple-label': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Form element does not have multiple <label> elements';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Form element has multiple <label> elements';\n              return out;\n            }\n          }\n        },\n        'has-th': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Layout table does not use <th> elements';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Layout table uses <th> elements';\n              return out;\n            }\n          }\n        },\n        'has-caption': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Layout table does not use <caption> element';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Layout table uses <caption> element';\n              return out;\n            }\n          }\n        },\n        'has-summary': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Layout table does not use summary attribute';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Layout table uses summary attribute';\n              return out;\n            }\n          }\n        },\n        'link-in-text-block': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Links can be distinguished from surrounding text in a way that does not rely on color';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Links can not be distinguished from surrounding text in a way that does not rely on color';\n              return out;\n            }\n          }\n        },\n        'only-listitems': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'List element only has direct children that are allowed inside <li> elements';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'List element has direct children that are not allowed inside <li> elements';\n              return out;\n            }\n          }\n        },\n        listitem: {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'List item has a <ul>, <ol> or role=\"list\" parent element';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'List item does not have a <ul>, <ol> or role=\"list\" parent element';\n              return out;\n            }\n          }\n        },\n        'meta-refresh': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = '<meta> tag does not immediately refresh the page';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = '<meta> tag forces timed refresh of page';\n              return out;\n            }\n          }\n        },\n        'meta-viewport-large': {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = '<meta> tag does not prevent significant zooming';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = '<meta> tag limits zooming';\n              return out;\n            }\n          }\n        },\n        'meta-viewport': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = '<meta> tag does not disable zooming';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = '<meta> tag disables zooming';\n              return out;\n            }\n          }\n        },\n        region: {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Content contained by ARIA landmark';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Content not contained by an ARIA landmark';\n              return out;\n            }\n          }\n        },\n        'html5-scope': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Scope attribute is only used on table header elements (<th>)';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'In HTML 5, scope attributes may only be used on table header elements (<th>)';\n              return out;\n            }\n          }\n        },\n        'scope-value': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Scope attribute is used correctly';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The value of the scope attribute may only be \\'row\\' or \\'col\\'';\n              return out;\n            }\n          }\n        },\n        exists: {\n          impact: 'minor',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element does not exist';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element exists';\n              return out;\n            }\n          }\n        },\n        'skip-link': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Valid skip link found';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'No valid skip link found';\n              return out;\n            }\n          }\n        },\n        tabindex: {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Element does not have a tabindex greater than 0';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Element has a tabindex greater than 0';\n              return out;\n            }\n          }\n        },\n        'same-caption-summary': {\n          impact: 'moderate',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'Content of summary attribute and <caption> are not duplicated';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Content of summary attribute and <caption> element are identical';\n              return out;\n            }\n          }\n        },\n        'caption-faked': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'The first row of a table is not used as a caption';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The first row of the table should be a caption instead of a table cell';\n              return out;\n            }\n          }\n        },\n        'td-has-header': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'All non-empty data cells have table headers';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Some non-empty data cells do not have table headers';\n              return out;\n            }\n          }\n        },\n        'td-headers-attr': {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'The headers attribute is exclusively used to refer to other cells in the table';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The headers attribute is not exclusively used to refer to other cells in the table';\n              return out;\n            }\n          }\n        },\n        'th-has-data-cells': {\n          impact: 'critical',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'All table header cells refer to data cells';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'Not all table header cells refer to data cells';\n              return out;\n            }\n          }\n        },\n        description: {\n          impact: 'serious',\n          messages: {\n            pass: function anonymous(it) {\n              var out = 'The multimedia element has an audio description track';\n              return out;\n            },\n            fail: function anonymous(it) {\n              var out = 'The multimedia element does not have an audio description track';\n              return out;\n            }\n          }\n        }\n      },\n      failureSummaries: {\n        any: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix any of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        },\n        none: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix all of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        }\n      }\n    },\n    rules: [ {\n      id: 'accesskeys',\n      selector: '[accesskey]',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag211' ],\n      all: [],\n      any: [],\n      none: [ 'accesskeys' ]\n    }, {\n      id: 'area-alt',\n      selector: 'map area[href]',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-alt', 'non-empty-title', 'aria-label', 'aria-labelledby' ],\n      none: []\n    }, {\n      id: 'aria-allowed-attr',\n      matches: function matches(node) {\n        var role = node.getAttribute('role');\n        if (!role) {\n          role = axe.commons.aria.implicitRole(node);\n        }\n        var allowed = axe.commons.aria.allowedAttr(role);\n        if (role && allowed) {\n          var aria = /^aria-/;\n          if (node.hasAttributes()) {\n            var attrs = node.attributes;\n            for (var i = 0, l = attrs.length; i < l; i++) {\n              if (aria.test(attrs[i].name)) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'wcag2a', 'wcag411', 'wcag412' ],\n      all: [],\n      any: [ 'aria-allowed-attr' ],\n      none: []\n    }, {\n      id: 'aria-required-attr',\n      selector: '[role]',\n      tags: [ 'wcag2a', 'wcag411', 'wcag412' ],\n      all: [],\n      any: [ 'aria-required-attr' ],\n      none: []\n    }, {\n      id: 'aria-required-children',\n      selector: '[role]',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'aria-required-children' ],\n      none: []\n    }, {\n      id: 'aria-required-parent',\n      selector: '[role]',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'aria-required-parent' ],\n      none: []\n    }, {\n      id: 'aria-roles',\n      selector: '[role]',\n      tags: [ 'wcag2a', 'wcag131', 'wcag411', 'wcag412' ],\n      all: [],\n      any: [],\n      none: [ 'invalidrole', 'abstractrole' ]\n    }, {\n      id: 'aria-valid-attr-value',\n      matches: function matches(node) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = node.attributes;\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'wcag2a', 'wcag131', 'wcag411', 'wcag412' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'aria-valid-attr-value'\n      } ],\n      none: []\n    }, {\n      id: 'aria-valid-attr',\n      matches: function matches(node) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = node.attributes;\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'wcag2a', 'wcag411' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'aria-valid-attr'\n      } ],\n      none: []\n    }, {\n      id: 'audio-caption',\n      selector: 'audio',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag122', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    }, {\n      id: 'blink',\n      selector: 'blink',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag222', 'section508', 'section508.22.j' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'button-name',\n      selector: 'button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      tags: [ 'wcag2a', 'wcag412', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-if-present', 'non-empty-value', 'button-has-visible-text', 'aria-label', 'aria-labelledby', 'role-presentation', 'role-none' ],\n      none: [ 'focusable-no-name' ]\n    }, {\n      id: 'bypass',\n      selector: 'html',\n      pageLevel: true,\n      matches: function matches(node) {\n        return !!node.querySelector('a[href]');\n      },\n      tags: [ 'wcag2a', 'wcag241', 'section508', 'section508.22.o' ],\n      all: [],\n      any: [ 'internal-link-present', 'header-present', 'landmark' ],\n      none: []\n    }, {\n      id: 'checkboxgroup',\n      selector: 'input[type=checkbox][name]',\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'group-labelledby', 'fieldset' ],\n      none: []\n    }, {\n      id: 'color-contrast',\n      matches: function matches(node) {\n        /* global document */\n        var nodeName = node.nodeName.toUpperCase(), nodeType = node.type, doc = document;\n        if (node.getAttribute('aria-disabled') === 'true') {\n          return false;\n        }\n        if (nodeName === 'INPUT') {\n          return [ 'hidden', 'range', 'color', 'checkbox', 'radio', 'image' ].indexOf(nodeType) === -1 && !node.disabled;\n        }\n        if (nodeName === 'SELECT') {\n          return !!node.options.length && !node.disabled;\n        }\n        if (nodeName === 'TEXTAREA') {\n          return !node.disabled;\n        }\n        if (nodeName === 'OPTION') {\n          return false;\n        }\n        if (nodeName === 'BUTTON' && node.disabled) {\n          return false;\n        }\n        // check if the element is a label for a disabled control\n        if (nodeName === 'LABEL') {\n          // explicit label of disabled input\n          var candidate = node.htmlFor && doc.getElementById(node.htmlFor);\n          if (candidate && candidate.disabled) {\n            return false;\n          }\n          var candidate = node.querySelector('input:not([type=\"hidden\"]):not([type=\"image\"])' + ':not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');\n          if (candidate && candidate.disabled) {\n            return false;\n          }\n        }\n        // label of disabled control associated w/ aria-labelledby\n        if (node.id) {\n          var candidate = doc.querySelector('[aria-labelledby~=' + axe.commons.utils.escapeSelector(node.id) + ']');\n          if (candidate && candidate.disabled) {\n            return false;\n          }\n        }\n        if (axe.commons.text.visible(node, false, true) === '') {\n          return false;\n        }\n        var range = document.createRange(), childNodes = node.childNodes, length = childNodes.length, child, index;\n        for (index = 0; index < length; index++) {\n          child = childNodes[index];\n          if (child.nodeType === 3 && axe.commons.text.sanitize(child.nodeValue) !== '') {\n            range.selectNodeContents(child);\n          }\n        }\n        var rects = range.getClientRects();\n        length = rects.length;\n        for (index = 0; index < length; index++) {\n          //check to see if the rectangle impinges\n          if (axe.commons.dom.visuallyOverlaps(rects[index], node)) {\n            return true;\n          }\n        }\n        return false;\n      },\n      excludeHidden: false,\n      options: {\n        noScroll: false\n      },\n      tags: [ 'wcag2aa', 'wcag143' ],\n      all: [],\n      any: [ 'color-contrast' ],\n      none: []\n    }, {\n      id: 'definition-list',\n      selector: 'dl:not([role])',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [],\n      none: [ 'structured-dlitems', 'only-dlitems' ]\n    }, {\n      id: 'dlitem',\n      selector: 'dd:not([role]), dt:not([role])',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'dlitem' ],\n      none: []\n    }, {\n      id: 'document-title',\n      selector: 'html',\n      matches: function matches(node) {\n        /* global window */\n        return window.self === window.top;\n      },\n      tags: [ 'wcag2a', 'wcag242' ],\n      all: [],\n      any: [ 'doc-has-title' ],\n      none: []\n    }, {\n      id: 'duplicate-id',\n      selector: '[id]',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag411' ],\n      all: [],\n      any: [ 'duplicate-id' ],\n      none: []\n    }, {\n      id: 'empty-heading',\n      selector: 'h1, h2, h3, h4, h5, h6, [role=\"heading\"]',\n      enabled: true,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'has-visible-text', 'role-presentation', 'role-none' ],\n      none: []\n    }, {\n      id: 'frame-title-unique',\n      selector: 'frame[title]:not([title=\\'\\']), iframe[title]:not([title=\\'\\'])',\n      matches: function matches(node) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      },\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'unique-frame-title' ]\n    }, {\n      id: 'frame-title',\n      selector: 'frame, iframe',\n      tags: [ 'wcag2a', 'wcag241', 'section508', 'section508.22.i' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'non-empty-title', 'role-presentation', 'role-none' ],\n      none: []\n    }, {\n      id: 'heading-order',\n      selector: 'h1,h2,h3,h4,h5,h6,[role=heading]',\n      enabled: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'heading-order' ],\n      none: []\n    }, {\n      id: 'href-no-hash',\n      selector: 'a[href]',\n      enabled: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'href-no-hash' ],\n      none: []\n    }, {\n      id: 'html-has-lang',\n      selector: 'html',\n      tags: [ 'wcag2a', 'wcag311' ],\n      all: [],\n      any: [ 'has-lang' ],\n      none: []\n    }, {\n      id: 'html-lang-valid',\n      selector: 'html[lang]',\n      tags: [ 'wcag2a', 'wcag311' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: [ 'aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'in', 'io', 'is', 'it', 'iu', 'iw', 'ja', 'ji', 'jv', 'jw', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu' ],\n        id: 'valid-lang'\n      } ]\n    }, {\n      id: 'image-alt',\n      selector: 'img',\n      tags: [ 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-alt', 'aria-label', 'aria-labelledby', 'non-empty-title', 'role-presentation', 'role-none' ],\n      none: []\n    }, {\n      id: 'image-redundant-alt',\n      selector: 'button, [role=\"button\"], a[href], p, li, td, th',\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'duplicate-img-label' ]\n    }, {\n      id: 'input-image-alt',\n      selector: 'input[type=\"image\"]',\n      tags: [ 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-alt', 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'label-title-only',\n      selector: 'input:not([type=\\'hidden\\']):not([type=\\'image\\']):not([type=\\'button\\']):not([type=\\'submit\\']):not([type=\\'reset\\']), select, textarea',\n      enabled: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'title-only' ]\n    }, {\n      id: 'label',\n      selector: 'input:not([type=\\'hidden\\']):not([type=\\'image\\']):not([type=\\'button\\']):not([type=\\'submit\\']):not([type=\\'reset\\']), select, textarea',\n      tags: [ 'wcag2a', 'wcag332', 'wcag131', 'section508', 'section508.22.n' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'implicit-label', 'explicit-label', 'non-empty-title' ],\n      none: [ 'help-same-as-label', 'multiple-label' ]\n    }, {\n      id: 'layout-table',\n      selector: 'table',\n      matches: function matches(node) {\n        return !axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [],\n      none: [ 'has-th', 'has-caption', 'has-summary' ]\n    }, {\n      id: 'link-in-text-block',\n      selector: 'a[href]:not([role]), *[role=link]',\n      matches: function matches(node) {\n        var text = axe.commons.text.sanitize(node.textContent);\n        if (!text) {\n          return false;\n        }\n        if (!axe.commons.dom.isVisible(node, false)) {\n          return false;\n        }\n        return axe.commons.dom.isInTextBlock(node);\n      },\n      excludeHidden: false,\n      enabled: false,\n      tags: [ 'experimental', 'wcag2a', 'wcag141' ],\n      all: [ 'link-in-text-block' ],\n      any: [],\n      none: []\n    }, {\n      id: 'link-name',\n      selector: 'a[href]:not([role=\"button\"]), [role=link][href]',\n      tags: [ 'wcag2a', 'wcag111', 'wcag412', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', 'role-presentation', 'role-none' ],\n      none: [ 'focusable-no-name' ]\n    }, {\n      id: 'list',\n      selector: 'ul:not([role]), ol:not([role])',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [],\n      none: [ 'only-listitems' ]\n    }, {\n      id: 'listitem',\n      selector: 'li:not([role])',\n      tags: [ 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'listitem' ],\n      none: []\n    }, {\n      id: 'marquee',\n      selector: 'marquee',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag222' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'meta-refresh',\n      selector: 'meta[http-equiv=\"refresh\"]',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag2aaa', 'wcag221', 'wcag224', 'wcag325' ],\n      all: [],\n      any: [ 'meta-refresh' ],\n      none: []\n    }, {\n      id: 'meta-viewport-large',\n      selector: 'meta[name=\"viewport\"]',\n      excludeHidden: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 5,\n          lowerBound: 2\n        },\n        id: 'meta-viewport-large'\n      } ],\n      none: []\n    }, {\n      id: 'meta-viewport',\n      selector: 'meta[name=\"viewport\"]',\n      excludeHidden: false,\n      tags: [ 'wcag2aa', 'wcag144' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 2\n        },\n        id: 'meta-viewport'\n      } ],\n      none: []\n    }, {\n      id: 'object-alt',\n      selector: 'object',\n      tags: [ 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'radiogroup',\n      selector: 'input[type=radio][name]',\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'group-labelledby', 'fieldset' ],\n      none: []\n    }, {\n      id: 'region',\n      selector: 'html',\n      pageLevel: true,\n      enabled: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'region' ],\n      none: []\n    }, {\n      id: 'scope-attr-valid',\n      selector: 'td[scope], th[scope]',\n      enabled: true,\n      tags: [ 'best-practice' ],\n      all: [ 'html5-scope', 'scope-value' ],\n      any: [],\n      none: []\n    }, {\n      id: 'server-side-image-map',\n      selector: 'img[ismap]',\n      tags: [ 'wcag2a', 'wcag211', 'section508', 'section508.22.f' ],\n      all: [],\n      any: [],\n      none: [ 'exists' ]\n    }, {\n      id: 'skip-link',\n      selector: 'a[href]',\n      pageLevel: true,\n      enabled: false,\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'skip-link' ],\n      none: []\n    }, {\n      id: 'tabindex',\n      selector: '[tabindex]',\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [ 'tabindex' ],\n      none: []\n    }, {\n      id: 'table-duplicate-name',\n      selector: 'table',\n      tags: [ 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'same-caption-summary' ]\n    }, {\n      id: 'table-fake-caption',\n      selector: 'table',\n      matches: function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'caption-faked' ],\n      any: [],\n      none: []\n    }, {\n      id: 'td-has-header',\n      selector: 'table',\n      matches: function matches(node) {\n        if (axe.commons.table.isDataTable(node)) {\n          var tableArray = axe.commons.table.toArray(node);\n          return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n        }\n        return false;\n      },\n      tags: [ 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'td-has-header' ],\n      any: [],\n      none: []\n    }, {\n      id: 'td-headers-attr',\n      selector: 'table',\n      tags: [ 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'td-headers-attr' ],\n      any: [],\n      none: []\n    }, {\n      id: 'th-has-data-cells',\n      selector: 'table',\n      matches: function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'th-has-data-cells' ],\n      any: [],\n      none: []\n    }, {\n      id: 'valid-lang',\n      selector: '[lang]:not(html), [xml\\\\:lang]:not(html)',\n      tags: [ 'wcag2aa', 'wcag312' ],\n      all: [],\n      any: [],\n      none: [ {\n        options: [ 'aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'in', 'io', 'is', 'it', 'iu', 'iw', 'ja', 'ji', 'jv', 'jw', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu' ],\n        id: 'valid-lang'\n      } ]\n    }, {\n      id: 'video-caption',\n      selector: 'video',\n      excludeHidden: false,\n      tags: [ 'wcag2a', 'wcag122', 'wcag123', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    }, {\n      id: 'video-description',\n      selector: 'video',\n      excludeHidden: false,\n      tags: [ 'wcag2aa', 'wcag125', 'section508', 'section508.22.b' ],\n      all: [],\n      any: [],\n      none: [ 'description' ]\n    } ],\n    checks: [ {\n      id: 'abstractrole',\n      evaluate: function evaluate(node, options) {\n        return axe.commons.aria.getRoleType(node.getAttribute('role')) === 'abstract';\n      }\n    }, {\n      id: 'aria-allowed-attr',\n      evaluate: function evaluate(node, options) {\n        var invalid = [];\n        var attr, attrName, allowed, role = node.getAttribute('role'), attrs = node.attributes;\n        if (!role) {\n          role = axe.commons.aria.implicitRole(node);\n        }\n        allowed = axe.commons.aria.allowedAttr(role);\n        if (role && allowed) {\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            attr = attrs[i];\n            attrName = attr.name;\n            if (axe.commons.aria.validateAttr(attrName) && allowed.indexOf(attrName) === -1) {\n              invalid.push(attrName + '=\"' + attr.nodeValue + '\"');\n            }\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'invalidrole',\n      evaluate: function evaluate(node, options) {\n        return !axe.commons.aria.isValidRole(node.getAttribute('role'));\n      }\n    }, {\n      id: 'aria-required-attr',\n      evaluate: function evaluate(node, options) {\n        var missing = [];\n        if (node.hasAttributes()) {\n          var attr, role = node.getAttribute('role'), required = axe.commons.aria.requiredAttr(role);\n          if (role && required) {\n            for (var i = 0, l = required.length; i < l; i++) {\n              attr = required[i];\n              if (!node.getAttribute(attr)) {\n                missing.push(attr);\n              }\n            }\n          }\n        }\n        if (missing.length) {\n          this.data(missing);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'aria-required-children',\n      evaluate: function evaluate(node, options) {\n        var requiredOwned = axe.commons.aria.requiredOwned, implicitNodes = axe.commons.aria.implicitNodes, matchesSelector = axe.commons.utils.matchesSelector, idrefs = axe.commons.dom.idrefs;\n        function owns(node, role, ariaOwned) {\n          if (node === null) {\n            return false;\n          }\n          var implicit = implicitNodes(role), selector = [ '[role=\"' + role + '\"]' ];\n          if (implicit) {\n            selector = selector.concat(implicit);\n          }\n          selector = selector.join(',');\n          return ariaOwned ? matchesSelector(node, selector) || !!node.querySelector(selector) : !!node.querySelector(selector);\n        }\n        function ariaOwns(nodes, role) {\n          var index, length;\n          for (index = 0, length = nodes.length; index < length; index++) {\n            if (nodes[index] === null) {\n              continue;\n            }\n            if (owns(nodes[index], role, true)) {\n              return true;\n            }\n          }\n          return false;\n        }\n        function missingRequiredChildren(node, childRoles, all) {\n          var i, l = childRoles.length, missing = [], ownedElements = idrefs(node, 'aria-owns');\n          for (i = 0; i < l; i++) {\n            var r = childRoles[i];\n            if (owns(node, r) || ariaOwns(ownedElements, r)) {\n              if (!all) {\n                return null;\n              }\n            } else {\n              if (all) {\n                missing.push(r);\n              }\n            }\n          }\n          if (missing.length) {\n            return missing;\n          }\n          if (!all && childRoles.length) {\n            return childRoles;\n          }\n          return null;\n        }\n        var role = node.getAttribute('role');\n        var required = requiredOwned(role);\n        if (!required) {\n          return true;\n        }\n        var all = false;\n        var childRoles = required.one;\n        if (!childRoles) {\n          var all = true;\n          childRoles = required.all;\n        }\n        var missing = missingRequiredChildren(node, childRoles, all);\n        if (!missing) {\n          return true;\n        }\n        this.data(missing);\n        return false;\n      }\n    }, {\n      id: 'aria-required-parent',\n      evaluate: function evaluate(node, options) {\n        function getSelector(role) {\n          var impliedNative = axe.commons.aria.implicitNodes(role) || [];\n          return impliedNative.concat('[role=\"' + role + '\"]').join(',');\n        }\n        function getMissingContext(element, requiredContext, includeElement) {\n          var index, length, role = element.getAttribute('role'), missing = [];\n          if (!requiredContext) {\n            requiredContext = axe.commons.aria.requiredContext(role);\n          }\n          if (!requiredContext) {\n            return null;\n          }\n          for (index = 0, length = requiredContext.length; index < length; index++) {\n            if (includeElement && axe.utils.matchesSelector(element, getSelector(requiredContext[index]))) {\n              return null;\n            }\n            if (axe.commons.dom.findUp(element, getSelector(requiredContext[index]))) {\n              //if one matches, it passes\n              return null;\n            } else {\n              missing.push(requiredContext[index]);\n            }\n          }\n          return missing;\n        }\n        function getAriaOwners(element) {\n          var owners = [], o = null;\n          while (element) {\n            if (element.id) {\n              o = document.querySelector('[aria-owns~=' + axe.commons.utils.escapeSelector(element.id) + ']');\n              if (o) {\n                owners.push(o);\n              }\n            }\n            element = element.parentNode;\n          }\n          return owners.length ? owners : null;\n        }\n        var missingParents = getMissingContext(node);\n        if (!missingParents) {\n          return true;\n        }\n        var owners = getAriaOwners(node);\n        if (owners) {\n          for (var i = 0, l = owners.length; i < l; i++) {\n            missingParents = getMissingContext(owners[i], missingParents, true);\n            if (!missingParents) {\n              return true;\n            }\n          }\n        }\n        this.data(missingParents);\n        return false;\n      }\n    }, {\n      id: 'aria-valid-attr-value',\n      evaluate: function evaluate(node, options) {\n        options = Array.isArray(options) ? options : [];\n        var invalid = [], aria = /^aria-/;\n        var attr, attrName, attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          attr = attrs[i];\n          attrName = attr.name;\n          if (options.indexOf(attrName) === -1 && aria.test(attrName) && !axe.commons.aria.validateAttrValue(node, attrName)) {\n            invalid.push(attrName + '=\"' + attr.nodeValue + '\"');\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      },\n      options: []\n    }, {\n      id: 'aria-valid-attr',\n      evaluate: function evaluate(node, options) {\n        options = Array.isArray(options) ? options : [];\n        var invalid = [], aria = /^aria-/;\n        var attr, attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          attr = attrs[i].name;\n          if (options.indexOf(attr) === -1 && aria.test(attr) && !axe.commons.aria.validateAttr(attr)) {\n            invalid.push(attr);\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      },\n      options: []\n    }, {\n      id: 'color-contrast',\n      evaluate: function evaluate(node, options) {\n        if (!axe.commons.dom.isVisible(node, false)) {\n          return true;\n        }\n        var noScroll = !!(options || {}).noScroll;\n        var bgNodes = [], bgColor = axe.commons.color.getBackgroundColor(node, bgNodes, noScroll), fgColor = axe.commons.color.getForegroundColor(node, noScroll);\n        //We don't know, so we'll pass it provisionally\n        if (fgColor === null || bgColor === null) {\n          return undefined;\n        }\n        var nodeStyle = window.getComputedStyle(node);\n        var fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\n        var fontWeight = nodeStyle.getPropertyValue('font-weight');\n        var bold = [ 'bold', 'bolder', '600', '700', '800', '900' ].indexOf(fontWeight) !== -1;\n        var cr = axe.commons.color.hasValidContrastRatio(bgColor, fgColor, fontSize, bold);\n        this.data({\n          fgColor: fgColor.toHexString(),\n          bgColor: bgColor.toHexString(),\n          contrastRatio: cr.contrastRatio.toFixed(2),\n          fontSize: (fontSize * 72 / 96).toFixed(1) + 'pt',\n          fontWeight: bold ? 'bold' : 'normal'\n        });\n        if (!cr.isValid) {\n          this.relatedNodes(bgNodes);\n        }\n        return cr.isValid;\n      }\n    }, {\n      id: 'link-in-text-block',\n      evaluate: function evaluate(node, options) {\n        /* global axe*/\n        var color = axe.commons.color;\n        function getContrast(color1, color2) {\n          var c1lum = color1.getRelativeLuminance();\n          var c2lum = color2.getRelativeLuminance();\n          return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);\n        }\n        var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n        function isBlock(elm) {\n          var display = window.getComputedStyle(elm).getPropertyValue('display');\n          return blockLike.indexOf(display) !== -1 || display.substr(0, 6) === 'table-';\n        }\n        if (isBlock(node)) {\n          return false;\n        }\n        var parentBlock = node.parentNode;\n        while (parentBlock.nodeType === 1 && !isBlock(parentBlock)) {\n          parentBlock = parentBlock.parentNode;\n        }\n        // TODO: Check the :visited state of the link\n        if (color.elementIsDistinct(node, parentBlock)) {\n          return true;\n        } else {\n          // Check if contrast of foreground is sufficient\n          var nodeColor, parentColor;\n          nodeColor = color.getForegroundColor(node);\n          parentColor = color.getForegroundColor(parentBlock);\n          if (!nodeColor || !parentColor) {\n            return undefined;\n          }\n          var contrast = getContrast(nodeColor, parentColor);\n          if (contrast === 1) {\n            return true;\n          } else {\n            if (contrast >= 3) {\n              return undefined;\n            }\n          }\n          // Check if contrast of background is sufficient\n          nodeColor = color.getBackgroundColor(node);\n          parentColor = color.getBackgroundColor(parentBlock);\n          if (!nodeColor || !parentColor || getContrast(nodeColor, parentColor) >= 3) {\n            return undefined;\n          }\n        }\n        // TODO: We should check the focus / hover style too\n        return false;\n      }\n    }, {\n      id: 'fieldset',\n      evaluate: function evaluate(node, options) {\n        var failureCode, self = this;\n        function getUnrelatedElements(parent, name) {\n          return axe.commons.utils.toArray(parent.querySelectorAll('select,textarea,button,input:not([name=\"' + name + '\"]):not([type=\"hidden\"])'));\n        }\n        function checkFieldset(group, name) {\n          var firstNode = group.firstElementChild;\n          if (!firstNode || firstNode.nodeName.toUpperCase() !== 'LEGEND') {\n            self.relatedNodes([ group ]);\n            failureCode = 'no-legend';\n            return false;\n          }\n          if (!axe.commons.text.accessibleText(firstNode)) {\n            self.relatedNodes([ firstNode ]);\n            failureCode = 'empty-legend';\n            return false;\n          }\n          var otherElements = getUnrelatedElements(group, name);\n          if (otherElements.length) {\n            self.relatedNodes(otherElements);\n            failureCode = 'mixed-inputs';\n            return false;\n          }\n          return true;\n        }\n        function checkARIAGroup(group, name) {\n          var hasLabelledByText = axe.commons.dom.idrefs(group, 'aria-labelledby').some(function(element) {\n            return element && axe.commons.text.accessibleText(element);\n          });\n          var ariaLabel = group.getAttribute('aria-label');\n          if (!hasLabelledByText && !(ariaLabel && axe.commons.text.sanitize(ariaLabel))) {\n            self.relatedNodes(group);\n            failureCode = 'no-group-label';\n            return false;\n          }\n          var otherElements = getUnrelatedElements(group, name);\n          if (otherElements.length) {\n            self.relatedNodes(otherElements);\n            failureCode = 'group-mixed-inputs';\n            return false;\n          }\n          return true;\n        }\n        function spliceCurrentNode(nodes, current) {\n          return axe.commons.utils.toArray(nodes).filter(function(candidate) {\n            return candidate !== current;\n          });\n        }\n        function runCheck(element) {\n          var name = axe.commons.utils.escapeSelector(node.name);\n          var matchingNodes = document.querySelectorAll('input[type=\"' + axe.commons.utils.escapeSelector(node.type) + '\"][name=\"' + name + '\"]');\n          if (matchingNodes.length < 2) {\n            return true;\n          }\n          var fieldset = axe.commons.dom.findUp(element, 'fieldset');\n          var group = axe.commons.dom.findUp(element, '[role=\"group\"]' + (node.type === 'radio' ? ',[role=\"radiogroup\"]' : ''));\n          if (!group && !fieldset) {\n            failureCode = 'no-group';\n            self.relatedNodes(spliceCurrentNode(matchingNodes, element));\n            return false;\n          }\n          return fieldset ? checkFieldset(fieldset, name) : checkARIAGroup(group, name);\n        }\n        var data = {\n          name: node.getAttribute('name'),\n          type: node.getAttribute('type')\n        };\n        var result = runCheck(node);\n        if (!result) {\n          data.failureCode = failureCode;\n        }\n        this.data(data);\n        return result;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(result) {\n          // passes can pass through\n          if (result.result) {\n            return true;\n          }\n          var data = result.data;\n          if (data) {\n            seen[data.type] = seen[data.type] || {};\n            if (!seen[data.type][data.name]) {\n              seen[data.type][data.name] = [ data ];\n              return true;\n            }\n            var hasBeenSeen = seen[data.type][data.name].some(function(candidate) {\n              return candidate.failureCode === data.failureCode;\n            });\n            if (!hasBeenSeen) {\n              seen[data.type][data.name].push(data);\n            }\n            return !hasBeenSeen;\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'group-labelledby',\n      evaluate: function evaluate(node, options) {\n        this.data({\n          name: node.getAttribute('name'),\n          type: node.getAttribute('type')\n        });\n        var matchingNodes = document.querySelectorAll('input[type=\"' + axe.commons.utils.escapeSelector(node.type) + '\"][name=\"' + axe.commons.utils.escapeSelector(node.name) + '\"]');\n        if (matchingNodes.length <= 1) {\n          return true;\n        }\n        // Check to see if there's an aria-labelledby value that all nodes have in common\n        return [].map.call(matchingNodes, function(m) {\n          var l = m.getAttribute('aria-labelledby');\n          return l ? l.split(/\\s+/) : [];\n        }).reduce(function(prev, curr) {\n          return prev.filter(function(n) {\n            return curr.indexOf(n) !== -1;\n          });\n        }).filter(function(n) {\n          var labelNode = document.getElementById(n);\n          return labelNode && axe.commons.text.accessibleText(labelNode);\n        }).length !== 0;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(result) {\n          var data = result.data;\n          if (data) {\n            seen[data.type] = seen[data.type] || {};\n            if (!seen[data.type][data.name]) {\n              seen[data.type][data.name] = true;\n              return true;\n            }\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'accesskeys',\n      evaluate: function evaluate(node, options) {\n        if (axe.commons.dom.isVisible(node, false)) {\n          this.data(node.getAttribute('accesskey'));\n          this.relatedNodes([ node ]);\n        }\n        return true;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(r) {\n          if (!r.data) {\n            return false;\n          }\n          var key = r.data.toUpperCase();\n          if (!seen[key]) {\n            seen[key] = r;\n            r.relatedNodes = [];\n            return true;\n          }\n          seen[key].relatedNodes.push(r.relatedNodes[0]);\n          return false;\n        }).map(function(r) {\n          r.result = !!r.relatedNodes.length;\n          return r;\n        });\n      }\n    }, {\n      id: 'focusable-no-name',\n      evaluate: function evaluate(node, options) {\n        var tabIndex = node.getAttribute('tabindex'), isFocusable = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!isFocusable) {\n          return false;\n        }\n        return !axe.commons.text.accessibleText(node);\n      }\n    }, {\n      id: 'tabindex',\n      evaluate: function evaluate(node, options) {\n        return node.tabIndex <= 0;\n      }\n    }, {\n      id: 'duplicate-img-label',\n      evaluate: function evaluate(node, options) {\n        var imgs = node.querySelectorAll('img');\n        var text = axe.commons.text.visible(node, true).toLowerCase();\n        if (text === '') {\n          return false;\n        }\n        for (var i = 0, len = imgs.length; i < len; i++) {\n          var img = imgs[i];\n          var imgAlt = axe.commons.text.accessibleText(img).toLowerCase();\n          if (imgAlt === text && img.getAttribute('role') !== 'presentation' && axe.commons.dom.isVisible(img)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      id: 'explicit-label',\n      evaluate: function evaluate(node, options) {\n        if (node.id) {\n          var label = document.querySelector('label[for=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]');\n          if (label) {\n            return !!axe.commons.text.accessibleText(label);\n          }\n        }\n        return false;\n      }\n    }, {\n      id: 'help-same-as-label',\n      evaluate: function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      },\n      enabled: false\n    }, {\n      id: 'implicit-label',\n      evaluate: function evaluate(node, options) {\n        var label = axe.commons.dom.findUp(node, 'label');\n        if (label) {\n          return !!axe.commons.text.accessibleText(label);\n        }\n        return false;\n      }\n    }, {\n      id: 'multiple-label',\n      evaluate: function evaluate(node, options) {\n        var labels = [].slice.call(document.querySelectorAll('label[for=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]')), parent = node.parentNode;\n        while (parent) {\n          if (parent.tagName === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        return labels.length > 1;\n      }\n    }, {\n      id: 'title-only',\n      evaluate: function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node);\n        return !labelText && !!(node.getAttribute('title') || node.getAttribute('aria-describedby'));\n      }\n    }, {\n      id: 'has-lang',\n      evaluate: function evaluate(node, options) {\n        return !!(node.getAttribute('lang') || node.getAttribute('xml:lang') || '').trim();\n      }\n    }, {\n      id: 'valid-lang',\n      options: [ 'aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'in', 'io', 'is', 'it', 'iu', 'iw', 'ja', 'ji', 'jv', 'jw', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu' ],\n      evaluate: function evaluate(node, options) {\n        function getBaseLang(lang) {\n          return lang.trim().split('-')[0].toLowerCase();\n        }\n        var langs, invalid;\n        langs = (options || []).map(getBaseLang);\n        invalid = [ 'lang', 'xml:lang' ].reduce(function(invalid, langAttr) {\n          var langVal = node.getAttribute(langAttr);\n          if (typeof langVal !== 'string') {\n            return invalid;\n          }\n          var baselangVal = getBaseLang(langVal);\n          // Edge sets lang to an empty string when xml:lang is set\n          // so we need to ignore empty strings here\n          if (baselangVal !== '' && langs.indexOf(baselangVal) === -1) {\n            invalid.push(langAttr + '=\"' + node.getAttribute(langAttr) + '\"');\n          }\n          return invalid;\n        }, []);\n        if (invalid.length) {\n          this.data(invalid);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'dlitem',\n      evaluate: function evaluate(node, options) {\n        return node.parentNode.tagName === 'DL';\n      }\n    }, {\n      id: 'has-listitem',\n      evaluate: function evaluate(node, options) {\n        var children = node.children;\n        if (children.length === 0) {\n          return true;\n        }\n        for (var i = 0; i < children.length; i++) {\n          if (children[i].nodeName.toUpperCase() === 'LI') {\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      id: 'listitem',\n      evaluate: function evaluate(node, options) {\n        if ([ 'UL', 'OL' ].indexOf(node.parentNode.nodeName.toUpperCase()) !== -1) {\n          return true;\n        }\n        return node.parentNode.getAttribute('role') === 'list';\n      }\n    }, {\n      id: 'only-dlitems',\n      evaluate: function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          var nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'DT' && nodeName !== 'DD' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else {\n            if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n              hasNonEmptyTextNode = true;\n            }\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        var retVal = !!bad.length || hasNonEmptyTextNode;\n        return retVal;\n      }\n    }, {\n      id: 'only-listitems',\n      evaluate: function evaluate(node, options) {\n        var child, nodeName, bad = [], children = node.childNodes, permitted = [ 'STYLE', 'META', 'LINK', 'MAP', 'AREA', 'SCRIPT', 'DATALIST', 'TEMPLATE' ], hasNonEmptyTextNode = false;\n        for (var i = 0; i < children.length; i++) {\n          child = children[i];\n          nodeName = child.nodeName.toUpperCase();\n          if (child.nodeType === 1 && nodeName !== 'LI' && permitted.indexOf(nodeName) === -1) {\n            bad.push(child);\n          } else {\n            if (child.nodeType === 3 && child.nodeValue.trim() !== '') {\n              hasNonEmptyTextNode = true;\n            }\n          }\n        }\n        if (bad.length) {\n          this.relatedNodes(bad);\n        }\n        return !!bad.length || hasNonEmptyTextNode;\n      }\n    }, {\n      id: 'structured-dlitems',\n      evaluate: function evaluate(node, options) {\n        var children = node.children;\n        if (!children || !children.length) {\n          return false;\n        }\n        var hasDt = false, hasDd = false, nodeName;\n        for (var i = 0; i < children.length; i++) {\n          nodeName = children[i].nodeName.toUpperCase();\n          if (nodeName === 'DT') {\n            hasDt = true;\n          }\n          if (hasDt && nodeName === 'DD') {\n            return false;\n          }\n          if (nodeName === 'DD') {\n            hasDd = true;\n          }\n        }\n        return hasDt || hasDd;\n      }\n    }, {\n      id: 'caption',\n      evaluate: function evaluate(node, options) {\n        return !node.querySelector('track[kind=captions]');\n      }\n    }, {\n      id: 'description',\n      evaluate: function evaluate(node, options) {\n        return !node.querySelector('track[kind=descriptions]');\n      }\n    }, {\n      id: 'meta-viewport-large',\n      evaluate: function evaluate(node, options) {\n        options = options || {};\n        var params, content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/), result = {}, minimum = options.scaleMinimum || 2, lowerBound = options.lowerBound || false;\n        for (var i = 0, l = parsedParams.length; i < l; i++) {\n          params = parsedParams[i].split('=');\n          var key = params.shift().toLowerCase();\n          if (key && params.length) {\n            result[key.trim()] = params.shift().trim().toLowerCase();\n          }\n        }\n        if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n          return true;\n        }\n        if (!lowerBound && result['user-scalable'] === 'no') {\n          return false;\n        }\n        if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < minimum) {\n          return false;\n        }\n        return true;\n      },\n      options: {\n        scaleMinimum: 5,\n        lowerBound: 2\n      }\n    }, {\n      id: 'meta-viewport',\n      evaluate: function evaluate(node, options) {\n        options = options || {};\n        var params, content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/), result = {}, minimum = options.scaleMinimum || 2, lowerBound = options.lowerBound || false;\n        for (var i = 0, l = parsedParams.length; i < l; i++) {\n          params = parsedParams[i].split('=');\n          var key = params.shift().toLowerCase();\n          if (key && params.length) {\n            result[key.trim()] = params.shift().trim().toLowerCase();\n          }\n        }\n        if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n          return true;\n        }\n        if (!lowerBound && result['user-scalable'] === 'no') {\n          return false;\n        }\n        if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < minimum) {\n          return false;\n        }\n        return true;\n      },\n      options: {\n        scaleMinimum: 2\n      }\n    }, {\n      id: 'header-present',\n      evaluate: function evaluate(node, options) {\n        return !!node.querySelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n      }\n    }, {\n      id: 'heading-order',\n      evaluate: function evaluate(node, options) {\n        var ariaHeadingLevel = node.getAttribute('aria-level');\n        if (ariaHeadingLevel !== null) {\n          this.data(parseInt(ariaHeadingLevel, 10));\n          return true;\n        }\n        var headingLevel = node.tagName.match(/H(\\d)/);\n        if (headingLevel) {\n          this.data(parseInt(headingLevel[1], 10));\n          return true;\n        }\n        return true;\n      },\n      after: function after(results, options) {\n        if (results.length < 2) {\n          return results;\n        }\n        var prevLevel = results[0].data;\n        for (var i = 1; i < results.length; i++) {\n          if (results[i].result && results[i].data > prevLevel + 1) {\n            results[i].result = false;\n          }\n          prevLevel = results[i].data;\n        }\n        return results;\n      }\n    }, {\n      id: 'href-no-hash',\n      evaluate: function evaluate(node, options) {\n        var href = node.getAttribute('href');\n        if (href === '#') {\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'internal-link-present',\n      evaluate: function evaluate(node, options) {\n        return !!node.querySelector('a[href^=\"#\"]');\n      }\n    }, {\n      id: 'landmark',\n      evaluate: function evaluate(node, options) {\n        return node.getElementsByTagName('main').length > 0 || !!node.querySelector('[role=\"main\"]');\n      }\n    }, {\n      id: 'meta-refresh',\n      evaluate: function evaluate(node, options) {\n        var content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/);\n        return content === '' || parsedParams[0] === '0';\n      }\n    }, {\n      id: 'region',\n      evaluate: function evaluate(node, options) {\n        //jshint latedef: false\n        var landmarkRoles = axe.commons.aria.getRolesByType('landmark'), firstLink = node.querySelector('a[href]');\n        function isSkipLink(n) {\n          return firstLink && axe.commons.dom.isFocusable(axe.commons.dom.getElementByReference(firstLink, 'href')) && firstLink === n;\n        }\n        function isLandmark(n) {\n          var role = n.getAttribute('role');\n          return role && landmarkRoles.indexOf(role) !== -1;\n        }\n        function checkRegion(n) {\n          if (isLandmark(n)) {\n            return null;\n          }\n          if (isSkipLink(n)) {\n            return getViolatingChildren(n);\n          }\n          if (axe.commons.dom.isVisible(n, true) && (axe.commons.text.visible(n, true, true) || axe.commons.dom.isVisualContent(n))) {\n            return n;\n          }\n          return getViolatingChildren(n);\n        }\n        function getViolatingChildren(n) {\n          var children = axe.commons.utils.toArray(n.children);\n          if (children.length === 0) {\n            return [];\n          }\n          return children.map(checkRegion).filter(function(c) {\n            return c !== null;\n          }).reduce(function(a, b) {\n            return a.concat(b);\n          }, []);\n        }\n        var v = getViolatingChildren(node);\n        this.relatedNodes(v);\n        return !v.length;\n      },\n      after: function after(results, options) {\n        return [ results[0] ];\n      }\n    }, {\n      id: 'skip-link',\n      evaluate: function evaluate(node, options) {\n        return axe.commons.dom.isFocusable(axe.commons.dom.getElementByReference(node, 'href'));\n      },\n      after: function after(results, options) {\n        return [ results[0] ];\n      }\n    }, {\n      id: 'unique-frame-title',\n      evaluate: function evaluate(node, options) {\n        var title = axe.commons.text.sanitize(node.title).trim().toLowerCase();\n        this.data(title);\n        return true;\n      },\n      after: function after(results, options) {\n        var titles = {};\n        results.forEach(function(r) {\n          titles[r.data] = titles[r.data] !== undefined ? ++titles[r.data] : 0;\n        });\n        results.forEach(function(r) {\n          r.result = !!titles[r.data];\n        });\n        return results;\n      }\n    }, {\n      id: 'aria-label',\n      evaluate: function evaluate(node, options) {\n        var label = node.getAttribute('aria-label');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }\n    }, {\n      id: 'aria-labelledby',\n      evaluate: function evaluate(node, options) {\n        var getIdRefs = axe.commons.dom.idrefs;\n        return getIdRefs(node, 'aria-labelledby').some(function(elm) {\n          return elm && axe.commons.text.accessibleText(elm, true);\n        });\n      }\n    }, {\n      id: 'button-has-visible-text',\n      evaluate: function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label = void 0;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleText(node);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      id: 'doc-has-title',\n      evaluate: function evaluate(node, options) {\n        var title = document.title;\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }\n    }, {\n      id: 'duplicate-id',\n      evaluate: function evaluate(node, options) {\n        // Since empty ID's are not meaningful and are ignored by Edge, we'll\n        // let those pass.\n        if (!node.id.trim()) {\n          return true;\n        }\n        var matchingNodes = document.querySelectorAll('[id=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]');\n        var related = [];\n        for (var i = 0; i < matchingNodes.length; i++) {\n          if (matchingNodes[i] !== node) {\n            related.push(matchingNodes[i]);\n          }\n        }\n        if (related.length) {\n          this.relatedNodes(related);\n        }\n        this.data(node.getAttribute('id'));\n        return matchingNodes.length <= 1;\n      },\n      after: function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'exists',\n      evaluate: function evaluate(node, options) {\n        return true;\n      }\n    }, {\n      id: 'has-alt',\n      evaluate: function evaluate(node, options) {\n        return node.hasAttribute('alt');\n      }\n    }, {\n      id: 'has-visible-text',\n      evaluate: function evaluate(node, options) {\n        return axe.commons.text.accessibleText(node).length > 0;\n      }\n    }, {\n      id: 'is-on-screen',\n      evaluate: function evaluate(node, options) {\n        // From a visual perspective\n        return axe.commons.dom.isVisible(node, false) && !axe.commons.dom.isOffscreen(node);\n      }\n    }, {\n      id: 'non-empty-alt',\n      evaluate: function evaluate(node, options) {\n        var label = node.getAttribute('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }\n    }, {\n      id: 'non-empty-if-present',\n      evaluate: function evaluate(node, options) {\n        // Check for 'default' names, which are given to reset and submit buttons\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        this.data(label);\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].indexOf(type) !== -1) {\n          return label === null;\n        }\n        return false;\n      }\n    }, {\n      id: 'non-empty-title',\n      evaluate: function evaluate(node, options) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }\n    }, {\n      id: 'non-empty-value',\n      evaluate: function evaluate(node, options) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }\n    }, {\n      id: 'role-none',\n      evaluate: function evaluate(node, options) {\n        return node.getAttribute('role') === 'none';\n      }\n    }, {\n      id: 'role-presentation',\n      evaluate: function evaluate(node, options) {\n        return node.getAttribute('role') === 'presentation';\n      }\n    }, {\n      id: 'caption-faked',\n      evaluate: function evaluate(node, options) {\n        var table = axe.commons.table.toGrid(node);\n        var firstRow = table[0];\n        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n          return true;\n        }\n        return firstRow.reduce(function(out, curr, i) {\n          return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== undefined;\n        }, false);\n      }\n    }, {\n      id: 'has-caption',\n      evaluate: function evaluate(node, options) {\n        return !!node.caption;\n      }\n    }, {\n      id: 'has-summary',\n      evaluate: function evaluate(node, options) {\n        return !!node.summary;\n      }\n    }, {\n      id: 'has-th',\n      evaluate: function evaluate(node, options) {\n        var row, cell, badCells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1) {\n              badCells.push(cell);\n            }\n          }\n        }\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'html5-scope',\n      evaluate: function evaluate(node, options) {\n        if (!axe.commons.dom.isHTML5(document)) {\n          return false;\n        }\n        return node.nodeName.toUpperCase() === 'TH';\n      }\n    }, {\n      id: 'same-caption-summary',\n      evaluate: function evaluate(node, options) {\n        return !!(node.summary && node.caption) && node.summary === axe.commons.text.accessibleText(node.caption);\n      }\n    }, {\n      id: 'scope-value',\n      evaluate: function evaluate(node, options) {\n        options = options || {};\n        var value = node.getAttribute('scope').toLowerCase();\n        var validVals = [ 'row', 'col', 'rowgroup', 'colgroup' ] || options.values;\n        return validVals.indexOf(value) !== -1;\n      }\n    }, {\n      id: 'td-has-header',\n      evaluate: function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var badCells = [];\n        var cells = tableUtils.getAllCells(node);\n        cells.forEach(function(cell) {\n          // For each non-empty data cell that doesn't have an aria label\n          if (cell.textContent.trim() !== '' && tableUtils.isDataCell(cell) && !axe.commons.aria.label(cell)) {\n            // Check if it has any headers\n            var hasHeaders = tableUtils.getHeaders(cell);\n            hasHeaders = hasHeaders.reduce(function(hasHeaders, header) {\n              return hasHeaders || header !== null && !!header.textContent.trim();\n            }, false);\n            // If no headers, put it on the naughty list\n            if (!hasHeaders) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'td-headers-attr',\n      evaluate: function evaluate(node, options) {\n        var cells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          var row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(row.cells[cellIndex]);\n          }\n        }\n        var ids = cells.reduce(function(ids, cell) {\n          if (cell.id) {\n            ids.push(cell.id);\n          }\n          return ids;\n        }, []);\n        var badCells = cells.reduce(function(badCells, cell) {\n          var isSelf, notOfTable;\n          // Get a list all the values of the headers attribute\n          var headers = (cell.getAttribute('headers') || '').split(/\\s/).reduce(function(headers, header) {\n            header = header.trim();\n            if (header) {\n              headers.push(header);\n            }\n            return headers;\n          }, []);\n          if (headers.length !== 0) {\n            // Check if the cell's id is in this list\n            if (cell.id) {\n              isSelf = headers.indexOf(cell.id.trim()) !== -1;\n            }\n            // Check if the headers are of cells inside the table\n            notOfTable = headers.reduce(function(fail, header) {\n              return fail || ids.indexOf(header) === -1;\n            }, false);\n            if (isSelf || notOfTable) {\n              badCells.push(cell);\n            }\n          }\n          return badCells;\n        }, []);\n        if (badCells.length > 0) {\n          this.relatedNodes(badCells);\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }, {\n      id: 'th-has-data-cells',\n      evaluate: function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var cells = tableUtils.getAllCells(node);\n        var checkResult = this;\n        // Get a list of all headers reffed to in this rule\n        var reffedHeaders = [];\n        cells.forEach(function(cell) {\n          var headers = cell.getAttribute('headers');\n          if (headers) {\n            reffedHeaders = reffedHeaders.concat(headers.split(/\\s+/));\n          }\n          var ariaLabel = cell.getAttribute('aria-labelledby');\n          if (ariaLabel) {\n            reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n          }\n        });\n        // Get all the headers\n        var headers = cells.filter(function(cell) {\n          if (axe.commons.text.sanitize(cell.textContent) === '') {\n            return false;\n          }\n          return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n        });\n        var tableGrid = tableUtils.toGrid(node);\n        // Look for all the bad headers\n        return headers.reduce(function(res, header) {\n          if (header.id && reffedHeaders.indexOf(header.id) !== -1) {\n            return !res ? res : true;\n          }\n          var hasCell = false;\n          var pos = tableUtils.getCellPosition(header, tableGrid);\n          // Look for any data cells or row headers that this might refer to\n          if (tableUtils.isColumnHeader(header)) {\n            hasCell = tableUtils.traverse('down', pos, tableGrid).reduce(function(out, cell) {\n              return out || cell.textContent.trim() !== '' && !tableUtils.isColumnHeader(cell);\n            }, false);\n          }\n          // Look for any data cells or column headers that this might refer to\n          if (!hasCell && tableUtils.isRowHeader(header)) {\n            hasCell = tableUtils.traverse('right', pos, tableGrid).reduce(function(out, cell) {\n              return out || cell.textContent.trim() !== '' && !tableUtils.isRowHeader(cell);\n            }, false);\n          }\n          // report the node as having failed\n          if (!hasCell) {\n            checkResult.relatedNodes(header);\n          }\n          return res && hasCell;\n        }, true);\n      }\n    } ],\n    commons: function() {\n      /*exported commons */\n      var commons = {};\n      var aria = commons.aria = {}, lookupTables = aria._lut = {};\n      lookupTables.attributes = {\n        'aria-activedescendant': {\n          type: 'idref'\n        },\n        'aria-atomic': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-autocomplete': {\n          type: 'nmtoken',\n          values: [ 'inline', 'list', 'both', 'none' ]\n        },\n        'aria-busy': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-checked': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'mixed', 'undefined' ]\n        },\n        'aria-colcount': {\n          type: 'int'\n        },\n        'aria-colindex': {\n          type: 'int'\n        },\n        'aria-colspan': {\n          type: 'int'\n        },\n        'aria-controls': {\n          type: 'idrefs'\n        },\n        'aria-describedby': {\n          type: 'idrefs'\n        },\n        'aria-disabled': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-dropeffect': {\n          type: 'nmtokens',\n          values: [ 'copy', 'move', 'reference', 'execute', 'popup', 'none' ]\n        },\n        'aria-expanded': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ]\n        },\n        'aria-flowto': {\n          type: 'idrefs'\n        },\n        'aria-grabbed': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ]\n        },\n        'aria-haspopup': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-hidden': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-invalid': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'spelling', 'grammar' ]\n        },\n        'aria-label': {\n          type: 'string'\n        },\n        'aria-labelledby': {\n          type: 'idrefs'\n        },\n        'aria-level': {\n          type: 'int'\n        },\n        'aria-live': {\n          type: 'nmtoken',\n          values: [ 'off', 'polite', 'assertive' ]\n        },\n        'aria-multiline': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-multiselectable': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-orientation': {\n          type: 'nmtoken',\n          values: [ 'horizontal', 'vertical' ]\n        },\n        'aria-owns': {\n          type: 'idrefs'\n        },\n        'aria-posinset': {\n          type: 'int'\n        },\n        'aria-pressed': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'mixed', 'undefined' ]\n        },\n        'aria-readonly': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-relevant': {\n          type: 'nmtokens',\n          values: [ 'additions', 'removals', 'text', 'all' ]\n        },\n        'aria-required': {\n          type: 'boolean',\n          values: [ 'true', 'false' ]\n        },\n        'aria-rowcount': {\n          type: 'int'\n        },\n        'aria-rowindex': {\n          type: 'int'\n        },\n        'aria-rowspan': {\n          type: 'int'\n        },\n        'aria-selected': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ]\n        },\n        'aria-setsize': {\n          type: 'int'\n        },\n        'aria-sort': {\n          type: 'nmtoken',\n          values: [ 'ascending', 'descending', 'other', 'none' ]\n        },\n        'aria-valuemax': {\n          type: 'decimal'\n        },\n        'aria-valuemin': {\n          type: 'decimal'\n        },\n        'aria-valuenow': {\n          type: 'decimal'\n        },\n        'aria-valuetext': {\n          type: 'string'\n        }\n      };\n      lookupTables.globalAttributes = [ 'aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant' ];\n      lookupTables.role = {\n        alert: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        alertdialog: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        application: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        article: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'article' ]\n        },\n        banner: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'header' ]\n        },\n        button: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-pressed' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'button', 'input[type=\"button\"]', 'input[type=\"image\"]', 'input[type=\"reset\"]', 'input[type=\"submit\"]', 'summary' ]\n        },\n        cell: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'td', 'th' ]\n        },\n        checkbox: {\n          type: 'widget',\n          attributes: {\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'input[type=\"checkbox\"]' ]\n        },\n        columnheader: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-sort', 'aria-readonly', 'aria-selected', 'aria-required' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'th' ]\n        },\n        combobox: {\n          type: 'composite',\n          attributes: {\n            required: [ 'aria-expanded' ],\n            allowed: [ 'aria-autocomplete', 'aria-required', 'aria-activedescendant' ]\n          },\n          owned: {\n            all: [ 'listbox', 'textbox' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        command: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        complementary: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'aside' ]\n        },\n        composite: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        contentinfo: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'footer' ]\n        },\n        definition: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'dd' ]\n        },\n        dialog: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'dialog' ]\n        },\n        directory: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null\n        },\n        document: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'body' ]\n        },\n        form: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'form' ]\n        },\n        grid: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: {\n            one: [ 'rowgroup', 'row' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'table' ]\n        },\n        gridcell: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-readonly', 'aria-expanded', 'aria-required' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'td', 'th' ]\n        },\n        group: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'details', 'optgroup' ]\n        },\n        heading: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-level', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ]\n        },\n        img: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'img' ]\n        },\n        input: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        landmark: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        link: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'a[href]' ]\n        },\n        list: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'listitem' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'ol', 'ul', 'dl' ]\n        },\n        listbox: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-required', 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'option' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'select' ]\n        },\n        listitem: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'list' ],\n          implicit: [ 'li', 'dt' ]\n        },\n        log: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        main: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'main' ]\n        },\n        marquee: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        math: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'math' ]\n        },\n        menu: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: {\n            one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'menu[type=\"context\"]' ]\n        },\n        menubar: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        menuitem: {\n          type: 'widget',\n          attributes: null,\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"command\"]' ]\n        },\n        menuitemcheckbox: {\n          type: 'widget',\n          attributes: {\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"checkbox\"]' ]\n        },\n        menuitemradio: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize' ],\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"radio\"]' ]\n        },\n        navigation: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'nav' ]\n        },\n        none: {\n          type: 'structure',\n          attributes: null,\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        note: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        option: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'listbox' ],\n          implicit: [ 'option' ]\n        },\n        presentation: {\n          type: 'structure',\n          attributes: null,\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        progressbar: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'progress' ]\n        },\n        radio: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize' ],\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'input[type=\"radio\"]' ]\n        },\n        radiogroup: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-required', 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'radio' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        range: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        region: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'section' ]\n        },\n        roletype: {\n          type: 'abstract'\n        },\n        row: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-level', 'aria-selected', 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: {\n            one: [ 'cell', 'columnheader', 'rowheader', 'gridcell' ]\n          },\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'rowgroup', 'grid', 'treegrid', 'table' ],\n          implicit: [ 'tr' ]\n        },\n        rowgroup: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'row' ]\n          },\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'grid', 'table' ],\n          implicit: [ 'tbody', 'thead', 'tfoot' ]\n        },\n        rowheader: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-sort', 'aria-required', 'aria-readonly', 'aria-expanded', 'aria-selected' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'th' ]\n        },\n        scrollbar: {\n          type: 'widget',\n          attributes: {\n            required: [ 'aria-controls', 'aria-orientation', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin' ],\n            allowed: [ 'aria-valuetext' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        search: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        searchbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"search\"]' ]\n        },\n        section: {\n          nameFrom: [ 'author', 'contents' ],\n          type: 'abstract'\n        },\n        sectionhead: {\n          nameFrom: [ 'author', 'contents' ],\n          type: 'abstract'\n        },\n        select: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        },\n        separator: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-orientation' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'hr' ]\n        },\n        slider: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-orientation' ],\n            required: [ 'aria-valuenow', 'aria-valuemax', 'aria-valuemin' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"range\"]' ]\n        },\n        spinbutton: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-required' ],\n            required: [ 'aria-valuenow', 'aria-valuemax', 'aria-valuemin' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"number\"]' ]\n        },\n        status: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'output' ]\n        },\n        structure: {\n          type: 'abstract'\n        },\n        'switch': {\n          type: 'widget',\n          attributes: {\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null\n        },\n        tab: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'tablist' ]\n        },\n        table: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colcount', 'aria-rowcount' ]\n          },\n          owned: {\n            one: [ 'rowgroup', 'row' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'table' ]\n        },\n        tablist: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-level', 'aria-multiselectable' ]\n          },\n          owned: {\n            all: [ 'tab' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        tabpanel: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        text: {\n          type: 'structure',\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null\n        },\n        textbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"text\"]', 'input[type=\"email\"]', 'input[type=\"password\"]', 'input[type=\"tel\"]', 'input[type=\"url\"]', 'input:not([type])', 'textarea' ]\n        },\n        timer: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        toolbar: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'menu[type=\"toolbar\"]' ]\n        },\n        tooltip: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null\n        },\n        tree: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-required', 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'treeitem' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        treegrid: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-required' ]\n          },\n          owned: {\n            all: [ 'treeitem' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null\n        },\n        treeitem: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-checked', 'aria-selected', 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'treegrid', 'tree' ]\n        },\n        widget: {\n          type: 'abstract'\n        },\n        window: {\n          nameFrom: [ 'author' ],\n          type: 'abstract'\n        }\n      };\n      var color = {};\n      commons.color = color;\n      /*exported dom */\n      var dom = commons.dom = {};\n      /*exported table */\n      var table = commons.table = {};\n      /*exported text */\n      var text = commons.text = {};\n      /*exported utils */\n      /*global axe */\n      var utils = commons.utils = axe.utils;\n      /*global aria, axe, lookupTables */\n      /**\n   * Get required attributes for a given role\n   * @param  {String} role The role to check\n   * @return {Array}\n   */\n      aria.requiredAttr = function(role) {\n        'use strict';\n        var roles = lookupTables.role[role], attr = roles && roles.attributes && roles.attributes.required;\n        return attr || [];\n      };\n      /**\n   * Get allowed attributes for a given role\n   * @param  {String} role The role to check\n   * @return {Array}\n   */\n      aria.allowedAttr = function(role) {\n        'use strict';\n        var roles = lookupTables.role[role], attr = roles && roles.attributes && roles.attributes.allowed || [], requiredAttr = roles && roles.attributes && roles.attributes.required || [];\n        return attr.concat(lookupTables.globalAttributes).concat(requiredAttr);\n      };\n      /**\n   * Check if an aria- attribute name is valid\n   * @param  {String} att The attribute name\n   * @return {Boolean}\n   */\n      aria.validateAttr = function(att) {\n        'use strict';\n        return !!lookupTables.attributes[att];\n      };\n      /**\n   * Validate the value of an ARIA attribute\n   * @param  {HTMLElement} node The element to check\n   * @param  {String} attr The name of the attribute\n   * @return {Boolean}\n   */\n      aria.validateAttrValue = function(node, attr) {\n        //jshint maxcomplexity: 12\n        'use strict';\n        var matches, list, doc = document, value = node.getAttribute(attr), attrInfo = lookupTables.attributes[attr];\n        if (!attrInfo) {\n          return true;\n        }\n        switch (attrInfo.type) {\n         case 'boolean':\n         case 'nmtoken':\n          return typeof value === 'string' && attrInfo.values.indexOf(value.toLowerCase()) !== -1;\n\n         case 'nmtokens':\n          list = axe.utils.tokenList(value);\n          // Check if any value isn't in the list of values\n          return list.reduce(function(result, token) {\n            return result && attrInfo.values.indexOf(token) !== -1;\n          }, list.length !== 0);\n\n         case 'idref':\n          return !!(value && doc.getElementById(value));\n\n         case 'idrefs':\n          list = axe.utils.tokenList(value);\n          // Check if any value isn't in the list of values\n          return list.reduce(function(result, token) {\n            return !!(result && doc.getElementById(token));\n          }, list.length !== 0);\n\n         case 'string':\n          // anything goes\n          return true;\n\n         case 'decimal':\n          matches = value.match(/^[-+]?([0-9]*)\\.?([0-9]*)$/);\n          return !!(matches && (matches[1] || matches[2]));\n\n         case 'int':\n          return /^[-+]?[0-9]+$/.test(value);\n        }\n      };\n      /*global aria, dom, text */\n      /**\n   * Gets the accessible ARIA label text of a given element\n   * @see http://www.w3.org/WAI/PF/aria/roles#namecalculation\n   * @param  {HTMLElement} node The element to test\n   * @return {Mixed}      String of visible text, or `null` if no label is found\n   */\n      aria.label = function(node) {\n        var ref, candidate;\n        if (node.getAttribute('aria-labelledby')) {\n          // aria-labelledby\n          ref = dom.idrefs(node, 'aria-labelledby');\n          candidate = ref.map(function(thing) {\n            return thing ? text.visible(thing, true) : '';\n          }).join(' ').trim();\n          if (candidate) {\n            return candidate;\n          }\n        }\n        // aria-label\n        candidate = node.getAttribute('aria-label');\n        if (candidate) {\n          candidate = text.sanitize(candidate).trim();\n          if (candidate) {\n            return candidate;\n          }\n        }\n        return null;\n      };\n      /*global aria, lookupTables, axe */\n      /**\n   * Check if a given role is valid\n   * @param  {String}  role The role to check\n   * @return {Boolean}\n   */\n      aria.isValidRole = function(role) {\n        'use strict';\n        if (lookupTables.role[role]) {\n          return true;\n        }\n        return false;\n      };\n      /**\n   * Get the roles that get name from contents\n   * @return {Array}           Array of roles that match the type\n   */\n      aria.getRolesWithNameFromContents = function() {\n        return Object.keys(lookupTables.role).filter(function(r) {\n          return lookupTables.role[r].nameFrom && lookupTables.role[r].nameFrom.indexOf('contents') !== -1;\n        });\n      };\n      /**\n   * Get the roles that have a certain \"type\"\n   * @param  {String} roleType The roletype to check\n   * @return {Array}           Array of roles that match the type\n   */\n      aria.getRolesByType = function(roleType) {\n        return Object.keys(lookupTables.role).filter(function(r) {\n          return lookupTables.role[r].type === roleType;\n        });\n      };\n      /**\n   * Get the \"type\" of role; either widget, composite, abstract, landmark or `null`\n   * @param  {String} role The role to check\n   * @return {Mixed}       String if a matching role and its type are found, otherwise `null`\n   */\n      aria.getRoleType = function(role) {\n        var r = lookupTables.role[role];\n        return r && r.type || null;\n      };\n      /**\n   * Get the required owned (children) roles for a given role\n   * @param  {String} role The role to check\n   * @return {Mixed}       Either an Array of required owned elements or `null` if there are none\n   */\n      aria.requiredOwned = function(role) {\n        'use strict';\n        var owned = null, roles = lookupTables.role[role];\n        if (roles) {\n          owned = axe.utils.clone(roles.owned);\n        }\n        return owned;\n      };\n      /**\n   * Get the required context (parent) roles for a given role\n   * @param  {String} role The role to check\n   * @return {Mixed}       Either an Array of required context elements or `null` if there are none\n   */\n      aria.requiredContext = function(role) {\n        'use strict';\n        var context = null, roles = lookupTables.role[role];\n        if (roles) {\n          context = axe.utils.clone(roles.context);\n        }\n        return context;\n      };\n      /**\n   * Get a list of CSS selectors of nodes that have an implicit role\n   * @param  {String} role The role to check\n   * @return {Mixed}       Either an Array of CSS selectors or `null` if there are none\n   */\n      aria.implicitNodes = function(role) {\n        'use strict';\n        var implicit = null, roles = lookupTables.role[role];\n        if (roles && roles.implicit) {\n          implicit = axe.utils.clone(roles.implicit);\n        }\n        return implicit;\n      };\n      /**\n   * Get the implicit role for a given node\n   * @param  {HTMLElement} node The node to test\n   * @return {Mixed}      Either the role or `null` if there is none\n   */\n      aria.implicitRole = function(node) {\n        'use strict';\n        var role, r, candidate, roles = lookupTables.role;\n        for (role in roles) {\n          if (roles.hasOwnProperty(role)) {\n            r = roles[role];\n            if (r.implicit) {\n              for (var index = 0, length = r.implicit.length; index < length; index++) {\n                candidate = r.implicit[index];\n                if (axe.utils.matchesSelector(node, candidate)) {\n                  return role;\n                }\n              }\n            }\n          }\n        }\n        return null;\n      };\n      /*global color */\n      /**\n   * @constructor\n   * @param {number} red\n   * @param {number} green\n   * @param {number} blue\n   * @param {number} alpha\n   */\n      color.Color = function(red, green, blue, alpha) {\n        /** @type {number} */\n        this.red = red;\n        /** @type {number} */\n        this.green = green;\n        /** @type {number} */\n        this.blue = blue;\n        /** @type {number} */\n        this.alpha = alpha;\n        /**\n    * Provide the hex string value for the color\n    * @return {string}\n    */\n        this.toHexString = function() {\n          var redString = Math.round(this.red).toString(16);\n          var greenString = Math.round(this.green).toString(16);\n          var blueString = Math.round(this.blue).toString(16);\n          return '#' + (this.red > 15.5 ? redString : '0' + redString) + (this.green > 15.5 ? greenString : '0' + greenString) + (this.blue > 15.5 ? blueString : '0' + blueString);\n        };\n        var rgbRegex = /^rgb\\((\\d+), (\\d+), (\\d+)\\)$/;\n        var rgbaRegex = /^rgba\\((\\d+), (\\d+), (\\d+), (\\d*(\\.\\d+)?)\\)/;\n        /**\n    * Set the color value based on a CSS RGB/RGBA string\n    * @param  {string}  rgb  The string value\n    */\n        this.parseRgbString = function(colorString) {\n          // IE can pass transparent as value instead of rgba\n          if (colorString === 'transparent') {\n            this.red = 0;\n            this.green = 0;\n            this.blue = 0;\n            this.alpha = 0;\n            return;\n          }\n          var match = colorString.match(rgbRegex);\n          if (match) {\n            this.red = parseInt(match[1], 10);\n            this.green = parseInt(match[2], 10);\n            this.blue = parseInt(match[3], 10);\n            this.alpha = 1;\n            return;\n          }\n          match = colorString.match(rgbaRegex);\n          if (match) {\n            this.red = parseInt(match[1], 10);\n            this.green = parseInt(match[2], 10);\n            this.blue = parseInt(match[3], 10);\n            this.alpha = parseFloat(match[4]);\n            return;\n          }\n        };\n        /**\n    * Get the relative luminance value\n    * using algorithm from http://www.w3.org/WAI/GL/wiki/Relative_luminance\n    * @return {number} The luminance value, ranges from 0 to 1\n    */\n        this.getRelativeLuminance = function() {\n          var rSRGB = this.red / 255;\n          var gSRGB = this.green / 255;\n          var bSRGB = this.blue / 255;\n          var r = rSRGB <= .03928 ? rSRGB / 12.92 : Math.pow((rSRGB + .055) / 1.055, 2.4);\n          var g = gSRGB <= .03928 ? gSRGB / 12.92 : Math.pow((gSRGB + .055) / 1.055, 2.4);\n          var b = bSRGB <= .03928 ? bSRGB / 12.92 : Math.pow((bSRGB + .055) / 1.055, 2.4);\n          return .2126 * r + .7152 * g + .0722 * b;\n        };\n      };\n      /**\n   * Combine the two given color according to alpha blending.\n   * @param {Color} fgColor\n   * @param {Color} bgColor\n   * @return {Color}\n   */\n      color.flattenColors = function(fgColor, bgColor) {\n        var alpha = fgColor.alpha;\n        var r = (1 - alpha) * bgColor.red + alpha * fgColor.red;\n        var g = (1 - alpha) * bgColor.green + alpha * fgColor.green;\n        var b = (1 - alpha) * bgColor.blue + alpha * fgColor.blue;\n        var a = fgColor.alpha + bgColor.alpha * (1 - fgColor.alpha);\n        return new color.Color(r, g, b, a);\n      };\n      /**\n   * Get the contrast of two colors\n   * @param  {Color}  bgcolor  Background color\n   * @param  {Color}  fgcolor  Foreground color\n   * @return {number} The contrast ratio\n   */\n      color.getContrast = function(bgColor, fgColor) {\n        if (!fgColor || !bgColor) {\n          return null;\n        }\n        if (fgColor.alpha < 1) {\n          fgColor = color.flattenColors(fgColor, bgColor);\n        }\n        var bL = bgColor.getRelativeLuminance();\n        var fL = fgColor.getRelativeLuminance();\n        return (Math.max(fL, bL) + .05) / (Math.min(fL, bL) + .05);\n      };\n      /**\n   * Check whether certain text properties meet WCAG contrast rules\n   * @param  {Color}  bgcolor  Background color\n   * @param  {Color}  fgcolor  Foreground color\n   * @param  {number}  fontSize  Font size of text, in pixels\n   * @param  {boolean}  isBold  Whether the text is bold\n   * @return {{isValid: boolean, contrastRatio: number}}\n   */\n      color.hasValidContrastRatio = function(bg, fg, fontSize, isBold) {\n        var contrast = color.getContrast(bg, fg);\n        var isSmallFont = isBold && Math.ceil(fontSize * 72) / 96 < 14 || !isBold && Math.ceil(fontSize * 72) / 96 < 18;\n        return {\n          isValid: isSmallFont && contrast >= 4.5 || !isSmallFont && contrast >= 3,\n          contrastRatio: contrast\n        };\n      };\n      /*global color */\n      function _getFonts(style) {\n        return style.getPropertyValue('font-family').split(/[,;]/g).map(function(font) {\n          return font.trim().toLowerCase();\n        });\n      }\n      function elementIsDistinct(node, ancestorNode) {\n        var nodeStyle = window.getComputedStyle(node);\n        // Check if the link has a background\n        if (nodeStyle.getPropertyValue('background-image') !== 'none') {\n          return true;\n        }\n        // Check if the link has a border or outline\n        var hasBorder = [ 'border-bottom', 'border-top', 'outline' ].reduce(function(result, edge) {\n          var borderClr = new color.Color();\n          borderClr.parseRgbString(nodeStyle.getPropertyValue(edge + '-color'));\n          // Check if a border/outline was specified\n          // or if the current border edge / outline\n          return result || nodeStyle.getPropertyValue(edge + '-style') !== 'none' && parseFloat(nodeStyle.getPropertyValue(edge + '-width')) > 0 && borderClr.alpha !== 0;\n        }, false);\n        if (hasBorder) {\n          return true;\n        }\n        var parentStyle = window.getComputedStyle(ancestorNode);\n        // Compare fonts\n        if (_getFonts(nodeStyle)[0] !== _getFonts(parentStyle)[0]) {\n          return true;\n        }\n        var hasStyle = [ 'text-decoration-line', 'text-decoration-style', 'font-weight', 'font-style', 'font-size' ].reduce(function(result, cssProp) {\n          return result || nodeStyle.getPropertyValue(cssProp) !== parentStyle.getPropertyValue(cssProp);\n        }, false);\n        var tDec = nodeStyle.getPropertyValue('text-decoration');\n        if (tDec.split(' ').length < 3) {\n          // old style CSS text decoration\n          hasStyle = hasStyle || tDec !== parentStyle.getPropertyValue('text-decoration');\n        }\n        return hasStyle;\n      }\n      color.elementIsDistinct = elementIsDistinct;\n      /* global color, dom */\n      var graphicNodes = [ 'IMG', 'CANVAS', 'OBJECT', 'IFRAME', 'VIDEO', 'SVG' ];\n      function elmHasImage(elm, style) {\n        var nodeName = elm.nodeName.toUpperCase();\n        if (graphicNodes.includes(nodeName)) {\n          return true;\n        }\n        style = style || window.getComputedStyle(elm);\n        return style.getPropertyValue('background-image') !== 'none';\n      }\n      /**\n   * Returns the non-alpha-blended background color of an element\n   * @param {Element} elm\n   * @return {Color}\n   */\n      function getBgColor(elm, elmStyle) {\n        elmStyle = elmStyle || window.getComputedStyle(elm);\n        var bgColor = new color.Color();\n        bgColor.parseRgbString(elmStyle.getPropertyValue('background-color'));\n        if (bgColor.alpha !== 0) {\n          var opacity = elmStyle.getPropertyValue('opacity');\n          bgColor.alpha = bgColor.alpha * opacity;\n        }\n        return bgColor;\n      }\n      function calculateObscuringAlpha(elmIndex, elmStack) {\n        var totalAlpha = 0;\n        if (elmIndex > 0) {\n          // there are elements above our element, check if they are contribute to the background\n          for (var i = elmIndex - 1; i >= 0; i--) {\n            var bgElm = elmStack[i];\n            var bgElmStyle = window.getComputedStyle(bgElm);\n            var bgColor = getBgColor(bgElm, bgElmStyle);\n            if (bgColor.alpha) {\n              totalAlpha += bgColor.alpha;\n            } else {\n              // remove elements not contributing to the background\n              elmStack.splice(i, 1);\n            }\n          }\n        }\n        return totalAlpha;\n      }\n      /**\n   * Get all elements rendered underneath the current element, \n   * in the order in which it is rendered\n   */\n      color.getBackgroundStack = function(elm) {\n        var rect = elm.getBoundingClientRect();\n        var x = void 0, y = void 0;\n        if (rect.left > window.innerWidth) {\n          return;\n        }\n        if (rect.top > window.innerWidth) {\n          return;\n        }\n        x = Math.min(Math.ceil(rect.left + rect.width / 2), window.innerWidth - 1);\n        y = Math.min(Math.ceil(rect.top + rect.height / 2), window.innerHeight - 1);\n        var elmStack = document.elementsFromPoint(x, y);\n        elmStack = dom.reduceToElementsBelowFloating(elmStack, elm);\n        var bodyIndex = elmStack.indexOf(document.body);\n        if (// Check that the body background is the page's background\n        bodyIndex > 1 && // only if there are negative z-index elements\n        !elmHasImage(document.documentElement) && getBgColor(document.documentElement).alpha === 0) {\n          // Remove body and html from it's current place\n          elmStack.splice(bodyIndex, 1);\n          elmStack.splice(elmStack.indexOf(document.documentElement), 1);\n          // Put the body background as the lowest element\n          elmStack.push(document.body);\n        }\n        // Return all elements BELOW the current element, null if the element is undefined\n        var elmIndex = elmStack.indexOf(elm);\n        if (calculateObscuringAlpha(elmIndex, elmStack) >= .99) {\n          // if the total of the elements above our element results in total obscuring, return null\n          return null;\n        }\n        return elmIndex !== -1 ? elmStack : null;\n      };\n      color.getBackgroundColor = function(elm) {\n        var bgElms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var noScroll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (noScroll !== true) {\n          elm.scrollIntoView();\n        }\n        var bgColors = [];\n        var elmStack = color.getBackgroundStack(elm);\n        // Search the stack until we have an alpha === 1 background\n        (elmStack || []).some(function(bgElm) {\n          var bgElmStyle = window.getComputedStyle(bgElm);\n          // Get the background color\n          var bgColor = getBgColor(bgElm, bgElmStyle);\n          if (// abort if a node is outside it's parent and its parent has a background\n          elm !== bgElm && !dom.visuallyContains(elm, bgElm) && bgColor.alpha !== 0 || // OR if the background elm is a graphic\n          elmHasImage(bgElm, bgElmStyle)) {\n            bgColors = null;\n            bgElms.push(bgElm);\n            return true;\n          }\n          if (bgColor.alpha !== 0) {\n            // store elements contributing to the br color.\n            bgElms.push(bgElm);\n            bgColors.push(bgColor);\n            // Exit if the background is opaque\n            return bgColor.alpha === 1;\n          } else {\n            return false;\n          }\n        });\n        if (bgColors !== null && elmStack !== null) {\n          // Mix the colors together, on top of a default white\n          bgColors.push(new color.Color(255, 255, 255, 1));\n          return bgColors.reduce(color.flattenColors);\n        }\n        return null;\n      };\n      /**\n   * Determines whether an element has a fully opaque background, whether solid color or an image\n   * @param {Element} node\n   * @return {Boolean} false if the background is transparent, true otherwise\n   */\n      dom.isOpaque = function(node) {\n        var style = window.getComputedStyle(node);\n        return elmHasImage(node, style) || getBgColor(node, style).alpha === 1;\n      };\n      /*global color */\n      /**\n   * Returns the flattened foreground color of an element, or null if it can't be determined because\n   * of transparency\n   * @param {Element} node\n   * @param {Boolean} noScroll (default false)\n   * @return {Color}\n   */\n      color.getForegroundColor = function(node, noScroll) {\n        var nodeStyle = window.getComputedStyle(node);\n        var fgColor = new color.Color();\n        fgColor.parseRgbString(nodeStyle.getPropertyValue('color'));\n        var opacity = nodeStyle.getPropertyValue('opacity');\n        fgColor.alpha = fgColor.alpha * opacity;\n        if (fgColor.alpha === 1) {\n          return fgColor;\n        }\n        var bgColor = color.getBackgroundColor(node, [], noScroll);\n        if (bgColor === null) {\n          return null;\n        }\n        return color.flattenColors(fgColor, bgColor);\n      };\n      /* global dom */\n      /**\n   * Reduce an array of elements to only those that are below a 'floating' element.\n   *\n   * @param {Array} elements\n   * @param {Element} targetNode\n   * @returns {Array}\n   */\n      dom.reduceToElementsBelowFloating = function(elements, targetNode) {\n        var floatingPositions = [ 'fixed', 'sticky' ], finalElements = [], targetFound = false, index, currentNode, style;\n        // Filter out elements that are temporarily floating above the target\n        for (index = 0; index < elements.length; ++index) {\n          currentNode = elements[index];\n          if (currentNode === targetNode) {\n            targetFound = true;\n          }\n          style = window.getComputedStyle(currentNode);\n          if (!targetFound && floatingPositions.indexOf(style.position) !== -1) {\n            //Target was not found yet, so it must be under this floating thing (and will not always be under it)\n            finalElements = [];\n            continue;\n          }\n          finalElements.push(currentNode);\n        }\n        return finalElements;\n      };\n      /*global dom, axe */\n      /**\n   * recusively walk up the DOM, checking for a node which matches a selector\n   *\n   * **WARNING:** this should be used sparingly, as it's not even close to being performant\n   *\n   * @param {HTMLElement|String} element The starting HTMLElement\n   * @param {String} selector The selector for the HTMLElement\n   * @return {HTMLElement|null} Either the matching HTMLElement or `null` if there was no match\n   */\n      dom.findUp = function(element, target) {\n        'use strict';\n        /*jslint browser:true*/\n        var parent, matches = document.querySelectorAll(target), length = matches.length;\n        if (!length) {\n          return null;\n        }\n        matches = axe.utils.toArray(matches);\n        parent = element.parentNode;\n        // recrusively walk up the DOM, checking each parent node\n        while (parent && matches.indexOf(parent) === -1) {\n          parent = parent.parentNode;\n        }\n        return parent;\n      };\n      /*global dom */\n      dom.getElementByReference = function(node, attr) {\n        'use strict';\n        var candidate, fragment = node.getAttribute(attr), doc = document;\n        if (fragment && fragment.charAt(0) === '#') {\n          fragment = fragment.substring(1);\n          candidate = doc.getElementById(fragment);\n          if (candidate) {\n            return candidate;\n          }\n          candidate = doc.getElementsByName(fragment);\n          if (candidate.length) {\n            return candidate[0];\n          }\n        }\n        return null;\n      };\n      /*global dom */\n      /**\n   * Get the coordinates of the element passed into the function relative to the document\n   *\n   * #### Returns\n   *\n   * Returns a `Object` with the following properties, which\n   * each hold a value representing the pixels for each of the\n   * respective coordinates:\n   *\n   * - `top`\n   * - `right`\n   * - `bottom`\n   * - `left`\n   * - `width`\n   * - `height`\n   *\n   * @param {HTMLElement} el The HTMLElement\n   */\n      dom.getElementCoordinates = function(element) {\n        'use strict';\n        var scrollOffset = dom.getScrollOffset(document), xOffset = scrollOffset.left, yOffset = scrollOffset.top, coords = element.getBoundingClientRect();\n        return {\n          top: coords.top + yOffset,\n          right: coords.right + xOffset,\n          bottom: coords.bottom + yOffset,\n          left: coords.left + xOffset,\n          width: coords.right - coords.left,\n          height: coords.bottom - coords.top\n        };\n      };\n      /*global dom */\n      /**\n   * Get the scroll offset of the document passed in\n   *\n   * @param {Document} element The element to evaluate, defaults to document\n   * @return {Object} Contains the attributes `x` and `y` which contain the scroll offsets\n   */\n      dom.getScrollOffset = function(element) {\n        'use strict';\n        if (!element.nodeType && element.document) {\n          element = element.document;\n        }\n        // 9 === Node.DOCUMENT_NODE\n        if (element.nodeType === 9) {\n          var docElement = element.documentElement, body = element.body;\n          return {\n            left: docElement && docElement.scrollLeft || body && body.scrollLeft || 0,\n            top: docElement && docElement.scrollTop || body && body.scrollTop || 0\n          };\n        }\n        return {\n          left: element.scrollLeft,\n          top: element.scrollTop\n        };\n      };\n      /*global dom */\n      /**\n   * Gets the width and height of the viewport; used to calculate the right and bottom boundaries of the viewable area.\n   *\n   * @api private\n   * @param  {Object}  window The `window` object that should be measured\n   * @return {Object}  Object with the `width` and `height` of the viewport\n   */\n      dom.getViewportSize = function(win) {\n        'use strict';\n        var body, doc = win.document, docElement = doc.documentElement;\n        if (win.innerWidth) {\n          return {\n            width: win.innerWidth,\n            height: win.innerHeight\n          };\n        }\n        if (docElement) {\n          return {\n            width: docElement.clientWidth,\n            height: docElement.clientHeight\n          };\n        }\n        body = doc.body;\n        return {\n          width: body.clientWidth,\n          height: body.clientHeight\n        };\n      };\n      /*global dom, axe */\n      /**\n   * Get elements referenced via a space-separated token attribute; it will insert `null` for any Element that is not found\n   * @param  {HTMLElement} node\n   * @param  {String} attr The name of attribute\n   * @return {Array}      Array of elements (or `null` if not found)\n   */\n      dom.idrefs = function(node, attr) {\n        'use strict';\n        var index, length, doc = document, result = [], idrefs = node.getAttribute(attr);\n        if (idrefs) {\n          idrefs = axe.utils.tokenList(idrefs);\n          for (index = 0, length = idrefs.length; index < length; index++) {\n            result.push(doc.getElementById(idrefs[index]));\n          }\n        }\n        return result;\n      };\n      /*global dom */\n      /* jshint maxcomplexity: 20 */\n      /**\n   * Determines if an element is focusable\n   * @param {HTMLelement} element The HTMLelement\n   * @return {Boolean} The element's focusability status\n   */\n      dom.isFocusable = function(el) {\n        'use strict';\n        if (!el || el.disabled || !dom.isVisible(el) && el.nodeName.toUpperCase() !== 'AREA') {\n          return false;\n        }\n        switch (el.nodeName.toUpperCase()) {\n         case 'A':\n         case 'AREA':\n          if (el.href) {\n            return true;\n          }\n          break;\n\n         case 'INPUT':\n          return el.type !== 'hidden';\n\n         case 'TEXTAREA':\n         case 'SELECT':\n         case 'DETAILS':\n         case 'BUTTON':\n          return true;\n        }\n        // check if the tabindex is specified and a parseable number\n        var tabindex = el.getAttribute('tabindex');\n        if (tabindex && !isNaN(parseInt(tabindex, 10))) {\n          return true;\n        }\n        return false;\n      };\n      /*global dom */\n      dom.isHTML5 = function(doc) {\n        var node = doc.doctype;\n        if (node === null) {\n          return false;\n        }\n        return node.name === 'html' && !node.publicId && !node.systemId;\n      };\n      /* global axe, dom, window */\n      function walkDomNode(node, functor) {\n        'use strict';\n        var shouldWalk = functor(node);\n        node = node.firstChild;\n        while (node) {\n          if (shouldWalk !== false) {\n            walkDomNode(node, functor);\n          }\n          node = node.nextSibling;\n        }\n      }\n      var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n      function isBlock(elm) {\n        'use strict';\n        var display = window.getComputedStyle(elm).getPropertyValue('display');\n        return blockLike.indexOf(display) !== -1 || display.substr(0, 6) === 'table-';\n      }\n      dom.isInTextBlock = function isInTextBlock(node) {\n        // jshint maxcomplexity: 15\n        'use strict';\n        // Ignore if the link is a block\n        if (isBlock(node)) {\n          return false;\n        }\n        // Find the closest parent\n        var parentBlock = node.parentNode;\n        while (parentBlock.nodeType === 1 && !isBlock(parentBlock)) {\n          parentBlock = parentBlock.parentNode;\n        }\n        // Find all the text part of the parent block not in a link, and all the text in a link\n        var parentText = '';\n        var linkText = '';\n        var inBrBlock = 0;\n        // We want to ignore hidden text, and if br / hr is used, only use the section of the parent \n        // that has the link we're looking at\n        walkDomNode(parentBlock, function(currNode) {\n          // We're already passed it, skip everything else\n          if (inBrBlock === 2) {\n            return false;\n          }\n          if (currNode.nodeType === 3) {\n            // Add the text to the parent\n            parentText += currNode.nodeValue;\n          }\n          // Ignore any node that's not an element (or text as above)\n          if (currNode.nodeType !== 1) {\n            return;\n          }\n          var nodeName = (currNode.nodeName || '').toUpperCase();\n          // BR and HR elements break the line\n          if ([ 'BR', 'HR' ].indexOf(nodeName) !== -1) {\n            if (inBrBlock === 0) {\n              parentText = '';\n              linkText = '';\n            } else {\n              inBrBlock = 2;\n            }\n          } else {\n            if (currNode.style.display === 'none' || currNode.style.overflow === 'hidden' || [ '', null, 'none' ].indexOf(currNode.style.float) === -1 || [ '', null, 'relative' ].indexOf(currNode.style.position) === -1) {\n              return false;\n            } else {\n              if (nodeName === 'A' && currNode.href || (currNode.getAttribute('role') || '').toLowerCase() === 'link') {\n                if (currNode === node) {\n                  inBrBlock = 1;\n                }\n                // Grab all the text from this element, but don't walk down it's children\n                linkText += currNode.textContent;\n                return false;\n              }\n            }\n          }\n        });\n        parentText = axe.commons.text.sanitize(parentText);\n        linkText = axe.commons.text.sanitize(linkText);\n        return parentText.length > linkText.length;\n      };\n      /*global dom */\n      dom.isNode = function(candidate) {\n        'use strict';\n        return candidate instanceof Node;\n      };\n      /*global dom */\n      dom.isOffscreen = function(element) {\n        'use strict';\n        var leftBoundary, docElement = document.documentElement, dir = window.getComputedStyle(document.body || docElement).getPropertyValue('direction'), coords = dom.getElementCoordinates(element);\n        // bottom edge beyond\n        if (coords.bottom < 0) {\n          return true;\n        }\n        if (dir === 'ltr') {\n          if (coords.right < 0) {\n            return true;\n          }\n        } else {\n          leftBoundary = Math.max(docElement.scrollWidth, dom.getViewportSize(window).width);\n          if (coords.left > leftBoundary) {\n            return true;\n          }\n        }\n        return false;\n      };\n      /*global dom */\n      /*jshint maxcomplexity: 11 */\n      /**\n   * Determines if an element is hidden with the clip rect technique\n   * @param  {String}  clip Computed property value of clip\n   * @return {Boolean}\n   */\n      function isClipped(clip) {\n        'use strict';\n        var matches = clip.match(/rect\\s*\\(([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px\\s*\\)/);\n        if (matches && matches.length === 5) {\n          return matches[3] - matches[1] <= 0 && matches[2] - matches[4] <= 0;\n        }\n        return false;\n      }\n      /**\n   * Determine whether an element is visible\n   *\n   * @param {HTMLElement} el The HTMLElement\n   * @param {Boolean} screenReader When provided, will evaluate visibility from the perspective of a screen reader\n   * @return {Boolean} The element's visibilty status\n   */\n      dom.isVisible = function(el, screenReader, recursed) {\n        'use strict';\n        var style, nodeName = el.nodeName.toUpperCase(), parent = el.parentNode;\n        // 9 === Node.DOCUMENT\n        if (el.nodeType === 9) {\n          return true;\n        }\n        style = window.getComputedStyle(el, null);\n        if (style === null) {\n          return false;\n        }\n        if (style.getPropertyValue('display') === 'none' || nodeName.toUpperCase() === 'STYLE' || nodeName.toUpperCase() === 'SCRIPT' || !screenReader && isClipped(style.getPropertyValue('clip')) || !recursed && (// visibility is only accurate on the first element\n        style.getPropertyValue('visibility') === 'hidden' || // position does not matter if it was already calculated\n        !screenReader && dom.isOffscreen(el)) || screenReader && el.getAttribute('aria-hidden') === 'true') {\n          return false;\n        }\n        if (parent) {\n          return dom.isVisible(parent, screenReader, true);\n        }\n        return false;\n      };\n      /*global dom */\n      /*jshint maxcomplexity: 20 */\n      /**\n   * Check if an element is an inherently visual element\n   * @param  {object}  candidate The node to check\n   * @return {Boolean}\n   */\n      dom.isVisualContent = function(candidate) {\n        'use strict';\n        switch (candidate.tagName.toUpperCase()) {\n         case 'IMG':\n         case 'IFRAME':\n         case 'OBJECT':\n         case 'VIDEO':\n         case 'AUDIO':\n         case 'CANVAS':\n         case 'SVG':\n         case 'MATH':\n         case 'BUTTON':\n         case 'SELECT':\n         case 'TEXTAREA':\n         case 'KEYGEN':\n         case 'PROGRESS':\n         case 'METER':\n          return true;\n\n         case 'INPUT':\n          return candidate.type !== 'hidden';\n\n         default:\n          return false;\n        }\n      };\n      /* global dom */\n      /* jshint maxcomplexity: 11 */\n      /**\n   * Checks whether a parent element visually contains its child, either directly or via scrolling.\n   * Assumes that |parent| is an ancestor of |node|.\n   * @param {Element} node\n   * @param {Element} parent\n   * @return {boolean} True if node is visually contained within parent\n   */\n      dom.visuallyContains = function(node, parent) {\n        var rectBound = node.getBoundingClientRect();\n        var margin = .01;\n        var rect = {\n          top: rectBound.top + margin,\n          bottom: rectBound.bottom - margin,\n          left: rectBound.left + margin,\n          right: rectBound.right - margin\n        };\n        var parentRect = parent.getBoundingClientRect();\n        var parentTop = parentRect.top;\n        var parentLeft = parentRect.left;\n        var parentScrollArea = {\n          top: parentTop - parent.scrollTop,\n          bottom: parentTop - parent.scrollTop + parent.scrollHeight,\n          left: parentLeft - parent.scrollLeft,\n          right: parentLeft - parent.scrollLeft + parent.scrollWidth\n        };\n        //In theory, we should just be able to look at the scroll area as a superset of the parentRect,\n        //but that's not true in Firefox\n        if (rect.left < parentScrollArea.left && rect.left < parentRect.left || rect.top < parentScrollArea.top && rect.top < parentRect.top || rect.right > parentScrollArea.right && rect.right > parentRect.right || rect.bottom > parentScrollArea.bottom && rect.bottom > parentRect.bottom) {\n          return false;\n        }\n        var style = window.getComputedStyle(parent);\n        if (rect.right > parentRect.right || rect.bottom > parentRect.bottom) {\n          return style.overflow === 'scroll' || style.overflow === 'auto' || style.overflow === 'hidden' || parent instanceof HTMLBodyElement || parent instanceof HTMLHtmlElement;\n        }\n        return true;\n      };\n      /* global dom */\n      /* jshint maxcomplexity: 11 */\n      /**\n   * Checks whether a parent element visually overlaps a rectangle, either directly or via scrolling.\n   * @param {DOMRect} rect\n   * @param {Element} parent\n   * @return {boolean} True if rect is visually contained within parent\n   */\n      dom.visuallyOverlaps = function(rect, parent) {\n        var parentRect = parent.getBoundingClientRect();\n        var parentTop = parentRect.top;\n        var parentLeft = parentRect.left;\n        var parentScrollArea = {\n          top: parentTop - parent.scrollTop,\n          bottom: parentTop - parent.scrollTop + parent.scrollHeight,\n          left: parentLeft - parent.scrollLeft,\n          right: parentLeft - parent.scrollLeft + parent.scrollWidth\n        };\n        //In theory, we should just be able to look at the scroll area as a superset of the parentRect,\n        //but that's not true in Firefox\n        if (rect.left > parentScrollArea.right && rect.left > parentRect.right || rect.top > parentScrollArea.bottom && rect.top > parentRect.bottom || rect.right < parentScrollArea.left && rect.right < parentRect.left || rect.bottom < parentScrollArea.top && rect.bottom < parentRect.top) {\n          return false;\n        }\n        var style = window.getComputedStyle(parent);\n        if (rect.left > parentRect.right || rect.top > parentRect.bottom) {\n          return style.overflow === 'scroll' || style.overflow === 'auto' || parent instanceof HTMLBodyElement || parent instanceof HTMLHtmlElement;\n        }\n        return true;\n      };\n      /* global table */\n      table.getAllCells = function(tableElm) {\n        var rowIndex, cellIndex, rowLength, cellLength;\n        var cells = [];\n        for (rowIndex = 0, rowLength = tableElm.rows.length; rowIndex < rowLength; rowIndex++) {\n          for (cellIndex = 0, cellLength = tableElm.rows[rowIndex].cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(tableElm.rows[rowIndex].cells[cellIndex]);\n          }\n        }\n        return cells;\n      };\n      /*global table, dom */\n      /**\n   * Get the x, y coordinates of a table cell; normalized for rowspan and colspan\n   * @param  {HTMLTableCelLElement} cell The table cell of which to get the position\n   * @return {Object}      Object with `x` and `y` properties of the coordinates\n   */\n      table.getCellPosition = function(cell, tableGrid) {\n        var rowIndex, index;\n        if (!tableGrid) {\n          tableGrid = table.toGrid(dom.findUp(cell, 'table'));\n        }\n        for (rowIndex = 0; rowIndex < tableGrid.length; rowIndex++) {\n          if (tableGrid[rowIndex]) {\n            index = tableGrid[rowIndex].indexOf(cell);\n            if (index !== -1) {\n              return {\n                x: index,\n                y: rowIndex\n              };\n            }\n          }\n        }\n      };\n      /*global table */\n      /**\n   * Get any associated table headers for a `HTMLTableCellElement`\n   * @param  {HTMLTableCellElement} cell The cell of which to get headers\n   * @return {Array}      Array of headers associated to the table cell\n   */\n      table.getHeaders = function(cell) {\n        if (cell.hasAttribute('headers')) {\n          return commons.dom.idrefs(cell, 'headers');\n        }\n        var tableGrid = commons.table.toGrid(commons.dom.findUp(cell, 'table'));\n        var position = commons.table.getCellPosition(cell, tableGrid);\n        // TODO: RTL text\n        var rowHeaders = table.traverse('left', position, tableGrid).filter(function(cell) {\n          return table.isRowHeader(cell);\n        });\n        var colHeaders = table.traverse('up', position, tableGrid).filter(function(cell) {\n          return table.isColumnHeader(cell);\n        });\n        return [].concat(rowHeaders, colHeaders).reverse();\n      };\n      /*global table, dom */\n      /**\n   * Determine if a `HTMLTableCellElement` is a column header\n   * @param  {HTMLTableCellElement}  node The table cell to test\n   * @return {Boolean}\n   */\n      table.getScope = function(cell) {\n        var scope = cell.getAttribute('scope');\n        var role = cell.getAttribute('role');\n        if (cell instanceof Element === false || [ 'TD', 'TH' ].indexOf(cell.nodeName.toUpperCase()) === -1) {\n          throw new TypeError('Expected TD or TH element');\n        }\n        if (role === 'columnheader') {\n          return 'col';\n        } else {\n          if (role === 'rowheader') {\n            return 'row';\n          } else {\n            if (scope === 'col' || scope === 'row') {\n              return scope;\n            } else {\n              if (cell.nodeName.toUpperCase() !== 'TH') {\n                return false;\n              }\n            }\n          }\n        }\n        var tableGrid = table.toGrid(dom.findUp(cell, 'table'));\n        var pos = table.getCellPosition(cell);\n        // The element is in a row with all th elements, that makes it a column header\n        var headerRow = tableGrid[pos.y].reduce(function(headerRow, cell) {\n          return headerRow && cell.nodeName.toUpperCase() === 'TH';\n        }, true);\n        if (headerRow) {\n          return 'col';\n        }\n        // The element is in a column with all th elements, that makes it a row header\n        var headerCol = tableGrid.map(function(col) {\n          return col[pos.x];\n        }).reduce(function(headerCol, cell) {\n          return headerCol && cell.nodeName.toUpperCase() === 'TH';\n        }, true);\n        if (headerCol) {\n          return 'row';\n        }\n        return 'auto';\n      };\n      /*global table */\n      /**\n   * Determine if a `HTMLTableCellElement` is a column header\n   * @param  {HTMLTableCellElement}  node The table cell to test\n   * @return {Boolean}\n   */\n      table.isColumnHeader = function(node) {\n        return [ 'col', 'auto' ].indexOf(table.getScope(node)) !== -1;\n      };\n      /*global table */\n      /**\n   * Determine if a `HTMLTableCellElement` is a data cell\n   * @param  {HTMLTableCellElement}  node The table cell to test\n   * @return {Boolean}\n   */\n      table.isDataCell = function(cell) {\n        // @see http://www.whatwg.org/specs/web-apps/current-work/multipage/tables.html#empty-cell\n        if (!cell.children.length && !cell.textContent.trim()) {\n          return false;\n        }\n        return cell.nodeName.toUpperCase() === 'TD';\n      };\n      /*global table, dom */\n      /*jshint maxstatements: 70, maxcomplexity: 40 */\n      /**\n   * Determines whether a table is a data table\n   * @param  {HTMLTableElement}  node The table to test\n   * @return {Boolean}\n   * @see http://asurkov.blogspot.co.uk/2011/10/data-vs-layout-table.html\n   */\n      table.isDataTable = function(node) {\n        var role = node.getAttribute('role');\n        // The element is not focusable and has role=presentation\n        if ((role === 'presentation' || role === 'none') && !dom.isFocusable(node)) {\n          return false;\n        }\n        // Table inside editable area is data table always since the table structure is crucial for table editing\n        if (node.getAttribute('contenteditable') === 'true' || dom.findUp(node, '[contenteditable=\"true\"]')) {\n          return true;\n        }\n        // Table having ARIA table related role is data table\n        if (role === 'grid' || role === 'treegrid' || role === 'table') {\n          return true;\n        }\n        // Table having ARIA landmark role is data table\n        if (commons.aria.getRoleType(role) === 'landmark') {\n          return true;\n        }\n        // Table having datatable=\"0\" attribute is layout table\n        if (node.getAttribute('datatable') === '0') {\n          return false;\n        }\n        // Table having summary attribute is data table\n        if (node.getAttribute('summary')) {\n          return true;\n        }\n        // Table having legitimate data table structures is data table\n        if (node.tHead || node.tFoot || node.caption) {\n          return true;\n        }\n        // colgroup / col - colgroup is magically generated\n        for (var childIndex = 0, childLength = node.children.length; childIndex < childLength; childIndex++) {\n          if (node.children[childIndex].nodeName.toUpperCase() === 'COLGROUP') {\n            return true;\n          }\n        }\n        var cells = 0;\n        var rowLength = node.rows.length;\n        var row, cell;\n        var hasBorder = false;\n        for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH') {\n              return true;\n            }\n            if (!hasBorder && (cell.offsetWidth !== cell.clientWidth || cell.offsetHeight !== cell.clientHeight)) {\n              hasBorder = true;\n            }\n            if (cell.getAttribute('scope') || cell.getAttribute('headers') || cell.getAttribute('abbr')) {\n              return true;\n            }\n            if ([ 'columnheader', 'rowheader' ].indexOf(cell.getAttribute('role')) !== -1) {\n              return true;\n            }\n            // abbr element as a single child element of table cell\n            if (cell.children.length === 1 && cell.children[0].nodeName.toUpperCase() === 'ABBR') {\n              return true;\n            }\n            cells++;\n          }\n        }\n        // Table having nested table is layout table\n        if (node.getElementsByTagName('table').length) {\n          return false;\n        }\n        // Table having only one row or column is layout table (row)\n        if (rowLength < 2) {\n          return false;\n        }\n        // Table having only one row or column is layout table (column)\n        var sampleRow = node.rows[Math.ceil(rowLength / 2)];\n        if (sampleRow.cells.length === 1 && sampleRow.cells[0].colSpan === 1) {\n          return false;\n        }\n        // Table having many columns (>= 5) is data table\n        if (sampleRow.cells.length >= 5) {\n          return true;\n        }\n        // Table having borders around cells is data table\n        if (hasBorder) {\n          return true;\n        }\n        // Table having differently colored rows is data table\n        var bgColor, bgImage;\n        for (rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          if (bgColor && bgColor !== window.getComputedStyle(row).getPropertyValue('background-color')) {\n            return true;\n          } else {\n            bgColor = window.getComputedStyle(row).getPropertyValue('background-color');\n          }\n          if (bgImage && bgImage !== window.getComputedStyle(row).getPropertyValue('background-image')) {\n            return true;\n          } else {\n            bgImage = window.getComputedStyle(row).getPropertyValue('background-image');\n          }\n        }\n        // Table having many rows (>= 20) is data table\n        if (rowLength >= 20) {\n          return true;\n        }\n        // Wide table (more than 95% of the document width) is layout table\n        if (dom.getElementCoordinates(node).width > dom.getViewportSize(window).width * .95) {\n          return false;\n        }\n        // Table having small amount of cells (<= 10) is layout table\n        if (cells < 10) {\n          return false;\n        }\n        // Table containing embed, object, applet of iframe elements (typical advertisements elements) is layout table\n        if (node.querySelector('object, embed, iframe, applet')) {\n          return false;\n        }\n        // Otherwise it's data table\n        return true;\n      };\n      /*global table, axe */\n      /**\n   * Determine if a `HTMLTableCellElement` is a header\n   * @param  {HTMLTableCellElement}  node The table cell to test\n   * @return {Boolean}\n   */\n      table.isHeader = function(cell) {\n        if (table.isColumnHeader(cell) || table.isRowHeader(cell)) {\n          return true;\n        }\n        if (cell.id) {\n          return !!document.querySelector('[headers~=\"' + axe.utils.escapeSelector(cell.id) + '\"]');\n        }\n        return false;\n      };\n      /*global table */\n      /**\n   * Determine if a `HTMLTableCellElement` is a row header\n   * @param  {HTMLTableCellElement}  node The table cell to test\n   * @return {Boolean}\n   */\n      table.isRowHeader = function(node) {\n        return [ 'row', 'auto' ].indexOf(table.getScope(node)) !== -1;\n      };\n      /*global table */\n      /**\n   * Converts a table to an Array of arrays, normalized for row and column spans\n   * @param  {HTMLTableElement} node The table to convert\n   * @return {Array}      Array of rows and cells\n   */\n      table.toGrid = function(node) {\n        var table = [];\n        var rows = node.rows;\n        for (var i = 0, rowLength = rows.length; i < rowLength; i++) {\n          var cells = rows[i].cells;\n          table[i] = table[i] || [];\n          var columnIndex = 0;\n          for (var j = 0, cellLength = cells.length; j < cellLength; j++) {\n            for (var colSpan = 0; colSpan < cells[j].colSpan; colSpan++) {\n              for (var rowSpan = 0; rowSpan < cells[j].rowSpan; rowSpan++) {\n                table[i + rowSpan] = table[i + rowSpan] || [];\n                while (table[i + rowSpan][columnIndex]) {\n                  columnIndex++;\n                }\n                table[i + rowSpan][columnIndex] = cells[j];\n              }\n              columnIndex++;\n            }\n          }\n        }\n        return table;\n      };\n      // This was the old name\n      table.toArray = table.toGrid;\n      /* global table */\n      (function(table) {\n        var traverseTable = function traverseTable(dir, position, tableGrid, callback) {\n          var result;\n          var cell = tableGrid[position.y] ? tableGrid[position.y][position.x] : undefined;\n          if (!cell) {\n            return [];\n          }\n          if (typeof callback === 'function') {\n            result = callback(cell, position, tableGrid);\n            if (result === true) {\n              // abort\n              return [ cell ];\n            }\n          }\n          result = traverseTable(dir, {\n            x: position.x + dir.x,\n            y: position.y + dir.y\n          }, tableGrid, callback);\n          result.unshift(cell);\n          return result;\n        };\n        /**\n    * Traverses a table in a given direction, passing it to the callback\n    * @param  {object}   dir      Direction that will be added recursively {x: 1, y: 0};\n    * @param  {object}   start    x/y coordinate: {x: 0, y: 0};\n    * @param  {array}    [table]  A matrix of the table obtained using axe.commons.table.toArray (OPTIONAL)\n    * @param  {Function} callback Function to which each cell will be passed\n    * @return {nodeElemtn}        If the callback returns true, the traversal will end and the cell will be returned\n    */\n        table.traverse = function(dir, startPos, tableGrid, callback) {\n          if (Array.isArray(startPos)) {\n            callback = tableGrid;\n            tableGrid = startPos;\n            startPos = {\n              x: 0,\n              y: 0\n            };\n          }\n          if (typeof dir === 'string') {\n            switch (dir) {\n             case 'left':\n              dir = {\n                x: -1,\n                y: 0\n              };\n              break;\n\n             case 'up':\n              dir = {\n                x: 0,\n                y: -1\n              };\n              break;\n\n             case 'right':\n              dir = {\n                x: 1,\n                y: 0\n              };\n              break;\n\n             case 'down':\n              dir = {\n                x: 0,\n                y: 1\n              };\n              break;\n            }\n          }\n          return traverseTable(dir, {\n            x: startPos.x + dir.x,\n            y: startPos.y + dir.y\n          }, tableGrid, callback);\n        };\n      })(table);\n      /*global text, dom, aria, axe */\n      /*jshint maxstatements: 25, maxcomplexity: 19 */\n      var defaultButtonValues = {\n        submit: 'Submit',\n        reset: 'Reset'\n      };\n      var inputTypes = [ 'text', 'search', 'tel', 'url', 'email', 'date', 'time', 'number', 'range', 'color' ];\n      var phrasingElements = [ 'A', 'EM', 'STRONG', 'SMALL', 'MARK', 'ABBR', 'DFN', 'I', 'B', 'S', 'U', 'CODE', 'VAR', 'SAMP', 'KBD', 'SUP', 'SUB', 'Q', 'CITE', 'SPAN', 'BDO', 'BDI', 'BR', 'WBR', 'INS', 'DEL', 'IMG', 'EMBED', 'OBJECT', 'IFRAME', 'MAP', 'AREA', 'SCRIPT', 'NOSCRIPT', 'RUBY', 'VIDEO', 'AUDIO', 'INPUT', 'TEXTAREA', 'SELECT', 'BUTTON', 'LABEL', 'OUTPUT', 'DATALIST', 'KEYGEN', 'PROGRESS', 'COMMAND', 'CANVAS', 'TIME', 'METER' ];\n      /**\n   * Find a non-ARIA label for an element\n   *\n   * @param {HTMLElement} element The HTMLElement\n   * @return {HTMLElement} The label element, or null if none is found\n   */\n      function findLabel(element) {\n        var ref = null;\n        if (element.id) {\n          ref = document.querySelector('label[for=\"' + axe.utils.escapeSelector(element.id) + '\"]');\n          if (ref) {\n            return ref;\n          }\n        }\n        ref = dom.findUp(element, 'label');\n        return ref;\n      }\n      function isButton(element) {\n        return [ 'button', 'reset', 'submit' ].indexOf(element.type) !== -1;\n      }\n      function isInput(element) {\n        var nodeName = element.nodeName.toUpperCase();\n        return nodeName === 'TEXTAREA' || nodeName === 'SELECT' || nodeName === 'INPUT' && element.type.toLowerCase() !== 'hidden';\n      }\n      function shouldCheckSubtree(element) {\n        return [ 'BUTTON', 'SUMMARY', 'A' ].indexOf(element.nodeName.toUpperCase()) !== -1;\n      }\n      function shouldNeverCheckSubtree(element) {\n        return [ 'TABLE', 'FIGURE' ].indexOf(element.nodeName.toUpperCase()) !== -1;\n      }\n      /**\n   * Calculate value of a form element when treated as a value\n   *\n   * @param {HTMLElement} element The HTMLElement\n   * @return {string} The calculated value\n   */\n      function formValueText(element) {\n        var nodeName = element.nodeName.toUpperCase();\n        if (nodeName === 'INPUT') {\n          if (!element.hasAttribute('type') || inputTypes.indexOf(element.getAttribute('type').toLowerCase()) !== -1 && element.value) {\n            return element.value;\n          }\n          return '';\n        }\n        if (nodeName === 'SELECT') {\n          var opts = element.options;\n          if (opts && opts.length) {\n            var returnText = '';\n            for (var i = 0; i < opts.length; i++) {\n              if (opts[i].selected) {\n                returnText += ' ' + opts[i].text;\n              }\n            }\n            return text.sanitize(returnText);\n          }\n          return '';\n        }\n        if (nodeName === 'TEXTAREA' && element.value) {\n          return element.value;\n        }\n        return '';\n      }\n      function checkDescendant(element, nodeName) {\n        var candidate = element.querySelector(nodeName.toLowerCase());\n        if (candidate) {\n          return text.accessibleText(candidate);\n        }\n        return '';\n      }\n      /**\n   * Determine whether an element can be an embedded control\n   *\n   * @param {HTMLElement} element The HTMLElement\n   * @return {boolean} True if embedded control\n   */\n      function isEmbeddedControl(e) {\n        if (!e) {\n          return false;\n        }\n        switch (e.nodeName.toUpperCase()) {\n         case 'SELECT':\n         case 'TEXTAREA':\n          return true;\n\n         case 'INPUT':\n          return !e.hasAttribute('type') || inputTypes.indexOf(e.getAttribute('type').toLowerCase()) !== -1;\n\n         default:\n          return false;\n        }\n      }\n      function shouldCheckAlt(element) {\n        var nodeName = element.nodeName.toUpperCase();\n        return nodeName === 'INPUT' && element.type.toLowerCase() === 'image' || [ 'IMG', 'APPLET', 'AREA' ].indexOf(nodeName) !== -1;\n      }\n      function nonEmptyText(t) {\n        return !!text.sanitize(t);\n      }\n      /**\n   * Determine the accessible text of an element, using logic from ARIA:\n   * http://www.w3.org/TR/html-aam-1.0/\n   * http://www.w3.org/TR/wai-aria/roles#textalternativecomputation\n   *\n   * @param {HTMLElement} element The HTMLElement\n   * @param {Boolean} inLabelledByContext True when in the context of resolving a labelledBy\n   * @return {string}\n   */\n      text.accessibleText = function(element, inLabelledByContext) {\n        var accessibleNameComputation;\n        var encounteredNodes = [];\n        function getInnerText(element, inLabelledByContext, inControlContext) {\n          var nodes = element.childNodes;\n          var returnText = '';\n          var node;\n          for (var i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            if (node.nodeType === 3) {\n              returnText += node.textContent;\n            } else {\n              if (node.nodeType === 1) {\n                if (phrasingElements.indexOf(node.nodeName.toUpperCase()) === -1) {\n                  returnText += ' ';\n                }\n                returnText += accessibleNameComputation(nodes[i], inLabelledByContext, inControlContext);\n              }\n            }\n          }\n          return returnText;\n        }\n        function checkNative(element, inLabelledByContext, inControlContext) {\n          // jshint maxstatements:30\n          var returnText = '';\n          var nodeName = element.nodeName.toUpperCase();\n          if (shouldCheckSubtree(element)) {\n            returnText = getInnerText(element, false, false) || '';\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n          }\n          if (nodeName === 'FIGURE') {\n            returnText = checkDescendant(element, 'figcaption');\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n          }\n          if (nodeName === 'TABLE') {\n            returnText = checkDescendant(element, 'caption');\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n            returnText = element.getAttribute('title') || element.getAttribute('summary') || '';\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n          }\n          if (shouldCheckAlt(element)) {\n            return element.getAttribute('alt') || '';\n          }\n          if (isInput(element) && !inControlContext) {\n            if (isButton(element)) {\n              return element.value || element.title || defaultButtonValues[element.type] || '';\n            }\n            var labelElement = findLabel(element);\n            if (labelElement) {\n              return accessibleNameComputation(labelElement, inLabelledByContext, true);\n            }\n          }\n          return '';\n        }\n        function checkARIA(element, inLabelledByContext, inControlContext) {\n          if (!inLabelledByContext && element.hasAttribute('aria-labelledby')) {\n            return text.sanitize(dom.idrefs(element, 'aria-labelledby').map(function(l) {\n              if (element === l) {\n                encounteredNodes.pop();\n              }\n              //let element be encountered twice\n              return accessibleNameComputation(l, true, element !== l);\n            }).join(' '));\n          }\n          if (!(inControlContext && isEmbeddedControl(element)) && element.hasAttribute('aria-label')) {\n            return text.sanitize(element.getAttribute('aria-label'));\n          }\n          return '';\n        }\n        /**\n    * Determine the accessible text of an element, using logic from ARIA:\n    * http://www.w3.org/TR/accname-aam-1.1/#mapping_additional_nd_name\n    *\n    * @param {HTMLElement} element The HTMLElement\n    * @param {Boolean} inLabelledByContext True when in the context of resolving a labelledBy\n    * @param {Boolean} inControlContext True when in the context of textifying a widget\n    * @return {string}\n    */\n        accessibleNameComputation = function accessibleNameComputation(element, inLabelledByContext, inControlContext) {\n          'use strict';\n          var returnText;\n          // If the node was already checked or is null, skip\n          if (element === null || encounteredNodes.indexOf(element) !== -1) {\n            return '';\n          } else {\n            if (!inLabelledByContext && !dom.isVisible(element, true)) {\n              return '';\n            }\n          }\n          encounteredNodes.push(element);\n          var role = element.getAttribute('role');\n          //Step 2b & 2c\n          returnText = checkARIA(element, inLabelledByContext, inControlContext);\n          if (nonEmptyText(returnText)) {\n            return returnText;\n          }\n          //Step 2d - native attribute or elements\n          returnText = checkNative(element, inLabelledByContext, inControlContext);\n          if (nonEmptyText(returnText)) {\n            return returnText;\n          }\n          //Step 2e\n          if (inControlContext) {\n            returnText = formValueText(element);\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n          }\n          //Step 2f\n          if (!shouldNeverCheckSubtree(element) && (!role || aria.getRolesWithNameFromContents().indexOf(role) !== -1)) {\n            returnText = getInnerText(element, inLabelledByContext, inControlContext);\n            if (nonEmptyText(returnText)) {\n              return returnText;\n            }\n          }\n          //Step 2g - if text node, return value (handled in getInnerText)\n          //Step 2h\n          if (element.hasAttribute('title')) {\n            return element.getAttribute('title');\n          }\n          return '';\n        };\n        return text.sanitize(accessibleNameComputation(element, inLabelledByContext));\n      };\n      /*global text, dom, axe, aria */\n      /**\n   * Gets the visible text of a label for a given input\n   * @see http://www.w3.org/WAI/PF/aria/roles#namecalculation\n   * @param  {HTMLElement} node The input to test\n   * @return {Mixed}      String of visible text, or `null` if no label is found\n   */\n      text.label = function(node) {\n        var ref, candidate;\n        candidate = aria.label(node);\n        if (candidate) {\n          return candidate;\n        }\n        // explicit label\n        if (node.id) {\n          ref = document.querySelector('label[for=\"' + axe.utils.escapeSelector(node.id) + '\"]');\n          candidate = ref && text.visible(ref, true);\n          if (candidate) {\n            return candidate;\n          }\n        }\n        ref = dom.findUp(node, 'label');\n        candidate = ref && text.visible(ref, true);\n        if (candidate) {\n          return candidate;\n        }\n        return null;\n      };\n      /*global text */\n      text.sanitize = function(str) {\n        'use strict';\n        return str.replace(/\\r\\n/g, '\\n').replace(/\\u00A0/g, ' ').replace(/[\\s]{2,}/g, ' ').trim();\n      };\n      /*global text, dom */\n      text.visible = function(element, screenReader, noRecursing) {\n        'use strict';\n        var index, child, nodeValue, childNodes = element.childNodes, length = childNodes.length, result = '';\n        for (index = 0; index < length; index++) {\n          child = childNodes[index];\n          if (child.nodeType === 3) {\n            nodeValue = child.nodeValue;\n            if (nodeValue && dom.isVisible(element, screenReader)) {\n              result += child.nodeValue;\n            }\n          } else {\n            if (!noRecursing) {\n              result += text.visible(child, screenReader);\n            }\n          }\n        }\n        return text.sanitize(result);\n      };\n      /*global axe */\n      axe.utils.toArray = function(thing) {\n        'use strict';\n        return Array.prototype.slice.call(thing);\n      };\n      /*global axe */\n      axe.utils.tokenList = function(str) {\n        'use strict';\n        return str.trim().replace(/\\s{2,}/g, ' ').split(' ');\n      };\n      return commons;\n    }()\n  });\n})(typeof window === 'object' ? window : this);"}